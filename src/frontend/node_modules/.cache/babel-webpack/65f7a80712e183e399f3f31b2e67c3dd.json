{"ast":null,"code":"/// <reference path=\"../../../../node_modules/monaco-editor/monaco.d.ts\" />\n/// <reference path=\"../../../../node_modules/monaco-editor/monaco.d.ts\" />\nimport { EventEmitter } from '@angular/core';\nimport { File } from '../../shared/models/file.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../header/modes/mode.service\";\nimport * as i2 from \"../../header/settings/settings.service\";\nimport * as i3 from \"../../shared/services/code.service\";\nimport * as i4 from \"../../shared/services/file.service\";\nimport * as i5 from \"ngx-toastr\";\nimport * as i6 from \"src/app/shared/services/flow-structure.service\";\nconst _c0 = [\"editorContainer\"];\nlet loadedMonaco = false;\nlet loadPromise;\nexport let MonacoEditorComponent = /*#__PURE__*/(() => {\n  class MonacoEditorComponent {\n    constructor(monacoElement, modeService, settingsService, codeService, fileService, toastr, flowStructureService) {\n      this.monacoElement = monacoElement;\n      this.modeService = modeService;\n      this.settingsService = settingsService;\n      this.codeService = codeService;\n      this.fileService = fileService;\n      this.toastr = toastr;\n      this.flowStructureService = flowStructureService;\n      this.code = '';\n      this.codeChange = new EventEmitter();\n      this.currentFile = new File();\n      this.fileObservableUpdate = false;\n      this.updateQueue = [];\n      this.flowStructureService.setEditorComponent(this);\n    }\n\n    ngAfterViewInit() {\n      this.loadMonaco();\n    }\n\n    ngOnChanges() {\n      if (this.codeEditorInstance) {\n        this.codeEditorInstance.setValue(this.code);\n      }\n    }\n\n    ngOnDestroy() {\n      this.currentFileSubscription.unsubscribe();\n      this.modeSubscription.unsubscribe();\n      this.settingsSubscription.unsubscribe();\n    }\n\n    loadMonaco() {\n      if (loadedMonaco) {\n        loadPromise.then(() => {\n          this.initializeMonaco();\n        });\n      } else {\n        loadedMonaco = true;\n        loadPromise = new Promise(resolve => {\n          if (typeof window.monaco === 'object') {\n            resolve();\n            return;\n          }\n\n          const onAmdLoader = () => {\n            window.require.config({\n              paths: {\n                vs: 'assets/monaco/vs'\n              }\n            });\n\n            window.require(['vs/editor/editor.main'], () => {\n              this.initializeMonaco();\n              resolve();\n            });\n          };\n\n          if (!window.require) {\n            const loaderScript = document.createElement('script');\n            loaderScript.type = 'text/javascript';\n            loaderScript.src = 'assets/monaco/vs/loader.js';\n            loaderScript.addEventListener('load', onAmdLoader);\n            document.body.appendChild(loaderScript);\n          } else {\n            onAmdLoader();\n          }\n        });\n      }\n    }\n\n    initializeMonaco() {\n      this.initializeEditor();\n      this.initializeActions();\n      this.initializeFile();\n      this.initUpdateQueue();\n      this.initializeTwoWayBinding();\n      this.initializeResizeObserver();\n      this.initializeThemeObserver();\n    }\n\n    initializeEditor() {\n      this.codeEditorInstance = monaco.editor.create(this.editorContainer.nativeElement, {\n        language: 'xml',\n        theme: 'vs-dark'\n      });\n    }\n\n    initializeActions() {\n      this.codeEditorInstance.addAction({\n        id: 'memento-undo-action',\n        label: 'Undo',\n        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_Z],\n        contextMenuGroupId: 'memento',\n        contextMenuOrder: 2,\n        run: () => this.setValue(this.codeService.undo())\n      });\n      this.codeEditorInstance.addAction({\n        id: 'memento-redo-action',\n        label: 'Redo',\n        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_Y],\n        contextMenuGroupId: 'memento',\n        contextMenuOrder: 3,\n        run: () => this.setValue(this.codeService.redo())\n      });\n      this.codeEditorInstance.addAction({\n        id: 'file-save-action',\n        label: 'Save',\n        keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S],\n        contextMenuGroupId: 'file',\n        contextMenuOrder: 3,\n        run: () => this.save()\n      });\n    }\n\n    save() {\n      this.codeService.save();\n    }\n\n    initializeFile() {\n      this.setValue(this.codeService.getCurrentFile());\n    }\n\n    setValue(file) {\n      if (file === null || file === void 0 ? void 0 : file.data) {\n        this.currentFile = file;\n        this.codeEditorInstance.setValue(file.data);\n      }\n    }\n\n    applyEdit(range, text, flowUpdate) {\n      var _a;\n\n      const editOperations = [];\n      const editOperation = {\n        range,\n        text\n      };\n      editOperations.push(editOperation);\n      this.fileObservableUpdate = flowUpdate;\n      (_a = this.codeEditorInstance.getModel()) === null || _a === void 0 ? void 0 : _a.applyEdits(editOperations);\n    }\n\n    initializeTwoWayBinding() {\n      const model = this.codeEditorInstance.getModel();\n\n      if (model) {\n        model.onDidChangeContent(this.debounce(() => {\n          if (this.currentFile && !this.fileObservableUpdate) {\n            this.fileObservableUpdate = true;\n            this.currentFile.data = this.codeEditorInstance.getValue();\n            this.currentFile.saved = false;\n            this.codeService.setCurrentFile(this.currentFile);\n          } else {\n            this.fileObservableUpdate = false;\n          }\n        }, 500));\n      }\n\n      this.currentFileSubscription = this.codeService.curFileObservable.subscribe({\n        next: file => {\n          if (file.data) {\n            this.updateQueue.push(file);\n            this.currentFile = file;\n          }\n        }\n      });\n    }\n\n    initUpdateQueue() {\n      const model = this.codeEditorInstance.getModel();\n      setInterval(() => {\n        const file = this.updateQueue.shift();\n\n        if (file && file.data && !this.fileObservableUpdate) {\n          this.fileObservableUpdate = true;\n          model === null || model === void 0 ? void 0 : model.setValue(file.data);\n          this.currentFile = file;\n        } else if (file && this.fileObservableUpdate) {\n          this.fileObservableUpdate = false;\n        }\n      }, 510);\n    }\n\n    debounce(func, wait) {\n      let timeout;\n      return () => {\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n\n        timeout = setTimeout(() => func.apply(this, arguments), wait);\n      };\n    }\n\n    initializeResizeObserver() {\n      this.modeSubscription = this.modeService.getMode().subscribe({\n        next: () => {\n          this.onResize();\n        }\n      });\n    }\n\n    onResize() {\n      const parentElement = this.monacoElement.nativeElement.parentElement;\n\n      if (parentElement) {\n        setTimeout(() => this.codeEditorInstance.layout({\n          height: parentElement.offsetHeight,\n          width: parentElement.offsetWidth - parentElement.children[0].offsetWidth\n        }));\n      }\n    }\n\n    initializeThemeObserver() {\n      this.settingsSubscription = this.settingsService.getSettings().subscribe({\n        next: settings => {\n          this.onThemeChange(settings);\n        }\n      });\n    }\n\n    onThemeChange(settings) {\n      this.codeEditorInstance.updateOptions({\n        theme: settings.darkMode ? 'vs-dark' : 'vs-light'\n      });\n    }\n\n  }\n\n  MonacoEditorComponent.ɵfac = function MonacoEditorComponent_Factory(t) {\n    return new (t || MonacoEditorComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ModeService), i0.ɵɵdirectiveInject(i2.SettingsService), i0.ɵɵdirectiveInject(i3.CodeService), i0.ɵɵdirectiveInject(i4.FileService), i0.ɵɵdirectiveInject(i5.ToastrService), i0.ɵɵdirectiveInject(i6.FlowStructureService));\n  };\n\n  MonacoEditorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MonacoEditorComponent,\n    selectors: [[\"app-monaco-editor\"]],\n    viewQuery: function MonacoEditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editorContainer = _t.first);\n      }\n    },\n    inputs: {\n      code: \"code\"\n    },\n    outputs: {\n      codeChange: \"codeChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"editor-container\"], [\"editorContainer\", \"\"]],\n    template: function MonacoEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{background-color:var(--bg-color);height:100%}.editor-container[_ngcontent-%COMP%]{height:100%}\"]\n  });\n  return MonacoEditorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}