{"ast":null,"code":"import { Component, NgZone, ViewChild, Input, NgModule } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as Éµngcc0 from '@angular/core';\nconst _c0 = [\"frameElement\"];\nconst _c1 = [\"panElement\"];\nconst _c2 = [\"zoomElement\"];\nconst _c3 = [\"panzoomOverlay\"];\nconst _c4 = [\"*\"];\nlet PanZoomComponent = /*#__PURE__*/(() => {\n  class PanZoomComponent {\n    constructor(zone) {\n      this.zone = zone;\n      this.isDragging = false;\n      this.lastTick = 0;\n      this.isChrome = false;\n      this.willChangeNextFrame = true; // used for scaling in Chrome\n\n      this.isMobile = false;\n      this.isFirstSync = true;\n      this.zoomLevelIsChanging = false;\n      this.dragFinishing = false; //////////////////////////// END OF LIFECYCLE HOOKS ////////////////////////////\n      ////////////////////////////////////////////////////////////////////////////////\n      ///////////////////////////////// EVENT HANDLERS ///////////////////////////////\n      ////////////////////////////////////////////////////////////////////////////////\n\n      this.onMouseWheel = event => {\n        // console.log('PanZoomComponent: OnMouseWheel() event:', event);\n        if (!(event && event.pageX && event.pageY)) {\n          return;\n        }\n\n        let deltaY = event.deltaY;\n\n        if (this.config.zoomOnMouseWheel) {\n          if (this.animationParams) {\n            return; // already zooming\n          }\n\n          if (!this.config.invertMouseWheel) {\n            deltaY = -deltaY;\n          }\n\n          const frameElementOffset = this.getFrameElementOffset();\n          const clickPoint = {\n            x: event.pageX - frameElementOffset.left,\n            y: event.pageY - frameElementOffset.top\n          };\n          this.lastClickPoint = clickPoint;\n\n          if (this.config.freeMouseWheel) {\n            // free wheel scroll\n            this.freeZoom(clickPoint, deltaY);\n          } else {\n            if (deltaY < 0) {\n              this.zoomInToPoint(clickPoint);\n            } else if (deltaY > 0) {\n              this.zoomOutFromPoint(clickPoint);\n            }\n          }\n        }\n      };\n\n      this.onMousedown = event => {\n        // console.log('PanZoomComponent: onMousedown()', event);\n\n        /* Check if clicked location is inside element from which\n           dragging is prevented. */\n        if (this.config.noDragFromElementClass && this.isParentElement(this.config.noDragFromElementClass, event.srcElement)) {\n          return;\n        }\n\n        if (event.button === this.dragMouseButton || event.type === 'touchstart') {\n          if (event.type !== 'touchstart') {\n            event.preventDefault();\n          }\n\n          this.dragFinishing = false;\n          this.panVelocity = undefined;\n\n          if (this.config.panOnClickDrag) {\n            this.previousPosition = {\n              x: event.pageX,\n              y: event.pageY\n            };\n            this.lastMouseEventTime = event.timeStamp;\n            this.isDragging = true;\n            this.model.isPanning = false;\n\n            if (this.isMobile) {\n              this.zone.runOutsideAngular(() => document.addEventListener('touchend', this.onTouchEnd, false)); // leave this on document\n\n              this.zone.runOutsideAngular(() => document.addEventListener('touchmove', this.onTouchMove, {\n                passive: true,\n                capture: false\n              })); // leave this on document\n            } else {\n              this.zone.runOutsideAngular(() => document.addEventListener('mousemove', this.onMouseMove, {\n                passive: true,\n                capture: false\n              })); // leave this on document\n\n              this.zone.runOutsideAngular(() => document.addEventListener('mouseup', this.onMouseUp)); // leave this on document\n            }\n          }\n\n          return false;\n        }\n      };\n\n      this.onTouchStart = event => {\n        // console.log('PanZoomComponent: onTouchStart()', event);\n        // console.log('PanZoomComponent: onTouchStart(): touches:', event.touches.length);\n        //event.preventDefault();\n        if (event.touches.length !== 1) {\n          // multiple touches, get ready for zooming\n          // Calculate x and y distance between touch events\n          const x = event.touches[0].pageX - event.touches[1].pageX;\n          const y = event.touches[0].pageY - event.touches[1].pageY; // Calculate length between touch points with pythagoras\n          // There is no reason to use Math.pow and Math.sqrt as we\n          // only want a relative length and not the exact one.\n\n          this.previousPosition = {\n            length: x * x + y * y\n          };\n        }\n\n        this.onMousedown(event);\n      };\n\n      this.onMouseMove = event => {\n        // console.log('PanZoomComponent: onMouseMove()', event);\n        // console.log(`PanZoomComponent: onMouseMove(): event.timeStamp:`, event.timeStamp);\n        // timestamp - 10587.879999999132 - milliseconds\n        // Called when moving the mouse with the left button down\n        let evWrap;\n\n        if (event && event.pageX && event.pageY) {\n          evWrap = event;\n        } else if (event.type === 'touchmove' && event.touches[0].pageX && event.touches[0].pageY) {\n          evWrap = {\n            pageX: event.touches[0].pageX,\n            pageY: event.touches[0].pageY\n          };\n        } else {\n          return;\n        }\n\n        const now = event.timeStamp;\n        const timeSinceLastMouseEvent = (now - this.lastMouseEventTime) / 1000;\n        this.lastMouseEventTime = now;\n        const dragDelta = {\n          // a representation of how far each coordinate has moved since the last time it was moved\n          x: evWrap.pageX - this.previousPosition.x,\n          y: evWrap.pageY - this.previousPosition.y\n        };\n\n        if (this.config.keepInBounds) {\n          const topLeftCornerView = this.getViewPosition({\n            x: 0,\n            y: 0\n          });\n          const bottomRightCornerView = this.getViewPosition({\n            x: this.contentWidth,\n            y: this.contentHeight\n          });\n\n          if (topLeftCornerView.x > 0 && dragDelta.x > 0) {\n            dragDelta.x *= Math.min(1, Math.pow(topLeftCornerView.x, -this.config.keepInBoundsDragPullback));\n          }\n\n          if (topLeftCornerView.y > 0 && dragDelta.y > 0) {\n            dragDelta.y *= Math.min(1, Math.pow(topLeftCornerView.y, -this.config.keepInBoundsDragPullback));\n          }\n\n          if (bottomRightCornerView.x < this.contentWidth && dragDelta.x < 0) {\n            dragDelta.x *= Math.min(1, Math.pow(this.contentWidth - bottomRightCornerView.x, -this.config.keepInBoundsDragPullback));\n          }\n\n          if (bottomRightCornerView.y < this.contentHeight && dragDelta.y < 0) {\n            dragDelta.y *= Math.min(1, Math.pow(this.contentHeight - bottomRightCornerView.y, -this.config.keepInBoundsDragPullback));\n          }\n        } // now pan the view\n\n\n        const delta = {\n          x: dragDelta.x || 0,\n          y: dragDelta.y || 0\n        };\n        this.model.pan.x += delta.x;\n        this.model.pan.y += delta.y;\n        this.syncBaseToModel();\n        this.animationTick();\n\n        if (!this.model.isPanning) {\n          // This will improve the performance,\n          // because the browser stops evaluating hits against the elements displayed inside the pan zoom view.\n          // Besides this, mouse events will not be sent to any other elements,\n          // this prevents issues like selecting elements while dragging.\n          this.panzoomOverlayRef.nativeElement.style.display = 'block';\n        }\n\n        this.model.isPanning = true; // set these for the animation slow down once drag stops\n        // panVelocity is a measurement of speed for x and y coordinates, in pixels per mouse move event.  It is a measure of how fast the mouse is moving\n\n        const panVelocityX = dragDelta.x / timeSinceLastMouseEvent;\n        const panVelocityY = dragDelta.y / timeSinceLastMouseEvent;\n        this.panVelocity = {\n          x: !Number.isFinite(panVelocityX) ? 0 : panVelocityX,\n          y: !Number.isFinite(panVelocityY) ? 0 : panVelocityY\n        }; // console.log(`PanZoomComponent: onMouseMove(): panVelocity:`, this.panVelocity);\n\n        this.previousPosition = {\n          x: evWrap.pageX,\n          y: evWrap.pageY\n        };\n      };\n\n      this.onTouchMove = event => {\n        // console.log('PanZoomComponent: onTouchMove()');\n        // console.log('PanZoomComponent: onTouchMove(): event:', event);\n        if (event.touches.length === 1) {\n          // single touch, emulate mouse move\n          this.onMouseMove(event);\n        } else {\n          // multiple touches, zoom in/out\n          // console.log('pinch zooming');\n          // Calculate x and y distance between touch events\n          const x = event.touches[0].pageX - event.touches[1].pageX;\n          const y = event.touches[0].pageY - event.touches[1].pageY; // Calculate length between touch points with pythagoras\n          // There is no reason to use Math.pow and Math.sqrt as we\n          // only want a relative length and not the exact one.\n\n          const length = x * x + y * y; // Calculate delta between current position and last position\n\n          const delta = length - this.previousPosition.length; // Naive hysteresis\n\n          if (Math.abs(delta) < 100) {\n            return;\n          } // Calculate center between touch points\n\n\n          const centerX = event.touches[1].pageX + x / 2;\n          const centerY = event.touches[1].pageY + y / 2; // Calculate zoom center\n\n          const frameElementOffset = this.getFrameElementOffset();\n          const clickPoint = {\n            x: centerX - frameElementOffset.left,\n            y: centerY - frameElementOffset.top\n          };\n          this.lastClickPoint = clickPoint;\n          this.changeZoomLevel(this.base.zoomLevel + delta * 0.0001, clickPoint); // Update length for next move event\n\n          this.previousPosition = {\n            length: length\n          };\n        }\n      };\n\n      this.onMouseUp = event => {\n        // console.log('PanZoomComponent: onMouseup()', event);\n        if (event.button !== this.dragMouseButton && event.type !== 'touchend') {\n          return;\n        }\n\n        if (event.type !== 'touchend') {\n          event.preventDefault();\n        }\n\n        const now = event.timeStamp;\n        const timeSinceLastMouseEvent = (now - this.lastMouseEventTime) / 1000;\n\n        if (this.panVelocity && (this.panVelocity.x !== 0 || this.panVelocity.y !== 0)) {\n          // apply strong initial dampening if the mouse up occured much later than the last mouse move, indicating that the mouse hasn't moved recently\n          // TBD - experiment with this formula\n          const initialMultiplier = Math.max(0, -0.2 + Math.pow(timeSinceLastMouseEvent + 1, -4));\n          this.panVelocity.x *= initialMultiplier;\n          this.panVelocity.y *= initialMultiplier;\n          this.dragFinishing = true;\n          this.zone.runOutsideAngular(() => this.animationId = this.animationFrameFunc(this.animationTick));\n        } else {\n          this.panVelocity = undefined;\n          this.dragFinishing = false;\n          this.model.isPanning = false;\n          this.config.modelChanged.next(this.model);\n          this.syncBaseToModel();\n        }\n\n        this.isDragging = false;\n\n        if (this.isMobile) {\n          this.zone.runOutsideAngular(() => document.removeEventListener('touchend', this.onTouchEnd));\n          this.zone.runOutsideAngular(() => document.removeEventListener('touchmove', this.onTouchMove, {\n            passive: true,\n            capture: false\n          }));\n        } else {\n          this.zone.runOutsideAngular(() => document.removeEventListener('mousemove', this.onMouseMove, {\n            passive: true,\n            capture: false\n          }));\n          this.zone.runOutsideAngular(() => document.removeEventListener('mouseup', this.onMouseUp, {\n            passive: true\n          }));\n        } // Set the overlay to non-blocking again:\n\n\n        this.panzoomOverlayRef.nativeElement.style.display = 'none';\n      };\n\n      this.onTouchEnd = event => {\n        // console.log('PanZoomComponent: onTouchEnd()');\n        this.onMouseUp(event);\n      };\n\n      this.onDblClick = event => {\n        // console.log('PanZoomComponent: onDblClick()');\n        event.preventDefault();\n\n        if (!this.config.zoomOnDoubleClick) {\n          return;\n        }\n\n        const frameElementOffset = this.getFrameElementOffset();\n        const clickPoint = {\n          x: event.pageX - frameElementOffset.left,\n          y: event.pageY - frameElementOffset.top\n        };\n        this.lastClickPoint = clickPoint;\n        this.zoomInToPoint(clickPoint);\n      };\n\n      this.preventDefault = event => {\n        event.preventDefault();\n      }; ////////////////////////////////////////////////////////////////////////////////\n      ///////////////////////////// END EVENT HANDLERS ///////////////////////////////\n      ////////////////////////////////////////////////////////////////////////////////\n      ////////////////////////////////////////////////////////////////////////////////\n      ///////////////////////////// APPLY ANIMATIONS /////////////////////////////////\n      ////////////////////////////////////////////////////////////////////////////////\n\n\n      this.animationTick = (timestamp = performance.now()) => {\n        // console.log('PanZoomComponent: animationTick()');\n        // timestamp looks like 76916.963.  The unit is milliseconds and should be accurate to 5 Âµs (microseconds)\n        let deltaTime = 0;\n\n        if (this.lastTick !== 0) {\n          deltaTime = timestamp - this.lastTick; // orig - milliseconds since the last animationTick\n        }\n\n        this.lastTick = timestamp;\n\n        if (this.animationParams) {\n          // when we're running an animation (but not waiting for a released drag to halt)\n          // console.log('PanZoomComponent: animationTick(): model is zooming');\n          this.animationParams.progress += Math.abs(deltaTime / this.animationParams.duration);\n\n          if (this.animationParams.progress >= 1.0) {\n            // Only when the animation has finished, sync the base to the model.\n            this.animationParams.progress = 1.0;\n            this.updateDOM();\n            this.animationParams = undefined;\n          }\n        }\n\n        if (this.panVelocity && this.dragFinishing) {\n          // This is when we've panned and released the mouse button and the view is \"free-floating\" until it slows to a halt.  Don't let the while loop fool you - this only applies it for the current frame.\n          // Prevent overshooting if delta time is large for some reason. We apply the simple solution of slicing delta time into smaller pieces and applying each one\n          if (deltaTime > 0) {\n            deltaTime = deltaTime / 1000;\n          }\n\n          while (deltaTime > 0) {\n            const dTime = Math.min(.02, deltaTime);\n            deltaTime = deltaTime - dTime;\n            this.model.pan.x = this.model.pan.x + this.panVelocity.x * dTime;\n            this.panVelocity.x = this.panVelocity.x * (1 - this.config.friction * dTime);\n            this.model.pan.y = this.model.pan.y + this.panVelocity.y * dTime;\n            this.panVelocity.y = this.panVelocity.y * (1 - this.config.friction * dTime);\n            const speed = this.length(this.panVelocity);\n\n            if (speed <= this.config.haltSpeed) {\n              this.panVelocity = undefined;\n              this.dragFinishing = false;\n              break;\n            }\n          }\n        }\n\n        if (this.config.keepInBounds || this.dragFinishing) {\n          // Checks that keepInBounds is set and that the mouse button isn't pressed, and if so, it stops the contents from going out of view\n          // console.log('PanZoomComponent: animationTick(): keepInBounds');\n          const topLeftCornerView = this.getViewPosition({\n            x: 0,\n            y: 0\n          });\n          const bottomRightCornerView = this.getViewPosition({\n            x: this.contentWidth,\n            y: this.contentHeight\n          });\n\n          if (topLeftCornerView.x > 0) {\n            this.base.pan.x -= this.config.keepInBoundsRestoreForce * topLeftCornerView.x;\n          }\n\n          if (topLeftCornerView.y > 0) {\n            this.base.pan.y -= this.config.keepInBoundsRestoreForce * topLeftCornerView.y;\n          }\n\n          if (bottomRightCornerView.x < this.contentWidth) {\n            this.base.pan.x -= this.config.keepInBoundsRestoreForce * (bottomRightCornerView.x - this.contentWidth);\n          }\n\n          if (bottomRightCornerView.y < this.contentHeight) {\n            this.base.pan.y -= this.config.keepInBoundsRestoreForce * (bottomRightCornerView.y - this.contentHeight);\n          }\n        }\n\n        this.updateDOM();\n        this.config.modelChanged.next(this.model);\n\n        if (this.animationParams || this.panVelocity && this.dragFinishing) {\n          // Is an animation active?  If so, run the next frame\n          if (this.isChrome && this.zoomLevelIsChanging) {\n            // run will-change toggle hack on Chrome to trigger re-rasterization\n            // see https://developers.google.com/web/updates/2016/09/re-rastering-composite\n            if (this.willChangeNextFrame) {\n              this.zoomElementRef.nativeElement.style.willChange = 'auto';\n            } else {\n              this.zoomElementRef.nativeElement.style.willChange = 'transform';\n            }\n\n            this.willChangeNextFrame = !this.willChangeNextFrame;\n          }\n\n          this.animationFrameFunc(this.animationTick); // Call the next animation frame\n        } else if (this.panVelocity && !this.dragFinishing) {\n          // we're just mouse-panning the frame.  We don't need another tick\n          return;\n        } else {\n          // Animation has ended\n          if (this.model.isPanning) {\n            this.model.isPanning = false;\n          }\n\n          this.syncBaseToModel();\n          this.config.modelChanged.next(this.model);\n          this.scale = this.getCssScale(this.base.zoomLevel);\n          this.willChangeNextFrame = true;\n          this.zoomElementRef.nativeElement.style.willChange = 'transform';\n          this.zoomLevelIsChanging = false;\n          this.lastTick = 0;\n        }\n      };\n    }\n\n    ngOnInit() {\n      // console.log('PanZoomComponent: ngOnInit(): initializing PanZoomComponent');\n      if (this.config.initialZoomToFit) {\n        this.base = this.calcZoomToFit(this.config.initialZoomToFit);\n      } else {\n        this.base = {\n          zoomLevel: this.config.initialZoomLevel,\n          pan: {\n            x: this.config.initialPanX,\n            y: this.config.initialPanY\n          }\n        };\n      }\n\n      this.model = {\n        zoomLevel: this.base.zoomLevel,\n        isPanning: false,\n        pan: {\n          x: this.base.pan.x,\n          y: this.base.pan.y\n        }\n      };\n      this.config.modelChanged.next(this.model); // create public API\n\n      this.api = {\n        model: this.model,\n        config: this.config,\n        changeZoomLevel: this.zoomToLevelAndPoint.bind(this),\n        zoomIn: this.zoomIn.bind(this),\n        zoomOut: this.zoomOut.bind(this),\n        zoomToFit: this.zoomToFit.bind(this),\n        resetView: this.resetView.bind(this),\n        getViewPosition: this.getViewPosition.bind(this),\n        getModelPosition: this.getModelPosition.bind(this),\n        panToPoint: this.panToPoint.bind(this),\n        panDelta: this.panDelta.bind(this),\n        panDeltaPercent: this.panDeltaPercent.bind(this),\n        panDeltaAbsolute: this.panDeltaAbsolute.bind(this),\n        centerContent: this.centerContent.bind(this),\n        centerX: this.centerX.bind(this),\n        centerY: this.centerY.bind(this),\n        centerTopLeft: this.centerTopLeftCorner.bind(this),\n        centerBottomLeft: this.centerBottomLeftCorner.bind(this),\n        centerTopRight: this.centerTopRightCorner.bind(this),\n        centerBottomRight: this.centerBottomRightCorner.bind(this),\n        updateContentDimensions: this.updateContentDimensions.bind(this),\n        detectContentDimensions: this.detectContentDimensions.bind(this)\n      };\n      this.config.api.next(this.api);\n\n      if (this.config.freeMouseWheel) {\n        this.scale = this.getCssScale(this.config.initialZoomLevel);\n        const maxZoomLevel = this.config.zoomLevels - 1;\n        this.maxScale = this.getCssScale(maxZoomLevel);\n        this.minScale = this.getCssScale(0);\n      }\n\n      this.minimumAllowedZoomLevel = 0;\n\n      if (this.config.keepInBounds) {\n        this.minimumAllowedZoomLevel = this.config.neutralZoomLevel;\n        this.minScale = this.getCssScale(this.config.neutralZoomLevel);\n      }\n\n      this.zoomElementRef.nativeElement.style.willChange = 'transform';\n\n      if (navigator.userAgent.search('Chrome') >= 0) {\n        this.isChrome = true;\n        this.zoomElementRef.nativeElement.style.transform = 'translateZ(0)';\n      }\n\n      if (this.config.acceleratePan) {\n        this.panElementRef.nativeElement.style.willChange = 'transform';\n\n        if (navigator.userAgent.search('Chrome') >= 0) {\n          this.isChrome = true;\n          this.panElementRef.nativeElement.style.transform = 'translateZ(0)';\n        }\n      }\n\n      this.animationTick();\n      this.scale = this.getCssScale(this.base.zoomLevel);\n      this.isFirstSync = false;\n\n      switch (this.config.dragMouseButton) {\n        case 'left':\n          this.dragMouseButton = 0;\n          break;\n\n        case 'middle':\n          this.dragMouseButton = 1;\n          this.zone.runOutsideAngular(() => this.frameElementRef.nativeElement.addEventListener('auxclick', this.preventDefault));\n          break;\n\n        case 'right':\n          this.zone.runOutsideAngular(() => document.addEventListener('contextmenu', this.preventDefault));\n          this.dragMouseButton = 2;\n          break;\n\n        default:\n          this.dragMouseButton = 0;\n        // left\n      }\n    }\n\n    ngAfterViewInit() {\n      // console.log('PanZoomComponent: ngAfterViewInit()');\n      this.detectContentDimensions();\n      const frameStyle = getComputedStyle(this.frameElementRef.nativeElement);\n      this.frameHeight = parseInt(frameStyle.getPropertyValue('height').split('px')[0]);\n      this.frameWidth = parseInt(frameStyle.getPropertyValue('width').split('px')[0]);\n      this.zone.runOutsideAngular(() => this.animationFrameFunc = window.requestAnimationFrame);\n\n      if (this.config.dynamicContentDimensions) {\n        if (window.ResizeObserver) {\n          this.resizeObserver = new window.ResizeObserver(entries => this.onContentDimensionsChangeDetected(entries));\n          this.zone.runOutsideAngular(() => this.resizeObserver.observe(this.zoomElementRef.nativeElement));\n        } else {\n          console.error('ResizeObserver API is not supported by this browser.  See https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver for info on browser compatibility.');\n        }\n      }\n\n      if (this.isMobileDevice()) {\n        this.isMobile = true;\n        this.zone.runOutsideAngular(() => this.frameElementRef.nativeElement.addEventListener('touchstart', this.onTouchStart));\n      } else {\n        this.zone.runOutsideAngular(() => {\n          this.frameElementRef.nativeElement.addEventListener('mousedown', this.onMousedown);\n          this.frameElementRef.nativeElement.addEventListener('dblclick', this.onDblClick);\n          this.frameElementRef.nativeElement.addEventListener('wheel', event => this.animationFrameFunc(() => this.onMouseWheel(event)), {\n            passive: true\n          });\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      // console.log('PanZoomComponent: ngOnDestroy()');\n      if (this.isMobile) {\n        this.frameElementRef.nativeElement.removeEventListener('touchstart', this.onTouchStart);\n      } else {\n        this.frameElementRef.nativeElement.removeEventListener('mousedown', this.onMousedown);\n        this.frameElementRef.nativeElement.removeEventListener('wheel', event => this.animationFrameFunc(() => this.onMouseWheel(event)), {\n          passive: true\n        });\n        this.frameElementRef.nativeElement.removeEventListener('dblclick', this.onDblClick);\n      }\n\n      if (this.animationFrameFunc && this.animationId) {\n        window.cancelAnimationFrame(this.animationId);\n      }\n\n      if (this.resizeObserver) {\n        this.resizeObserver.disconnect();\n      }\n\n      switch (this.config.dragMouseButton) {\n        case 'middle':\n          this.dragMouseButton = 1;\n          this.zone.runOutsideAngular(() => this.frameElementRef.nativeElement.removeEventListener('auxclick', this.preventDefault));\n          break;\n\n        case 'right':\n          this.zone.runOutsideAngular(() => document.removeEventListener('contextmenu', this.preventDefault));\n          this.dragMouseButton = 2;\n          break;\n      }\n    }\n    /**\n     * Method will check if 'child' node element is a child of\n     * parent node with class 'className'\n     * @param className\n     * @param child\n     */\n\n\n    isParentElement(className, child) {\n      let node = child.parentNode;\n\n      while (node !== null) {\n        if (node.classList && node.classList.contains(className)) {\n          return true;\n        }\n\n        node = node.parentNode;\n      }\n\n      return false;\n    }\n\n    updateDOM() {\n      // console.log('PanZoomComponent: updateDOM()');\n      // Called by ngAfterViewInit() and animationTick()\n      // This function does not get called by freeZoom(), which operates independently of animationTick() and updateDOM().\n      if (this.animationParams) {\n        // we're running an animation sequence (but not freeZooming or panning with onMouseMove() )\n        this.model.zoomLevel = this.base.zoomLevel + this.animationParams.deltaZoomLevel * this.animationParams.progress; // calculate how far we need to zoom in or out for the current animationTick\n\n        const deltaTranslation = this.animationParams.panStepFunc(this.model.zoomLevel); // calculate how far to pan the view to based on our translated coordinates\n        // sync the model pan coordinates to our translated pan coordinates\n        // we do this by adding how far we want to move in each direction to our our existing base pan coordinates (where we started)\n\n        this.model.pan.x = this.base.pan.x + deltaTranslation.x;\n        this.model.pan.y = this.base.pan.y + deltaTranslation.y;\n\n        if (this.config.keepInBounds) {\n          const topLeftCornerView = this.getViewPosition({\n            x: 0,\n            y: 0\n          });\n          const bottomRightCornerView = this.getViewPosition({\n            x: this.contentWidth,\n            y: this.contentHeight\n          });\n\n          if (topLeftCornerView.x > 0) {\n            this.model.pan.x = 0;\n          }\n\n          if (topLeftCornerView.y > 0) {\n            this.model.pan.y = 0;\n          }\n\n          if (bottomRightCornerView.x < this.contentWidth) {\n            this.model.pan.x -= bottomRightCornerView.x - this.contentWidth;\n          }\n\n          if (bottomRightCornerView.y < this.contentHeight) {\n            this.model.pan.y -= bottomRightCornerView.y - this.contentHeight;\n          }\n        }\n      } ////////////////////////////////////////////////////\n      //////////////////// APPLY SCALING /////////////////\n      ////////////////////////////////////////////////////\n\n\n      if (this.animationParams || this.isFirstSync) {\n        const scale = this.getCssScale(this.model.zoomLevel);\n        const scaleString = `scale(${scale})`;\n        const zoomStyle = `transform-origin: 0 0; transform: ${scaleString};`;\n        this.zoomElementRef.nativeElement.setAttribute('style', zoomStyle);\n      } ////////////////////////////////////////////////////\n      //////////////// APPLY PAN ANIMATION ///////////////\n      ////////////////////////////////////////////////////\n\n\n      const translate3d = `translate3d(${this.model.pan.x}px, ${this.model.pan.y}px, 0)`;\n      this.panElementRef.nativeElement.style.transform = translate3d;\n    }\n\n    freeZoom(clickPoint, wheelDelta) {\n      // console.log('PanZoomComponent: freeZoom(): this.base:', this.base);\n      if (this.isDragging) {\n        // don't allow zooming if the mouse is down\n        return;\n      } // now handle interruption of an in-progress animation\n\n\n      if (this.animationParams) {\n        this.animationParams = undefined; // cancel an existing animation\n      }\n\n      if (this.panVelocity) {\n        this.dragFinishing = false;\n        this.panVelocity = undefined;\n      }\n\n      const currentPan = {\n        // the current model coordinates\n        x: this.model.pan.x,\n        y: this.model.pan.y\n      };\n      const currentScale = this.scale; // get the current CSS scale (scale0)\n\n      let newScale = this.scale + wheelDelta * this.config.freeMouseWheelFactor * this.scale; // takes either the minimum scale (furthest allowable zoomed out) or the calculated current scale, whichever is greater, unless calculated current scale exceeds maxScale (furthest allowable zoomed in), in which case maxScale is used\n\n      newScale = Math.max(this.minScale, Math.min(this.maxScale, newScale));\n      this.scale = newScale;\n      const targetPoint = {\n        // The target point to zoom to.  It must stay the same as the untranslated point\n        x: clickPoint.x - newScale / currentScale * (clickPoint.x - currentPan.x),\n        y: clickPoint.y - newScale / currentScale * (clickPoint.y - currentPan.y)\n      }; // Apply Pan & Scale\n\n      const translate3d = `translate3d(${targetPoint.x}px, ${targetPoint.y}px, 0)`;\n      this.panElementRef.nativeElement.style.transform = translate3d;\n      const scaleString = `scale(${this.scale})`;\n      let zoomStyle = `transform-origin: 0 0; transform: ${scaleString};`;\n\n      if (this.isChrome) {\n        if (this.willChangeNextFrame) {\n          zoomStyle += ` will-change: auto;`;\n        } else {\n          zoomStyle += ` will-change: transform;`;\n        }\n\n        this.willChangeNextFrame = !this.willChangeNextFrame;\n      } // apply zoom css\n\n\n      this.zoomElementRef.nativeElement.setAttribute('style', zoomStyle);\n      this.model.pan.x = targetPoint.x;\n      this.model.pan.y = targetPoint.y;\n      this.model.zoomLevel = this.getZoomLevel(this.scale);\n      this.config.modelChanged.next(this.model);\n      this.syncBaseToModel();\n    } ////////////////////////////////////////////////////\n    //////////////// HELPER FUNCTIONS //////////////////\n    ////////////////////////////////////////////////////\n\n\n    isMobileDevice() {\n      return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\n    }\n\n    syncBaseToModel() {\n      this.base.pan.x = this.model.pan.x;\n      this.base.pan.y = this.model.pan.y;\n      this.base.zoomLevel = this.model.zoomLevel;\n    }\n\n    length(vector2d) {\n      // console.log('PanZoomComponent: length()');\n      return Math.sqrt(vector2d.x * vector2d.x + vector2d.y * vector2d.y);\n    }\n\n    getCentrePoint() {\n      // console.log('PanZoomComponent: getCentrePoint()');\n      return {\n        x: this.frameElementRef.nativeElement.offsetWidth / 2,\n        y: this.frameElementRef.nativeElement.offsetHeight / 2\n      };\n    }\n\n    getCssScale(zoomLevel) {\n      // console.log('PanZoomComponent: getCssScale()');\n      return Math.pow(this.config.scalePerZoomLevel, zoomLevel - this.config.neutralZoomLevel);\n    }\n\n    getZoomLevel(cssScale) {\n      // console.log('PanZoomComponent: getZoomLevel()');\n      return Math.log10(cssScale) / Math.log10(this.config.scalePerZoomLevel) + this.config.neutralZoomLevel;\n    }\n\n    calcZoomToFit(rect) {\n      // console.log('PanZoomComponent: calcZoomToFit(): rect:', rect);\n      // let (W, H) denote the size of the viewport\n      // let (w, h) denote the size of the rectangle to zoom to\n      // then we must CSS scale by the min of W/w and H/h in order to just fit the rectangle\n      // returns the target left and top coordinates for the panElement and target zoomLevel\n      const viewportWidth = this.frameElementRef.nativeElement.offsetWidth;\n      const viewportHeight = this.frameElementRef.nativeElement.offsetHeight;\n      const targetWidth = rect.width;\n      const targetHeight = rect.height;\n      const cssScaleExact = Math.min(viewportWidth / targetWidth, viewportHeight / targetHeight);\n      const zoomLevelExact = this.getZoomLevel(cssScaleExact);\n      const zoomLevel = zoomLevelExact * this.config.zoomToFitZoomLevelFactor;\n      const cssScale = this.getCssScale(zoomLevel);\n      return {\n        zoomLevel: zoomLevel,\n        pan: {\n          x: -rect.x * cssScale + (viewportWidth - targetWidth * cssScale) / 2,\n          y: -rect.y * cssScale + (viewportHeight - targetHeight * cssScale) / 2\n        }\n      };\n    }\n\n    zoomToFitModel(target, duration = undefined) {\n      // console.log('PanZoomComponent: zoomToFitModel(): target:', target);\n      // target.pan.x is the panElement left style property\n      // target.pan.y is the panElement top style property\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    zoomToLevelAndPoint(level, clickPoint) {\n      // console.log('PanZoomComponent: zoomToLevelAndPoint(): level:', level);\n      // console.log('PanZoomComponent: zoomToLevelAndPoint(): clickPoint:', clickPoint);\n      this.changeZoomLevel(level, clickPoint);\n    }\n\n    zoomIn(zoomType = 'lastPoint') {\n      // console.log('PanZoomComponent: zoomIn()');\n      if (zoomType === 'lastPoint') {\n        this.changeZoomLevel(this.base.zoomLevel + this.config.zoomButtonIncrement, this.lastClickPoint);\n      } else if (zoomType === 'viewCenter') {\n        this.changeZoomLevel(this.base.zoomLevel + this.config.zoomButtonIncrement, this.getCentrePoint());\n      }\n    }\n\n    zoomOut(zoomType = 'lastPoint') {\n      // console.log('PanZoomComponent: zoomOut()');\n      if (zoomType === 'lastPoint') {\n        this.changeZoomLevel(this.base.zoomLevel - this.config.zoomButtonIncrement, this.lastClickPoint);\n      } else if (zoomType === 'viewCenter') {\n        this.changeZoomLevel(this.base.zoomLevel - this.config.zoomButtonIncrement, this.getCentrePoint());\n      }\n    }\n\n    startAnimation() {\n      this.lastTick = performance.now();\n      this.zone.runOutsideAngular(() => this.animationId = this.animationFrameFunc(this.animationTick));\n    }\n\n    getFrameElementOffset() {\n      const rect = this.frameElementRef.nativeElement.getBoundingClientRect();\n      return {\n        top: rect.top + window.scrollY,\n        left: rect.left + window.scrollX\n      };\n    }\n\n    onContentDimensionsChangeDetected(entries) {\n      // callback for ResizeObserver\n      this.contentHeight = entries[0].contentRect.height;\n      this.contentWidth = entries[0].contentRect.width;\n    } ////////////////////////////////////////////////////\n    /////////////////// API METHODS ////////////////////\n    ////////////////////////////////////////////////////\n\n\n    getViewPosition(modelPosition) {\n      // console.log('PanZoomComponent: getViewPosition()');\n      // p' = p * s + t\n      // viewPosition = modelPosition * scale + basePan\n      let scale, translation;\n\n      if (this.animationParams) {\n        scale = this.getCssScale(this.base.zoomLevel + this.animationParams.deltaZoomLevel * this.animationParams.progress);\n        let deltaTranslation = this.animationParams.panStepFunc(this.model.zoomLevel);\n        translation = {\n          x: this.base.pan.x + deltaTranslation.x,\n          y: this.base.pan.y + deltaTranslation.y\n        };\n      } else {\n        scale = this.getCssScale(this.base.zoomLevel);\n        translation = this.base.pan;\n      }\n\n      return {\n        x: modelPosition.x * scale + translation.x,\n        y: modelPosition.y * scale + translation.y\n      };\n    }\n\n    getModelPosition(viewPosition) {\n      // console.log('PanZoomComponent: getModelPosition()');\n      // p = (1/s)(p' - t)\n      const pmark = viewPosition;\n      const s = this.getCssScale(this.base.zoomLevel);\n      const t = this.base.pan;\n      return {\n        x: 1 / s * (pmark.x - t.x),\n        y: 1 / s * (pmark.y - t.y)\n      };\n    }\n\n    resetView() {\n      // console.log('PanZoomComponent: resetView()');\n      if (this.config.initialZoomToFit) {\n        this.zoomToFit(this.config.initialZoomToFit);\n      } else if (this.config.initialPanX !== undefined && this.config.initialPanY !== undefined && this.config.initialZoomLevel !== undefined) {\n        this.zoomToFitModel({\n          zoomLevel: this.config.initialZoomLevel,\n          pan: {\n            x: this.config.initialPanX,\n            y: this.config.initialPanY\n          }\n        });\n      } else {\n        console.error('PanZoomComponent: resetView() could not reset view as some vars were not set.  The culprits are either config.initialZoomLevel, config.initialPanX, or config.initialPanY.  Or just set panzoomConfig.initialZoomToFit');\n        console.log('config.initialZoomLevel: ' + this.config.initialZoomLevel);\n        console.log('config.initialPanX: ' + this.config.initialPanX);\n        console.log('config.initialPanY: ' + this.config.initialPanY);\n      }\n    }\n\n    zoomToFit(rectangle, duration) {\n      // console.log('PanZoomComponent: zoomToFit(): rectangle', rectangle);\n      // when a user clicks a zoom to fit button\n      // example rectangle: { \"x\": 0, \"y\": 100, \"width\": 100, \"height\": 100 }\n      const target = this.calcZoomToFit(rectangle); // target.pan.x is the panElement left style property\n      // target.pan.y is the panElement top style property\n\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    zoomInToPoint(clickPoint) {\n      // console.log('PanZoomComponent: zoomIn(): clickPoint:', clickPoint);\n      this.changeZoomLevel(this.base.zoomLevel + this.config.zoomButtonIncrement, clickPoint);\n    }\n\n    zoomOutFromPoint(clickPoint) {\n      // console.log('PanZoomComponent: zoomOut()');\n      this.changeZoomLevel(this.base.zoomLevel - this.config.zoomButtonIncrement, clickPoint);\n    }\n\n    panToPoint(point, duration) {\n      // console.log('PanZoomComponent: panToPoint(): point:', point);\n      // API call to animate the view so that the centre point of the view is at the\n      // point parameter coordinates, relative to the original, unzoomed\n      // content width and height\n      // example point: { \"x\": 0, \"y\": 0 } // makes the top-left corner of the content\n      // the centre of the view\n      const target = {\n        pan: {\n          x: this.frameWidth / 2 - point.x * this.scale,\n          y: this.frameHeight / 2 - point.y * this.scale\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    panToPointCurrentScale(point, duration) {\n      // console.log('PanZoomComponent: panToPoint(): point:', point);\n      // API call to animate the view so that the centre point of the view is at the\n      // point parameter coordinates, relative to the original, unzoomed\n      // content width and height\n      // example point: { \"x\": 0, \"y\": 0 } // makes the top-left corner of the content\n      // the centre of the view\n      const target = {\n        pan: {\n          x: this.frameWidth / 2 - point.x,\n          y: this.frameHeight / 2 - point.y\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    panDelta(delta, duration) {\n      // console.log('PanZoomComponent: panDelta(): delta:', delta);\n      // API call to pan the view left, right, up, or down, based on a number of pixels\n      // of the original, unzoomed content.\n      // Positive is right and down\n      // Negative is left and up\n      // example point: { \"x\": 100, \"y\": -50 } // moves the view right 50px and up 50px\n      const target = {\n        pan: {\n          x: this.base.pan.x - this.scale * delta.x,\n          y: this.base.pan.y - this.scale * delta.y\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    panDeltaAbsolute(delta, duration) {\n      // console.log('PanZoomComponent: panDeltaAbsolute(): delta:', delta);\n      // API call to pan the view left, right, up, or down, based on a number of pixels\n      // This method doesn't adjust for scale.  I'm not sure why you'd want this\n      // but have it here just in case someone needs it\n      // Positive is right and down\n      // Negative is left and up\n      // example point: { \"x\": 100, \"y\": -50 } // moves the view right 50px and up 50px\n      const target = {\n        pan: {\n          x: this.base.pan.x - delta.x,\n          y: this.base.pan.y - delta.y\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    panDeltaPercent(deltaPercent, duration) {\n      // console.log('PanZoomComponent: panDeltaPercent(): deltaPercent:', deltaPercent);\n      // API call to pan the view up, down, left, or right, based on a percentage\n      // of the original, unzoomed content width and height\n      // example point: { \"x\": 10, \"y\": -20 }\n      let deltaX = 0;\n      let deltaY = 0;\n\n      if (deltaPercent.x !== 0) {\n        deltaX = this.contentWidth * (deltaPercent.x / 100) * this.scale;\n      }\n\n      if (deltaPercent.y !== 0) {\n        deltaY = this.contentHeight * (deltaPercent.y / 100) * this.scale;\n      }\n\n      const target = {\n        pan: {\n          x: this.base.pan.x - deltaX,\n          y: this.base.pan.y - deltaY\n        },\n        zoomLevel: this.base.zoomLevel\n      }; // target.pan.x is the panElement left style property\n      // target.pan.y is the panElement top style property\n\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    centerContent(duration) {\n      this.panToPoint({\n        x: this.contentWidth / 2,\n        y: this.contentHeight / 2\n      }, duration);\n    }\n\n    centerX(duration) {\n      const target = {\n        pan: {\n          x: this.frameWidth / 2 - this.contentWidth / 2 * this.scale,\n          y: this.base.pan.y\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    centerY(duration) {\n      const target = {\n        pan: {\n          x: this.base.pan.x,\n          y: this.frameHeight / 2 - this.contentHeight / 2 * this.scale\n        },\n        zoomLevel: this.base.zoomLevel\n      };\n      this.model.isPanning = true;\n      this.animateToTarget(target, duration);\n    }\n\n    centerTopLeftCorner(duration) {\n      this.panToPoint({\n        x: 0,\n        y: 0\n      }, duration);\n    }\n\n    centerBottomLeftCorner(duration) {\n      this.panToPoint({\n        x: 0,\n        y: this.contentHeight\n      }, duration);\n    }\n\n    centerTopRightCorner(duration) {\n      this.panToPoint({\n        x: this.contentWidth,\n        y: 0\n      }, duration);\n    }\n\n    centerBottomRightCorner(duration) {\n      this.panToPoint({\n        x: this.contentWidth,\n        y: this.contentHeight\n      }, duration);\n    }\n\n    updateContentDimensions(width, height) {\n      if (height !== undefined) {\n        this.contentHeight = height;\n      }\n\n      if (width !== undefined) {\n        this.contentWidth = width;\n      }\n    }\n\n    detectContentDimensions() {\n      const zoomFrameStyle = getComputedStyle(this.zoomElementRef.nativeElement);\n      this.contentHeight = parseInt(zoomFrameStyle.getPropertyValue('height').split('px')[0]);\n      this.contentWidth = parseInt(zoomFrameStyle.getPropertyValue('width').split('px')[0]);\n    } ////////////////////////////////////////////////////////////////////////////////\n    ///////////////////////////// ANIMATION BUILDERS ///////////////////////////////\n    ////////////////////////////////////////////////////////////////////////////////\n\n\n    animateToTarget(targetModel, duration = undefined) {\n      // console.log('PanZoomComponent: animateToTarget()');\n      // what this function really does is take a target model, and then sets\n      // this.animationParams with the parameters for the whole animation,\n      // namely the delta zoomLevel\n      // it is the responsibility of the caller to kick off the animation with a call to animationFrameFunc()\n      if (this.animationParams) {\n        // make the user wait for existing animation to finish before clicking\n        return;\n      }\n\n      this.zoomLevelIsChanging = false;\n\n      if (this.base.zoomLevel !== targetModel.zoomLevel) {\n        this.zoomLevelIsChanging = true;\n      }\n\n      const deltaZoomLevel = targetModel.zoomLevel - this.base.zoomLevel; // deltaZoomLevel is the number of zoom levels we are changing here\n\n      const oldBase = {\n        // the current base coordinates\n        x: this.base.pan.x,\n        y: this.base.pan.y\n      };\n      this.model.pan.x = this.base.pan.x;\n      this.model.pan.y = this.base.pan.y;\n\n      const panStepFunc = zoomLevel => {\n        // this function gets called during every animation tick in updateDOM(), to calculate where to move the model pan coordinates to (i.e. the translation) for that tick, zoomLevel is ignored within animateToTarget()\n        const targetPoint = {\n          // The target point to zoom to for the current animation frame.  It must stay the same as the untranslated point\n          x: (oldBase.x - targetModel.pan.x) * this.animationParams.progress,\n          y: (oldBase.y - targetModel.pan.y) * this.animationParams.progress\n        };\n        return {\n          x: -targetPoint.x,\n          y: -targetPoint.y\n        };\n      }; // now set the parameters of our new animation\n\n\n      duration = duration ? duration * 1000 : this.config.zoomStepDuration * 1000;\n      this.animationParams = {\n        deltaZoomLevel: deltaZoomLevel,\n        panStepFunc: panStepFunc,\n        duration,\n        progress: 0.0\n      };\n      this.startAnimation();\n    }\n\n    changeZoomLevel(newZoomLevel, clickPoint) {\n      // console.log('PanZoomComponent: changeZoomLevel()');\n      if (this.animationParams) {\n        // let's let any current animation just finish\n        return;\n      }\n\n      this.zoomLevelIsChanging = true; // keep zoom level in bounds\n\n      newZoomLevel = Math.max(this.minimumAllowedZoomLevel, newZoomLevel);\n      newZoomLevel = Math.min(this.config.zoomLevels - 1, newZoomLevel); // console.log('newZoomLevel:', newZoomLevel);\n\n      const deltaZoomLevel = newZoomLevel - this.base.zoomLevel; // deltaZoomLevel is the number of zoom levels we are changing here\n\n      if (!deltaZoomLevel) {\n        // a deltaZoomLevel of zero means that we aren't changing zoom, because we're either zoomed all the way in or all the way out\n        return;\n      } //\n      // Let p be the vector to the clicked point in view coords and let p' be the same point in model coords. Let s be a scale factor\n      // and let t be a translation vector. Let the transformation be defined as:\n      //\n      //  p' = p * s + t\n      //\n      // And conversely:\n      //\n      //  p = (1/s)(p' - t)\n      //\n      // Now use subscription 0 to denote the value before transform and zoom and let 1 denote the value after transform. Scale\n      // changes from s0 to s1. Translation changes from t0 to t1. But keep p and p' fixed so that the view coordinate p' still\n      // corresponds to the model coordinate p. This can be expressed as an equation relying upon solely upon p', s0, s1, t0, and t1:\n      //\n      //  (1/s0)(p - t0) = (1/s1)(p - t1)\n      //\n      // Every variable but t1 is known, thus it is easily isolated to:\n      //\n      //  t1 = p' - (s1/s0)*(p' - t0)\n      //\n\n\n      const currentPan = {\n        // t0 - the current base coordinates\n        x: this.base.pan.x,\n        y: this.base.pan.y\n      };\n      const currentScale = this.scale; // s0 - get the current CSS scale (scale0)\n\n      const destPoint = clickPoint || this.getCentrePoint(); // pmark - the point we are aiming to zoom to (either the click point or the centre of the page)\n\n      const panStepFunc = zoomLevel => {\n        // this function gets called during every animation tick, to calculate where to move the model pan coordinates to (i.e. the translation) for that tick, where zoomLevel is calculated from the current zoomLevel + the target zoomLevel * the progress of the current animation\n        const targetScale = this.getCssScale(zoomLevel); // s1 - the scale to translate to for the current animation tick\n\n        const targetPoint = {\n          // t1 - The target point to pan to.  It must stay the same as the untranslated point\n          x: destPoint.x - targetScale / currentScale * (destPoint.x - currentPan.x),\n          y: destPoint.y - targetScale / currentScale * (destPoint.y - currentPan.y)\n        };\n        return {\n          // now return the difference between our initial click point and our translated (zoomed) click point\n          // these are not absolute coordinates - just how far to move them\n          x: targetPoint.x - currentPan.x,\n          y: targetPoint.y - currentPan.y\n        };\n      }; // now set the parameters of our new animation\n\n\n      this.animationParams = {\n        deltaZoomLevel: deltaZoomLevel,\n        panStepFunc: panStepFunc,\n        duration: this.config.zoomStepDuration * 1000,\n        progress: 0.0\n      };\n      this.startAnimation();\n    }\n\n  }\n\n  PanZoomComponent.Éµfac = function PanZoomComponent_Factory(t) {\n    return new (t || PanZoomComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.NgZone));\n  };\n\n  PanZoomComponent.Éµcmp = /*@__PURE__*/Éµngcc0.ÉµÉµdefineComponent({\n    type: PanZoomComponent,\n    selectors: [[\"pan-zoom\"]],\n    viewQuery: function PanZoomComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµviewQuery(_c0, 7);\n        Éµngcc0.ÉµÉµviewQuery(_c1, 7);\n        Éµngcc0.ÉµÉµviewQuery(_c2, 7);\n        Éµngcc0.ÉµÉµviewQuery(_c3, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.frameElementRef = _t.first);\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.panElementRef = _t.first);\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.zoomElementRef = _t.first);\n        Éµngcc0.ÉµÉµqueryRefresh(_t = Éµngcc0.ÉµÉµloadQuery()) && (ctx.panzoomOverlayRef = _t.first);\n      }\n    },\n    inputs: {\n      config: \"config\"\n    },\n    ngContentSelectors: _c4,\n    decls: 9,\n    vars: 0,\n    consts: [[1, \"pan-zoom-frame\"], [\"frameElement\", \"\"], [1, \"pan-element\"], [\"panElement\", \"\"], [1, \"zoom-element\"], [\"zoomElement\", \"\"], [1, \"pan-zoom-overlay\"], [\"panzoomOverlay\", \"\"]],\n    template: function PanZoomComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµprojectionDef();\n        Éµngcc0.ÉµÉµelementStart(0, \"div\", 0, 1);\n        Éµngcc0.ÉµÉµelementStart(2, \"div\", 2, 3);\n        Éµngcc0.ÉµÉµelementStart(4, \"div\", 4, 5);\n        Éµngcc0.ÉµÉµprojection(6);\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelementEnd();\n        Éµngcc0.ÉµÉµelement(7, \"div\", 6, 7);\n      }\n    },\n    styles: [\".pan-zoom-frame[_ngcontent-%COMP%]{position:relative;width:100%;height:100%;overflow:hidden}.pan-element[_ngcontent-%COMP%], .pan-zoom-overlay[_ngcontent-%COMP%]{position:absolute;left:0;top:0}.pan-zoom-overlay[_ngcontent-%COMP%]{display:none;right:0;bottom:0;opacity:0;pointer-events:none}\"]\n  });\n  return PanZoomComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxPanZoomModule = /*#__PURE__*/(() => {\n  class NgxPanZoomModule {}\n\n  NgxPanZoomModule.Éµfac = function NgxPanZoomModule_Factory(t) {\n    return new (t || NgxPanZoomModule)();\n  };\n\n  NgxPanZoomModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: NgxPanZoomModule\n  });\n  NgxPanZoomModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    providers: [],\n    imports: [[]]\n  });\n  return NgxPanZoomModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(NgxPanZoomModule, {\n    declarations: [PanZoomComponent],\n    exports: [PanZoomComponent]\n  });\n})();\n\nclass PanZoomConfig {\n  constructor(options) {\n    this.zoomLevels = 5;\n    this.neutralZoomLevel = 2;\n    this.scalePerZoomLevel = 2.0;\n    this.initialZoomLevel = this.neutralZoomLevel;\n    this.friction = 10.0;\n    this.haltSpeed = 100.0;\n    this.initialPanX = 0;\n    this.initialPanY = 0;\n    this.keepInBounds = false;\n    this.keepInBoundsDragPullback = 0.7;\n    this.keepInBoundsRestoreForce = 0.5;\n    this.panOnClickDrag = true;\n    this.dragMouseButton = 'left'; // left, middle, right\n\n    this.zoomButtonIncrement = 1.0;\n    this.zoomOnDoubleClick = true;\n    this.zoomOnMouseWheel = true;\n    this.invertMouseWheel = false;\n    this.zoomStepDuration = 0.2;\n    this.zoomToFitZoomLevelFactor = 0.95;\n    this.freeMouseWheel = true;\n    this.freeMouseWheelFactor = 0.08;\n    this.modelChanged = new BehaviorSubject({\n      isPanning: null,\n      zoomLevel: null,\n      pan: {\n        x: null,\n        y: null\n      }\n    });\n    this.api = new BehaviorSubject({\n      model: null,\n      config: null,\n      changeZoomLevel: null,\n      zoomIn: null,\n      zoomOut: null,\n      zoomToFit: null,\n      getViewPosition: null,\n      getModelPosition: null,\n      resetView: null,\n      panToPoint: null,\n      panDelta: null,\n      panDeltaPercent: null,\n      panDeltaAbsolute: null,\n      centerContent: null,\n      centerX: null,\n      centerY: null,\n      centerTopLeft: null,\n      centerTopRight: null,\n      centerBottomLeft: null,\n      centerBottomRight: null,\n      updateContentDimensions: null,\n      detectContentDimensions: null\n    });\n    this.acceleratePan = true;\n    this.dynamicContentDimensions = false;\n\n    if (options === undefined) {\n      return;\n    }\n\n    if ('zoomLevels' in options) {\n      this.zoomLevels = options.zoomLevels;\n    }\n\n    if ('neutralZoomLevel' in options) {\n      this.neutralZoomLevel = options.neutralZoomLevel;\n    }\n\n    if ('scalePerZoomLevel' in options) {\n      this.scalePerZoomLevel = options.scalePerZoomLevel;\n    }\n\n    if ('initialZoomLevel' in options) {\n      this.initialZoomLevel = options.initialZoomLevel;\n    }\n\n    if ('friction' in options) {\n      this.friction = options.friction;\n    }\n\n    if ('haltSpeed' in options) {\n      this.haltSpeed = options.haltSpeed;\n    }\n\n    if ('initialPanX' in options) {\n      this.initialPanX = options.initialPanX;\n    }\n\n    if ('initialPanY' in options) {\n      this.initialPanY = options.initialPanY;\n    }\n\n    if ('initialZoomToFit' in options) {\n      this.initialZoomToFit = options.initialZoomToFit;\n    }\n\n    if ('keepInBounds' in options) {\n      this.keepInBounds = options.keepInBounds;\n    }\n\n    if ('keepInBoundsDragPullback' in options) {\n      this.keepInBoundsDragPullback = options.keepInBoundsDragPullback;\n    }\n\n    if ('keepInBoundsRestoreForce' in options) {\n      this.keepInBoundsRestoreForce = options.keepInBoundsRestoreForce;\n    }\n\n    if ('panOnClickDrag' in options) {\n      this.panOnClickDrag = options.panOnClickDrag;\n    }\n\n    if ('dragMouseButton' in options) {\n      this.dragMouseButton = options.dragMouseButton;\n    }\n\n    if ('zoomButtonIncrement' in options) {\n      this.zoomButtonIncrement = options.zoomButtonIncrement;\n    }\n\n    if ('zoomOnDoubleClick' in options) {\n      this.zoomOnDoubleClick = options.zoomOnDoubleClick;\n    }\n\n    if ('zoomOnMouseWheel' in options) {\n      this.zoomOnMouseWheel = options.zoomOnMouseWheel;\n    }\n\n    if ('invertMouseWheel' in options) {\n      this.invertMouseWheel = options.invertMouseWheel;\n    }\n\n    if ('zoomStepDuration' in options) {\n      this.zoomStepDuration = options.zoomStepDuration;\n    }\n\n    if ('zoomToFitZoomLevelFactor' in options) {\n      this.zoomToFitZoomLevelFactor = options.zoomToFitZoomLevelFactor;\n    }\n\n    if ('freeMouseWheel' in options) {\n      this.freeMouseWheel = options.freeMouseWheel;\n    }\n\n    if ('freeMouseWheelFactor' in options) {\n      this.freeMouseWheelFactor = options.freeMouseWheelFactor;\n    }\n\n    if (this.keepInBounds && this.neutralZoomLevel !== 0) {\n      console.warn('You have set keepInBounds to true and neutralZoomLevel to ' + this.neutralZoomLevel + '. Be aware that the zoom level cannot go below ' + this.neutralZoomLevel);\n    }\n\n    if ('noDragFromElementClass' in options) {\n      this.noDragFromElementClass = options.noDragFromElementClass;\n    }\n\n    if ('acceleratePan' in options) {\n      this.acceleratePan = options.acceleratePan;\n    }\n\n    if ('dynamicContentDimensions' in options) {\n      this.dynamicContentDimensions = options.dynamicContentDimensions;\n    }\n  }\n\n}\n/*\n * Public API Surface of ngx-panzoom\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxPanZoomModule, PanZoomComponent, PanZoomConfig }; //# sourceMappingURL=ngx-panzoom.js.map","map":null,"metadata":{},"sourceType":"module"}