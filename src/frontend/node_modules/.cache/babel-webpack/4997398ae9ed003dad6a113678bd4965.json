{"ast":null,"code":"/// <reference path=\"../../../../node_modules/monaco-editor/monaco.d.ts\" />\nimport { Subject } from 'rxjs';\nimport { File } from '../models/file.model';\nimport { FileType } from '../enums/file-type.enum';\nimport { Originator } from '../memento/originator';\nimport { Caretaker } from '../memento/caretaker';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./file.service\";\nimport * as i2 from \"ngx-toastr\";\nexport let CodeService = /*#__PURE__*/(() => {\n  class CodeService {\n    constructor(fileService, toastr) {\n      this.fileService = fileService;\n      this.toastr = toastr;\n      this.currentFile = new Subject();\n      this.curFileObservable = this.currentFile.asObservable();\n      this.redoAction = false;\n      this.originator = new Originator(new File());\n      this.caretaker = new Caretaker(this.originator);\n      this.getFirstFile();\n    }\n\n    getFirstFile() {\n      const subscription = this.fileService.getFiles().subscribe({\n        next: files => {\n          if (files.length > 0) {\n            const firstConfig = files[0];\n\n            const firstConfigFile = files[0].content._files.filter(file => file.match(/.+\\.xml$/))[0];\n\n            const firstFile = this.fileService.getFileFromConfiguration(firstConfig.name, firstConfigFile);\n            firstFile.then(file => {\n              if (file) {\n                this.setCurrentFile({\n                  path: firstConfigFile,\n                  type: FileType.XML,\n                  data: file,\n                  configuration: firstConfig.name,\n                  saved: true\n                });\n              }\n            });\n            subscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n    undo() {\n      var _a, _b;\n\n      this.redoAction = true;\n      (_a = this.caretaker) === null || _a === void 0 ? void 0 : _a.undo();\n      return (_b = this.originator) === null || _b === void 0 ? void 0 : _b.getState();\n    }\n\n    redo() {\n      var _a, _b;\n\n      this.redoAction = true;\n      (_a = this.caretaker) === null || _a === void 0 ? void 0 : _a.redo();\n      return (_b = this.originator) === null || _b === void 0 ? void 0 : _b.getState();\n    }\n\n    save() {\n      var _a;\n\n      const currentFile = (_a = this.originator) === null || _a === void 0 ? void 0 : _a.getState();\n\n      if (currentFile && currentFile.configuration && currentFile.path && currentFile.data && !currentFile.saved) {\n        this.fileService.updateFileForConfiguration(currentFile.configuration, currentFile.path, currentFile.data).then(response => {\n          if (response) {\n            this.toastr.success(`The file ${currentFile.path} has been saved.`, 'File saved!');\n            currentFile.saved = true;\n            this.setCurrentFile(currentFile);\n          } else {\n            this.toastr.error(`The file ${currentFile.path} couldn't be saved.`, 'Error saving');\n          }\n        });\n      }\n    }\n\n    clearMementoHistory() {\n      var _a;\n\n      (_a = this.caretaker) === null || _a === void 0 ? void 0 : _a.clearMementoList();\n    }\n\n    setCurrentFile(file) {\n      var _a, _b, _c;\n\n      if (!this.redoAction) {\n        (_a = this.caretaker) === null || _a === void 0 ? void 0 : _a.clearRedoList();\n      }\n\n      this.redoAction = false;\n      (_b = this.originator) === null || _b === void 0 ? void 0 : _b.setState(file);\n      (_c = this.caretaker) === null || _c === void 0 ? void 0 : _c.save();\n      this.currentFile.next(file);\n    }\n\n    getCurrentFile() {\n      var _a;\n\n      return (_a = this.originator) === null || _a === void 0 ? void 0 : _a.getState();\n    }\n\n    switchCurrentFile(item) {\n      var _a;\n\n      const currentFile = (_a = this.originator) === null || _a === void 0 ? void 0 : _a.getState();\n\n      if (currentFile && item.configuration && item.path && (currentFile.path !== item.path || currentFile.configuration !== item.configuration)) {\n        this.fileService.getFileFromConfiguration(item.configuration, item.path).then(file => {\n          if (file) {\n            this.clearMementoHistory();\n            this.setCurrentFile({\n              path: item.path,\n              type: FileType.XML,\n              data: file,\n              saved: true,\n              configuration: item.configuration\n            });\n          }\n        }).catch(error => {\n          console.error(error);\n          this.toastr.error(error, `File can't be fetched`);\n        });\n      }\n    }\n\n  }\n\n  CodeService.ɵfac = function CodeService_Factory(t) {\n    return new (t || CodeService)(i0.ɵɵinject(i1.FileService), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  CodeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CodeService,\n    factory: CodeService.ɵfac,\n    providedIn: 'root'\n  });\n  return CodeService;\n})();","map":null,"metadata":{},"sourceType":"module"}