{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { PanZoomConfig } from 'ngx-panzoom';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/services/node-generator.service\";\nimport * as i2 from \"ngx-panzoom\";\nimport * as i3 from \"./canvas/canvas.component\";\nimport * as i4 from \"./palette/palette.component\";\nimport * as i5 from \"./options/options.component\";\nconst _c0 = [\"nodeContainer\"];\nexport let FlowComponent = /*#__PURE__*/(() => {\n  class FlowComponent {\n    constructor(nodeGeneratorService, renderer) {\n      this.nodeGeneratorService = nodeGeneratorService;\n      this.renderer = renderer;\n      this.nodes = [];\n      this.connections = [];\n      this.panZoomConfigOptions = {\n        zoomLevels: 10,\n        zoomStepDuration: 0.2,\n        freeMouseWheelFactor: 0.01,\n        zoomToFitZoomLevelFactor: 0.5,\n        dragMouseButton: 'left',\n        zoomOnDoubleClick: false\n      };\n      this.panzoomConfig = new PanZoomConfig(this.panZoomConfigOptions);\n    }\n\n    ngOnInit() {\n      console.log('hoi?');\n      this.modelChangedSubscription = this.panzoomConfig.modelChanged.subscribe(model => this.onModelChanged(model));\n      this.apiSubscription = this.panzoomConfig.api.subscribe(api => this.panZoomAPI = api);\n    }\n\n    onModelChanged(model) {\n      // console.log('change in model: ', model);\n      const offset = 500;\n\n      if (this.nodeContainerRef) {\n        if (model.pan.x >= 0) {\n          this.nodeGeneratorService.offX = offset; //this.panZoomAPI.resetView();\n\n          this.panZoomAPI.centerContent(10);\n          console.log('expand canvas: ', this.nodeContainerRef.nativeElement.getElementsByClassName('canvas')[0].offsetWidth);\n          const el = this.nodeContainerRef.nativeElement.getElementsByClassName('canvas')[0];\n          const elWidth = this.nodeContainerRef.nativeElement.getElementsByClassName('canvas')[0].offsetWidth;\n          this.renderer.setStyle(el, 'width', elWidth + offset + 'px');\n        } else if (model.pan.y >= 0) {\n          this.nodeGeneratorService.offY = offset;\n          this.nodeContainerRef.nativeElement.style.height = this.nodeContainerRef.nativeElement.style.height + offset + 'px';\n        }\n      }\n    }\n\n  }\n\n  FlowComponent.ɵfac = function FlowComponent_Factory(t) {\n    return new (t || FlowComponent)(i0.ɵɵdirectiveInject(i1.NodeGeneratorService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  FlowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FlowComponent,\n    selectors: [[\"app-flow\"]],\n    viewQuery: function FlowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeContainerRef = _t.first);\n      }\n    },\n    decls: 6,\n    vars: 3,\n    consts: [[1, \"flowContainer\"], [3, \"config\"], [3, \"nodes\", \"connections\"], [\"nodeContainer\", \"\"]],\n    template: function FlowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"pan-zoom\", 1);\n        i0.ɵɵelement(2, \"app-canvas\", 2, 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"app-palette\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"app-options\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"config\", ctx.panzoomConfig);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"nodes\", ctx.nodes)(\"connections\", ctx.connections);\n      }\n    },\n    directives: [i2.PanZoomComponent, i3.CanvasComponent, i4.PaletteComponent, i5.OptionsComponent],\n    styles: [\".flowContainer[_ngcontent-%COMP%]{display:grid;grid-template-columns:auto 256px;height:100%;background-color:var(--border-color)}\"]\n  });\n  return FlowComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}