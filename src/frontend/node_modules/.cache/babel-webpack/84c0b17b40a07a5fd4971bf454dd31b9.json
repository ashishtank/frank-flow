{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from '../../../environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let FileService = /*#__PURE__*/(() => {\n  class FileService {\n    constructor() {\n      this.BASE_PATH = environment.runnerUri + 'frank-flow/api/configurations';\n      this.configurationFiles = new BehaviorSubject([]);\n      this.fetchFiles();\n    }\n\n    fetchFiles() {\n      this.getConfigurationsWithFiles().then(configurationFiles => this.configurationFiles.next(configurationFiles));\n    }\n\n    getConfigurationsWithFiles() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const configurationFiles = [];\n        yield this.getConfigurations().then(configurations => __awaiter(this, void 0, void 0, function* () {\n          if (configurations) {\n            for (const configuration of configurations) {\n              yield this.getFilesForConfiguration(configuration).then(files => {\n                if (!files.error) {\n                  configurationFiles.push({\n                    name: configuration,\n                    content: files\n                  });\n                }\n              });\n            }\n          }\n        }));\n        return configurationFiles;\n      });\n    }\n\n    getConfigurations() {\n      return fetch(this.BASE_PATH).then(response => response.json()).catch(error => console.error(error));\n    }\n\n    getFilesForConfiguration(configuration) {\n      return fetch(`${this.BASE_PATH}/${configuration}`).then(response => response.json()).catch(error => console.error(error));\n    }\n\n    getFiles() {\n      return this.configurationFiles.asObservable();\n    }\n\n    getFileFromConfiguration(configuration, path) {\n      return fetch(`${this.BASE_PATH}/${configuration}/files/?path=${path}`).then(response => response.text()).catch(error => console.error(error));\n    }\n\n    updateFileForConfiguration(configuration, path, content) {\n      const formData = new FormData();\n      formData.append('file', content);\n      return fetch(`${this.BASE_PATH}/${configuration}/files/?path=${path}`, {\n        method: 'POST',\n        body: formData\n      }).then(response => response.ok).catch(error => console.error(error));\n    }\n\n  }\n\n  FileService.ɵfac = function FileService_Factory(t) {\n    return new (t || FileService)();\n  };\n\n  FileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FileService,\n    factory: FileService.ɵfac,\n    providedIn: 'root'\n  });\n  return FileService;\n})();","map":null,"metadata":{},"sourceType":"module"}