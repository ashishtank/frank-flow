{"ast":null,"code":"/*\r\njQWidgets v12.0.0 (2021-Feb)\r\nCopyright (c) 2011-2021 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.jqxWidget(\"jqxPanel\", \"\", {});\n  a.extend(a.jqx._jqxPanel.prototype, {\n    defineInstance: function () {\n      var b = {\n        width: null,\n        height: null,\n        disabled: false,\n        scrollBarSize: a.jqx.utilities.scrollBarSize,\n        sizeMode: \"fixed\",\n        autoUpdate: false,\n        autoUpdateInterval: 500,\n        touchMode: \"auto\",\n        horizontalScrollBarMax: null,\n        verticalScrollBarMax: null,\n        touchModeStyle: \"auto\",\n        rtl: false,\n        events: [\"layout\"]\n      };\n\n      if (this === a.jqx._jqxPanel.prototype) {\n        return b;\n      }\n\n      a.extend(true, this, b);\n      return b;\n    },\n    createInstance: function (b) {\n      this.render();\n    },\n    render: function () {\n      var b = this;\n\n      if (a.jqx.utilities.scrollBarSize != 15) {\n        this.scrollBarSize = a.jqx.utilities.scrollBarSize;\n      }\n\n      this.host.addClass(this.toThemeProperty(\"jqx-panel\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-widget\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      this.host.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n      var c = \"<div id='panelWrapper' style='overflow: hidden; width: 100%; height: 100%; background-color: transparent; -webkit-appearance: none; outline: none; align:left; border: 0px; padding: 0px; margin: 0px; left: 0px; top: 0px; valign:top; position: relative;'><div id='panelContent' style='-webkit-appearance: none; -moz-box-sizing: border-box; box-sizing: border-box; width: 100%; height: 100%; outline: none; border: none; padding: 0px; position: absolute; margin: 0px; align:left; valign:top; left: 0px; top: 0px;'></div><div id='verticalScrollBar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='horizontalScrollBar' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div><div id='bottomRight' style='align:left; valign:top; left: 0px; top: 0px; position: absolute;'></div></div>\";\n\n      if (!this.host.jqxButton) {\n        throw new Error(\"jqxPanel: Missing reference to jqxbuttons.js.\");\n      }\n\n      if (!this.host.jqxScrollBar) {\n        throw new Error(\"jqxPanel: Missing reference to jqxscrollbar.js.\");\n      }\n\n      var d = this.host.children();\n      this._rtl = false;\n\n      if (d.length > 0 && d.css(\"direction\") == \"rtl\") {\n        this.rtl = true;\n        this._rtl = true;\n      }\n\n      this.host.wrapInner(c);\n      var g = this.host.find(\"#verticalScrollBar\");\n      g[0].id = this.element.id + \"verticalScrollBar\";\n      this.vScrollBar = g.jqxScrollBar({\n        vertical: true,\n        rtl: this.rtl,\n        touchMode: this.touchMode,\n        theme: this.theme\n      });\n      var f = this.host.find(\"#horizontalScrollBar\");\n      f[0].id = this.element.id + \"horizontalScrollBar\";\n      this.hScrollBar = f.jqxScrollBar({\n        vertical: false,\n        rtl: this.rtl,\n        touchMode: this.touchMode,\n        theme: this.theme\n      });\n      this.content = this.host.find(\"#panelContent\");\n      this.wrapper = this.host.find(\"#panelWrapper\");\n      this.content.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      this.wrapper[0].id = this.wrapper[0].id + this.element.id;\n      this.content[0].id = this.content[0].id + this.element.id;\n      this.bottomRight = this.host.find(\"#bottomRight\").addClass(this.toThemeProperty(\"jqx-panel-bottomright\")).addClass(this.toThemeProperty(\"jqx-scrollbar-state-normal\"));\n      this.bottomRight[0].id = \"bottomRight\" + this.element.id;\n      this.vScrollBar.css(\"visibility\", \"inherit\");\n      this.hScrollBar.css(\"visibility\", \"inherit\");\n      this.vScrollInstance = a.data(this.vScrollBar[0], \"jqxScrollBar\").instance;\n      this.hScrollInstance = a.data(this.hScrollBar[0], \"jqxScrollBar\").instance;\n      var e = this;\n\n      this.propertyChangeMap.disabled = function (h, j, i, k) {\n        e.vScrollBar.jqxScrollBar({\n          disabled: e.disabled\n        });\n        e.hScrollBar.jqxScrollBar({\n          disabled: e.disabled\n        });\n      };\n\n      this.vScrollBar.jqxScrollBar({\n        disabled: this.disabled\n      });\n      this.hScrollBar.jqxScrollBar({\n        disabled: this.disabled\n      });\n\n      this._addHandlers();\n\n      if (this.width == null) {\n        this.width = this.content.width();\n      }\n\n      if (this.height == null) {\n        this.height = this.content.height();\n      }\n\n      this._arrange();\n\n      this.contentWidth = e.content[0].scrollWidth;\n      this.contentHeight = e.content[0].scrollHeight;\n\n      if (this.autoUpdate) {\n        e._autoUpdate();\n      }\n\n      this.propertyChangeMap.autoUpdate = function (h, j, i, k) {\n        if (e.autoUpdate) {\n          e._autoUpdate();\n        } else {\n          clearInterval(e.autoUpdateId);\n          e.autoUpdateId = null;\n        }\n      };\n\n      this.addHandler(a(window), \"unload\", function () {\n        if (e.autoUpdateId != null) {\n          clearInterval(e.autoUpdateId);\n          e.autoUpdateId = null;\n          e.destroy();\n        }\n      });\n\n      this._updateTouchScrolling();\n\n      this._render();\n    },\n    hiddenParent: function () {\n      return a.jqx.isHidden(this.host);\n    },\n    _updateTouchScrolling: function () {\n      var b = this;\n\n      if (this.touchMode == true) {\n        a.jqx.mobile.setMobileSimulator(this.element);\n      }\n\n      var c = this.isTouchDevice();\n\n      if (c) {\n        a.jqx.mobile.touchScroll(this.element, b.vScrollInstance.max, function (f, e) {\n          if (b.vScrollBar.css(\"visibility\") != \"hidden\" && e != null) {\n            var d = b.vScrollInstance.value;\n            b.vScrollInstance.setPosition(e);\n          }\n\n          if (b.hScrollBar.css(\"visibility\") != \"hidden\" && f != null) {\n            var d = b.hScrollInstance.value;\n            b.hScrollInstance.setPosition(f);\n          }\n        }, this.element.id, this.hScrollBar, this.vScrollBar);\n\n        this._arrange();\n      }\n\n      this.vScrollBar.jqxScrollBar({\n        touchMode: this.touchMode\n      });\n      this.hScrollBar.jqxScrollBar({\n        touchMode: this.touchMode\n      });\n    },\n    isTouchDevice: function () {\n      var b = a.jqx.mobile.isTouchDevice();\n\n      if (this.touchMode == true) {\n        b = true;\n      } else {\n        if (this.touchMode == false) {\n          b = false;\n        }\n      }\n\n      if (b && this.touchModeStyle != false) {\n        this.scrollBarSize = a.jqx.utilities.touchScrollBarSize;\n      }\n\n      return b;\n    },\n    append: function (b) {\n      if (b != null) {\n        this.content.append(b);\n\n        this._arrange();\n      }\n    },\n    setcontent: function (b) {\n      this.content[0].innerHTML = b;\n\n      this._arrange();\n\n      var c = this;\n      setTimeout(function () {\n        c._arrange();\n      }, 100);\n    },\n    prepend: function (b) {\n      if (b != null) {\n        this.content.prepend(b);\n\n        this._arrange();\n      }\n    },\n    clearcontent: function () {\n      this.content.text(\"\");\n      this.content.children().remove();\n\n      this._arrange();\n    },\n    remove: function (b) {\n      if (b != null) {\n        a(b).remove();\n\n        this._arrange();\n      }\n    },\n    _autoUpdate: function () {\n      var b = this;\n      this.autoUpdateId = setInterval(function () {\n        var d = b.content[0].scrollWidth;\n        var c = b.content[0].scrollHeight;\n        var e = false;\n\n        if (b.contentWidth != d) {\n          b.contentWidth = d;\n          e = true;\n        }\n\n        if (b.contentHeight != c) {\n          b.contentHeight = c;\n          e = true;\n        }\n\n        if (e) {\n          b._arrange();\n        }\n      }, this.autoUpdateInterval);\n    },\n    _addHandlers: function () {\n      var b = this;\n      this.addHandler(this.vScrollBar, \"valueChanged\", function (c) {\n        b._render(b);\n      });\n      this.addHandler(this.hScrollBar, \"valueChanged\", function (c) {\n        b._render(b);\n      });\n      this.addHandler(this.host, \"mousewheel\", function (c) {\n        b.wheel(c, b);\n      });\n      this.addHandler(this.wrapper, \"scroll\", function (c) {\n        if (b.wrapper[0].scrollTop != 0) {\n          b.wrapper[0].scrollTop = 0;\n        }\n\n        if (b.wrapper[0].scrollLeft != 0) {\n          b.wrapper[0].scrollLeft = 0;\n        }\n      });\n      this.addHandler(this.host, \"mouseleave\", function (c) {\n        b.focused = false;\n      });\n      this.addHandler(this.host, \"focus\", function (c) {\n        b.focused = true;\n      });\n      this.addHandler(this.host, \"blur\", function (c) {\n        b.focused = false;\n      });\n      this.addHandler(this.host, \"mouseenter\", function (c) {\n        b.focused = true;\n      });\n      a.jqx.utilities.resize(this.host, function () {\n        if (a.jqx.isHidden(b.host)) {\n          return;\n        }\n\n        b._arrange(false);\n      });\n    },\n    resize: function (c, b) {\n      this.width = c;\n      this.height = b;\n\n      this._arrange(false);\n    },\n    _removeHandlers: function () {\n      var b = this;\n      this.removeHandler(this.vScrollBar, \"valueChanged\");\n      this.removeHandler(this.hScrollBar, \"valueChanged\");\n      this.removeHandler(this.host, \"mousewheel\");\n      this.removeHandler(this.host, \"mouseleave\");\n      this.removeHandler(this.host, \"focus\");\n      this.removeHandler(this.host, \"blur\");\n      this.removeHandler(this.host, \"mouseenter\");\n      this.removeHandler(this.wrapper, \"scroll\");\n      this.removeHandler(a(window), \"resize.\" + this.element.id);\n    },\n    wheel: function (d, c) {\n      var e = 0;\n\n      if (d.originalEvent && a.jqx.browser.msie && d.originalEvent.wheelDelta) {\n        e = d.originalEvent.wheelDelta / 120;\n      }\n\n      if (!d) {\n        d = window.event;\n      }\n\n      if (d.wheelDelta) {\n        e = d.wheelDelta / 120;\n      } else {\n        if (d.detail) {\n          e = -d.detail / 3;\n        }\n      }\n\n      if (e) {\n        var b = c._handleDelta(e);\n\n        if (!b) {\n          if (d.preventDefault) {\n            d.preventDefault();\n          }\n        }\n\n        if (!b) {\n          return b;\n        } else {\n          return false;\n        }\n      }\n\n      if (d.preventDefault) {\n        d.preventDefault();\n      }\n\n      d.returnValue = false;\n    },\n    scrollDown: function () {\n      if (this.vScrollBar.css(\"visibility\") == \"hidden\") {\n        return false;\n      }\n\n      var b = this.vScrollInstance;\n\n      if (b.value + b.largestep <= b.max) {\n        b.setPosition(b.value + b.largestep);\n        return true;\n      } else {\n        if (b.value + b.largestep != b.max) {\n          b.setPosition(b.max);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    scrollUp: function () {\n      if (this.vScrollBar.css(\"visibility\") == \"hidden\") {\n        return false;\n      }\n\n      var b = this.vScrollInstance;\n\n      if (b.value - b.largestep >= b.min) {\n        b.setPosition(b.value - b.largestep);\n        return true;\n      } else {\n        if (b.value - b.largestep != b.min) {\n          b.setPosition(b.min);\n          return true;\n        }\n      }\n\n      return false;\n    },\n    _handleDelta: function (d) {\n      if (this.focused) {\n        var c = this.vScrollInstance.value;\n\n        if (d < 0) {\n          this.scrollDown();\n        } else {\n          this.scrollUp();\n        }\n\n        var b = this.vScrollInstance.value;\n\n        if (c != b) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    _render: function (c) {\n      if (c == undefined) {\n        c = this;\n      }\n\n      var b = c.vScrollInstance.value;\n      var d = c.hScrollInstance.value;\n\n      if (this.rtl) {\n        if (this.hScrollBar[0].style.visibility != \"hidden\") {\n          if (this._rtl == false) {\n            d = c.hScrollInstance.max - d;\n          } else {\n            d = -c.hScrollInstance.value;\n          }\n        }\n      }\n\n      c.content.css({\n        left: -d + \"px\",\n        top: -b + \"px\"\n      });\n    },\n    scrollTo: function (c, b) {\n      if (c == undefined || b == undefined) {\n        return;\n      }\n\n      this.vScrollInstance.setPosition(b);\n      this.hScrollInstance.setPosition(c);\n    },\n    getScrollHeight: function () {\n      return this.vScrollInstance.max;\n    },\n    getVScrollPosition: function () {\n      return this.vScrollInstance.value;\n    },\n    getScrollWidth: function () {\n      return this.hScrollInstance.max;\n    },\n    getHScrollPosition: function () {\n      return this.hScrollInstance.value;\n    },\n    _getScrollSize: function () {\n      var b = this.scrollBarSize;\n\n      if (isNaN(b)) {\n        b = parseInt(b);\n\n        if (isNaN(b)) {\n          b = \"17px\";\n        } else {\n          b = b + \"px\";\n        }\n      }\n\n      if (this.isTouchDevice()) {\n        b = a.jqx.utilities.touchScrollBarSize;\n      }\n\n      b = parseInt(b);\n      return b;\n    },\n    _getScrollArea: function () {\n      var c = 0;\n      this.content.css(\"margin-right\", \"0px\");\n      this.content.css(\"max-width\", \"9999999px\");\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 10) {\n        c = parseInt(this.content.css(\"left\"));\n        this.content.css(\"left\", 0);\n      }\n\n      this.content.css(\"overflow\", \"auto\");\n\n      if (this.rtl) {\n        this.content.css(\"direction\", \"rtl\");\n      }\n\n      var b = parseInt(this.content[0].scrollWidth);\n      a.each(this.content.children(), function () {\n        b = Math.max(b, this.scrollWidth);\n        b = Math.max(b, a(this).outerWidth());\n      });\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 10) {\n        this.content.css(\"left\", c);\n      }\n\n      var d = parseInt(this.content[0].scrollHeight);\n      this.content.css(\"overflow\", \"visible\");\n\n      if (a.jqx.browser.msie && a.jqx.browser.version < 9) {\n        var d = parseInt(this.content[0].scrollHeight);\n\n        switch (this.sizeMode) {\n          case \"wrap\":\n            var d = parseInt(this.content[0].scrollHeight);\n            var b = parseInt(this.content[0].scrollWidth);\n            break;\n\n          case \"horizontalWrap\":\n          case \"horizontalwrap\":\n            break;\n\n          case \"verticalWrap\":\n          case \"verticalwrap\":\n            var d = parseInt(this.content[0].scrollHeight);\n            break;\n        }\n      }\n\n      if (this.rtl) {\n        this.content.css(\"direction\", \"ltr\");\n      }\n\n      return {\n        width: b,\n        height: d\n      };\n    },\n    _arrange: function (h) {\n      if (h !== false) {\n        if (this.width != null) {\n          this.host.width(this.width);\n        }\n\n        if (this.height != null) {\n          this.host.height(this.height);\n        }\n      }\n\n      var b = this._getScrollSize();\n\n      var d = this.host.width();\n      var l = this.host.height();\n\n      var e = this._getScrollArea();\n\n      var c = e.width;\n      var k = e.height;\n      var i = k - parseInt(Math.round(this.host.height()));\n      var g = c - parseInt(Math.round(this.host.width()));\n\n      if (this.horizontalScrollBarMax != undefined) {\n        g = this.horizontalScrollBarMax;\n      }\n\n      if (this.verticalScrollBarMax != undefined) {\n        i = this.verticalScrollBarMax;\n      }\n\n      var j = function (o, p) {\n        var n = 5;\n\n        if (p > n) {\n          o.vScrollBar.jqxScrollBar({\n            max: p\n          });\n          o.vScrollBar.css(\"visibility\", \"inherit\");\n        } else {\n          o.vScrollBar.jqxScrollBar(\"setPosition\", 0);\n          o.vScrollBar.css(\"visibility\", \"hidden\");\n        }\n      };\n\n      var m = function (o, n) {\n        if (n > 0) {\n          if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n            if (n - 10 <= b) {\n              o.hScrollBar.css(\"visibility\", \"hidden\");\n              o.hScrollBar.jqxScrollBar(\"setPosition\", 0);\n            } else {\n              o.hScrollBar.jqxScrollBar({\n                max: n + 4\n              });\n              o.hScrollBar.css(\"visibility\", \"inherit\");\n            }\n          } else {\n            o.hScrollBar.jqxScrollBar({\n              max: n + 4\n            });\n            o.hScrollBar.css(\"visibility\", \"inherit\");\n          }\n        } else {\n          o.hScrollBar.css(\"visibility\", \"hidden\");\n          o.hScrollBar.jqxScrollBar(\"setPosition\", 0);\n        }\n      };\n\n      switch (this.sizeMode) {\n        case \"wrap\":\n          this.host.width(c);\n          this.host.height(k);\n          this.vScrollBar.css(\"visibility\", \"hidden\");\n          this.hScrollBar.css(\"visibility\", \"hidden\");\n          return;\n\n        case \"horizontalWrap\":\n        case \"horizontalwrap\":\n          this.host.width(c);\n          this.hScrollBar.css(\"visibility\", \"hidden\");\n          j(this, i);\n\n          this._arrangeScrollbars(b, c, l);\n\n          return;\n\n        case \"verticalWrap\":\n        case \"verticalwrap\":\n          this.host.height(k);\n          this.vScrollBar.css(\"visibility\", \"hidden\");\n          m(this, g);\n\n          this._arrangeScrollbars(b, d, l);\n\n          return;\n      }\n\n      j(this, i);\n      var f = 2;\n\n      if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n        if (this.horizontalScrollBarMax == undefined) {\n          if (!this.isTouchDevice() && g > 0 || g > 0) {\n            g += b + f;\n          }\n        }\n      }\n\n      m(this, g);\n\n      if (this.hScrollBar.css(\"visibility\") != \"hidden\") {\n        this.vScrollBar.jqxScrollBar({\n          max: i + b + f\n        });\n      }\n\n      this._arrangeScrollbars(b, d, l);\n    },\n    _arrangeScrollbars: function (b, d, j) {\n      var i = this.vScrollBar[0].style.visibility != \"hidden\";\n      var f = this.hScrollBar[0].style.visibility != \"hidden\";\n      var h = 2;\n      var g = 2;\n      this.hScrollBar.height(b);\n      this.hScrollBar.css({\n        top: j - b - h - g + \"px\",\n        left: \"0px\"\n      });\n      this.hScrollBar.width(d - h + \"px\");\n      this.vScrollBar.width(b);\n      this.vScrollBar.height(parseInt(j) - h + \"px\");\n      this.vScrollBar.css({\n        left: parseInt(d) - parseInt(b) - h - g + \"px\",\n        top: \"0px\"\n      });\n\n      if (this.rtl) {\n        this.vScrollBar.css({\n          left: \"0px\"\n        });\n        var c = i ? parseInt(b) + \"px\" : 0;\n\n        if (this.content.children().css(\"direction\") != \"rtl\") {\n          var e = false;\n\n          if (a.jqx.browser.msie && a.jqx.browser.version < 8) {\n            e = true;\n          }\n\n          if (!e) {\n            this.content.css(\"padding-left\", c);\n          }\n        }\n      } else {\n        if (this.vScrollBar.css(\"visibility\") != \"hidden\") {\n          this.content.css(\"max-width\", this.host.width() - this.vScrollBar.outerWidth());\n        }\n      }\n\n      if (this.vScrollBar.css(\"visibility\") != \"hidden\" && this.hScrollBar.css(\"visibility\") != \"hidden\") {\n        this.bottomRight.css(\"visibility\", \"inherit\");\n        this.bottomRight.css({\n          left: 1 + parseInt(this.vScrollBar.css(\"left\")),\n          top: 1 + parseInt(this.hScrollBar.css(\"top\"))\n        });\n        this.bottomRight.width(parseInt(b) + 3);\n        this.bottomRight.height(parseInt(b) + 3);\n\n        if (this.rtl) {\n          this.bottomRight.css({\n            left: \"0px\"\n          });\n          this.hScrollBar.css({\n            left: b + g + \"px\"\n          });\n        }\n\n        this.hScrollBar.width(d - 1 * b - h - g + \"px\");\n        this.vScrollBar.height(parseInt(j) - h - b - g + \"px\");\n      } else {\n        this.bottomRight.css(\"visibility\", \"hidden\");\n      }\n\n      this.hScrollInstance.refresh();\n      this.vScrollInstance.refresh();\n    },\n    destroy: function () {\n      clearInterval(this.autoUpdateId);\n      this.autoUpdateId = null;\n      this.autoUpdate = false;\n      a.jqx.utilities.resize(this.host, null, true);\n\n      this._removeHandlers();\n\n      this.removeHandler(a(window), \"unload\");\n      this.vScrollBar.jqxScrollBar(\"destroy\");\n      this.hScrollBar.jqxScrollBar(\"destroy\");\n      this.host.remove();\n    },\n    _raiseevent: function (g, d, f) {\n      if (this.isInitialized != undefined && this.isInitialized == true) {\n        var c = this.events[g];\n        var e = new a.Event(c);\n        e.previousValue = d;\n        e.currentValue = f;\n        e.owner = this;\n        var b = this.host.trigger(e);\n        return b;\n      }\n    },\n    beginUpdateLayout: function () {\n      this.updating = true;\n    },\n    resumeUpdateLayout: function () {\n      this.updating = false;\n      this.vScrollInstance.value = 0;\n      this.hScrollInstance.value = 0;\n\n      this._arrange();\n\n      this._render();\n    },\n    propertyChangedHandler: function (c, d, b, e) {\n      if (!c.isInitialized) {\n        return;\n      }\n\n      if (d == \"rtl\") {\n        this.vScrollBar.jqxScrollBar({\n          rtl: e\n        });\n        this.hScrollBar.jqxScrollBar({\n          rtl: e\n        });\n\n        c._arrange();\n      }\n\n      if (!c.updating) {\n        if (d == \"scrollBarSize\" || d == \"width\" || d == \"height\") {\n          if (b != e) {\n            c._arrange();\n          }\n        }\n      }\n\n      if (d == \"touchMode\") {\n        if (e != \"auto\") {\n          c._updateTouchScrolling();\n        }\n      }\n\n      if (d == \"theme\") {\n        c.host.removeClass();\n        c.host.addClass(this.toThemeProperty(\"jqx-panel\"));\n        c.host.addClass(this.toThemeProperty(\"jqx-widget\"));\n        c.host.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n        c.host.addClass(this.toThemeProperty(\"jqx-rc-all\"));\n        c.vScrollBar.jqxScrollBar({\n          theme: this.theme\n        });\n        c.hScrollBar.jqxScrollBar({\n          theme: this.theme\n        });\n        c.bottomRight.removeClass();\n        c.bottomRight.addClass(this.toThemeProperty(\"jqx-panel-bottomright\"));\n        c.bottomRight.addClass(this.toThemeProperty(\"jqx-scrollbar-state-normal\"));\n        c.content.removeClass();\n        c.content.addClass(this.toThemeProperty(\"jqx-widget-content\"));\n      }\n    },\n    invalidate: function () {\n      if (a.jqx.isHidden(this.host)) {\n        return;\n      }\n\n      this.refresh();\n    },\n    refresh: function (b) {\n      this._arrange();\n    }\n  });\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}