{"ast":null,"code":"import '../jqwidgets/jqxcore';\nimport '../jqwidgets/jqxdata';\nimport '../jqwidgets/jqxbuttons';\nimport '../jqwidgets/jqxscrollbar';\nimport '../jqwidgets/jqxpanel';\nimport '../jqwidgets/jqxdragdrop';\nimport '../jqwidgets/jqxtree';\nimport '../jqwidgets/jqxcheckbox';\nimport { __decorate, __metadata } from 'tslib';\nimport { EventEmitter, ElementRef, Input, Output, Component, NgModule } from '@angular/core'; /// <reference path=\"../../jqwidgets.d.ts\" />\n\nimport * as Éµngcc0 from '@angular/core';\nconst _c0 = [\"*\"];\nlet jqxTreeComponent = class jqxTreeComponent {\n  constructor(containerElement) {\n    this.autoCreate = true;\n    this.properties = ['animationShowDuration', 'animationHideDuration', 'allowDrag', 'allowDrop', 'checkboxes', 'dragStart', 'dragEnd', 'disabled', 'easing', 'enableHover', 'height', 'hasThreeStates', 'incrementalSearch', 'keyboardNavigation', 'rtl', 'source', 'toggleIndicatorSize', 'toggleMode', 'theme', 'width']; // jqxTreeComponent events\n\n    this.onAdded = new EventEmitter();\n    this.onCheckChange = new EventEmitter();\n    this.onCollapse = new EventEmitter();\n    this.onDragStart = new EventEmitter();\n    this.onDragEnd = new EventEmitter();\n    this.onExpand = new EventEmitter();\n    this.onItemClick = new EventEmitter();\n    this.onRemoved = new EventEmitter();\n    this.onSelect = new EventEmitter();\n    this.elementRef = containerElement;\n  }\n\n  ngOnInit() {\n    if (this.autoCreate) {\n      this.createComponent();\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (this.host) {\n      for (let i = 0; i < this.properties.length; i++) {\n        let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\n        let areEqual = false;\n\n        if (this[attrName] !== undefined) {\n          if (typeof this[attrName] === 'object') {\n            if (this[attrName] instanceof Array) {\n              areEqual = this.arraysEqual(this[attrName], this.host.jqxTree(this.properties[i]));\n            }\n\n            if (areEqual) {\n              return false;\n            }\n\n            this.host.jqxTree(this.properties[i], this[attrName]);\n            continue;\n          }\n\n          if (this[attrName] !== this.host.jqxTree(this.properties[i])) {\n            this.host.jqxTree(this.properties[i], this[attrName]);\n          }\n        }\n      }\n    }\n  }\n\n  arraysEqual(attrValue, hostValue) {\n    if (attrValue && !hostValue || !attrValue && hostValue) {\n      return false;\n    }\n\n    if (attrValue.length != hostValue.length) {\n      return false;\n    }\n\n    for (let i = 0; i < attrValue.length; i++) {\n      if (attrValue[i] !== hostValue[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  manageAttributes() {\n    let options = {};\n\n    for (let i = 0; i < this.properties.length; i++) {\n      let attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);\n\n      if (this[attrName] !== undefined) {\n        options[this.properties[i]] = this[attrName];\n      }\n    }\n\n    return options;\n  }\n\n  moveClasses(parentEl, childEl) {\n    let classes = parentEl.classList;\n\n    if (classes.length > 0) {\n      childEl.classList.add(...classes);\n    }\n\n    parentEl.className = '';\n  }\n\n  moveStyles(parentEl, childEl) {\n    let style = parentEl.style.cssText;\n    childEl.style.cssText = style;\n    parentEl.style.cssText = '';\n  }\n\n  createComponent(options) {\n    if (this.host) {\n      return;\n    }\n\n    if (options) {\n      JQXLite.extend(options, this.manageAttributes());\n    } else {\n      options = this.manageAttributes();\n    }\n\n    this.host = JQXLite(this.elementRef.nativeElement.firstChild);\n    this.moveClasses(this.elementRef.nativeElement, this.host[0]);\n    this.moveStyles(this.elementRef.nativeElement, this.host[0]);\n\n    this.__wireEvents__();\n\n    this.widgetObject = jqwidgets.createInstance(this.host, 'jqxTree', options);\n  }\n\n  createWidget(options) {\n    this.createComponent(options);\n  }\n\n  __updateRect__() {\n    if (this.host) this.host.css({\n      width: this.attrWidth,\n      height: this.attrHeight\n    });\n  }\n\n  setOptions(options) {\n    this.host.jqxTree('setOptions', options);\n  } // jqxTreeComponent properties\n\n\n  animationShowDuration(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('animationShowDuration', arg);\n    } else {\n      return this.host.jqxTree('animationShowDuration');\n    }\n  }\n\n  animationHideDuration(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('animationHideDuration', arg);\n    } else {\n      return this.host.jqxTree('animationHideDuration');\n    }\n  }\n\n  allowDrag(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('allowDrag', arg);\n    } else {\n      return this.host.jqxTree('allowDrag');\n    }\n  }\n\n  allowDrop(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('allowDrop', arg);\n    } else {\n      return this.host.jqxTree('allowDrop');\n    }\n  }\n\n  checkboxes(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('checkboxes', arg);\n    } else {\n      return this.host.jqxTree('checkboxes');\n    }\n  }\n\n  dragStart(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('dragStart', arg);\n    } else {\n      return this.host.jqxTree('dragStart');\n    }\n  }\n\n  dragEnd(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('dragEnd', arg);\n    } else {\n      return this.host.jqxTree('dragEnd');\n    }\n  }\n\n  disabled(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('disabled', arg);\n    } else {\n      return this.host.jqxTree('disabled');\n    }\n  }\n\n  easing(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('easing', arg);\n    } else {\n      return this.host.jqxTree('easing');\n    }\n  }\n\n  enableHover(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('enableHover', arg);\n    } else {\n      return this.host.jqxTree('enableHover');\n    }\n  }\n\n  height(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('height', arg);\n    } else {\n      return this.host.jqxTree('height');\n    }\n  }\n\n  hasThreeStates(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('hasThreeStates', arg);\n    } else {\n      return this.host.jqxTree('hasThreeStates');\n    }\n  }\n\n  incrementalSearch(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('incrementalSearch', arg);\n    } else {\n      return this.host.jqxTree('incrementalSearch');\n    }\n  }\n\n  keyboardNavigation(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('keyboardNavigation', arg);\n    } else {\n      return this.host.jqxTree('keyboardNavigation');\n    }\n  }\n\n  rtl(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('rtl', arg);\n    } else {\n      return this.host.jqxTree('rtl');\n    }\n  }\n\n  source(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('source', arg);\n    } else {\n      return this.host.jqxTree('source');\n    }\n  }\n\n  toggleIndicatorSize(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('toggleIndicatorSize', arg);\n    } else {\n      return this.host.jqxTree('toggleIndicatorSize');\n    }\n  }\n\n  toggleMode(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('toggleMode', arg);\n    } else {\n      return this.host.jqxTree('toggleMode');\n    }\n  }\n\n  theme(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('theme', arg);\n    } else {\n      return this.host.jqxTree('theme');\n    }\n  }\n\n  width(arg) {\n    if (arg !== undefined) {\n      this.host.jqxTree('width', arg);\n    } else {\n      return this.host.jqxTree('width');\n    }\n  } // jqxTreeComponent functions\n\n\n  addBefore(item, id) {\n    this.host.jqxTree('addBefore', item, id);\n  }\n\n  addAfter(item, id) {\n    this.host.jqxTree('addAfter', item, id);\n  }\n\n  addTo(item, id) {\n    this.host.jqxTree('addTo', item, id);\n  }\n\n  clear() {\n    this.host.jqxTree('clear');\n  }\n\n  checkAll() {\n    this.host.jqxTree('checkAll');\n  }\n\n  checkItem(item, checked) {\n    this.host.jqxTree('checkItem', item, checked);\n  }\n\n  collapseAll() {\n    this.host.jqxTree('collapseAll');\n  }\n\n  collapseItem(item) {\n    this.host.jqxTree('collapseItem', item);\n  }\n\n  destroy() {\n    this.host.jqxTree('destroy');\n  }\n\n  disableItem(item) {\n    this.host.jqxTree('disableItem', item);\n  }\n\n  ensureVisible(item) {\n    this.host.jqxTree('ensureVisible', item);\n  }\n\n  enableItem(item) {\n    this.host.jqxTree('enableItem', item);\n  }\n\n  enableAll() {\n    this.host.jqxTree('enableAll');\n  }\n\n  expandAll() {\n    this.host.jqxTree('expandAll');\n  }\n\n  expandItem(item) {\n    this.host.jqxTree('expandItem', item);\n  }\n\n  focus() {\n    this.host.jqxTree('focus');\n  }\n\n  getCheckedItems() {\n    return this.host.jqxTree('getCheckedItems');\n  }\n\n  getUncheckedItems() {\n    return this.host.jqxTree('getUncheckedItems');\n  }\n\n  getItems() {\n    return this.host.jqxTree('getItems');\n  }\n\n  getItem(element) {\n    return this.host.jqxTree('getItem', element);\n  }\n\n  getSelectedItem() {\n    return this.host.jqxTree('getSelectedItem');\n  }\n\n  getPrevItem(item) {\n    return this.host.jqxTree('getPrevItem', item);\n  }\n\n  getNextItem(item) {\n    return this.host.jqxTree('getNextItem', item);\n  }\n\n  hitTest(left, top) {\n    return this.host.jqxTree('hitTest', left, top);\n  }\n\n  removeItem(item) {\n    this.host.jqxTree('removeItem', item);\n  }\n\n  render() {\n    this.host.jqxTree('render');\n  }\n\n  refresh() {\n    this.host.jqxTree('refresh');\n  }\n\n  selectItem(item) {\n    this.host.jqxTree('selectItem', item);\n  }\n\n  uncheckAll() {\n    this.host.jqxTree('uncheckAll');\n  }\n\n  uncheckItem(item) {\n    this.host.jqxTree('uncheckItem', item);\n  }\n\n  updateItem(item, newItem) {\n    this.host.jqxTree('updateItem', item, newItem);\n  }\n\n  val(value) {\n    if (value !== undefined) {\n      return this.host.jqxTree('val', value);\n    } else {\n      return this.host.jqxTree('val');\n    }\n  }\n\n  __wireEvents__() {\n    this.host.on('added', eventData => {\n      this.onAdded.emit(eventData);\n    });\n    this.host.on('checkChange', eventData => {\n      this.onCheckChange.emit(eventData);\n    });\n    this.host.on('collapse', eventData => {\n      this.onCollapse.emit(eventData);\n    });\n    this.host.on('dragStart', eventData => {\n      this.onDragStart.emit(eventData);\n    });\n    this.host.on('dragEnd', eventData => {\n      this.onDragEnd.emit(eventData);\n    });\n    this.host.on('expand', eventData => {\n      this.onExpand.emit(eventData);\n    });\n    this.host.on('itemClick', eventData => {\n      this.onItemClick.emit(eventData);\n    });\n    this.host.on('removed', eventData => {\n      this.onRemoved.emit(eventData);\n    });\n    this.host.on('select', eventData => {\n      this.onSelect.emit(eventData);\n    });\n  }\n\n};\n\njqxTreeComponent.Éµfac = function jqxTreeComponent_Factory(t) {\n  return new (t || jqxTreeComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n};\n\njqxTreeComponent.Éµcmp = /*@__PURE__*/Éµngcc0.ÉµÉµdefineComponent({\n  type: jqxTreeComponent,\n  selectors: [[\"jqxTree\"]],\n  inputs: {\n    autoCreate: [\"auto-create\", \"autoCreate\"],\n    attrAnimationShowDuration: [\"animationShowDuration\", \"attrAnimationShowDuration\"],\n    attrAnimationHideDuration: [\"animationHideDuration\", \"attrAnimationHideDuration\"],\n    attrAllowDrag: [\"allowDrag\", \"attrAllowDrag\"],\n    attrAllowDrop: [\"allowDrop\", \"attrAllowDrop\"],\n    attrCheckboxes: [\"checkboxes\", \"attrCheckboxes\"],\n    attrDragStart: [\"dragStart\", \"attrDragStart\"],\n    attrDragEnd: [\"dragEnd\", \"attrDragEnd\"],\n    attrDisabled: [\"disabled\", \"attrDisabled\"],\n    attrEasing: [\"easing\", \"attrEasing\"],\n    attrEnableHover: [\"enableHover\", \"attrEnableHover\"],\n    attrHasThreeStates: [\"hasThreeStates\", \"attrHasThreeStates\"],\n    attrIncrementalSearch: [\"incrementalSearch\", \"attrIncrementalSearch\"],\n    attrKeyboardNavigation: [\"keyboardNavigation\", \"attrKeyboardNavigation\"],\n    attrRtl: [\"rtl\", \"attrRtl\"],\n    attrSource: [\"source\", \"attrSource\"],\n    attrToggleIndicatorSize: [\"toggleIndicatorSize\", \"attrToggleIndicatorSize\"],\n    attrToggleMode: [\"toggleMode\", \"attrToggleMode\"],\n    attrTheme: [\"theme\", \"attrTheme\"],\n    attrWidth: [\"width\", \"attrWidth\"],\n    attrHeight: [\"height\", \"attrHeight\"]\n  },\n  outputs: {\n    onAdded: \"onAdded\",\n    onCheckChange: \"onCheckChange\",\n    onCollapse: \"onCollapse\",\n    onDragStart: \"onDragStart\",\n    onDragEnd: \"onDragEnd\",\n    onExpand: \"onExpand\",\n    onItemClick: \"onItemClick\",\n    onRemoved: \"onRemoved\",\n    onSelect: \"onSelect\"\n  },\n  features: [Éµngcc0.ÉµÉµNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  template: function jqxTreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      Éµngcc0.ÉµÉµprojectionDef();\n      Éµngcc0.ÉµÉµelementStart(0, \"div\");\n      Éµngcc0.ÉµÉµprojection(1);\n      Éµngcc0.ÉµÉµelementEnd();\n    }\n  },\n  encapsulation: 2\n}); //jqxTreeComponent\n\njqxTreeComponent.ctorParameters = () => [{\n  type: ElementRef\n}];\n\n__decorate([Input('animationShowDuration'), __metadata(\"design:type\", Number)], jqxTreeComponent.prototype, \"attrAnimationShowDuration\", void 0);\n\n__decorate([Input('animationHideDuration'), __metadata(\"design:type\", Number)], jqxTreeComponent.prototype, \"attrAnimationHideDuration\", void 0);\n\n__decorate([Input('allowDrag'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrAllowDrag\", void 0);\n\n__decorate([Input('allowDrop'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrAllowDrop\", void 0);\n\n__decorate([Input('checkboxes'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrCheckboxes\", void 0);\n\n__decorate([Input('dragStart'), __metadata(\"design:type\", Function)], jqxTreeComponent.prototype, \"attrDragStart\", void 0);\n\n__decorate([Input('dragEnd'), __metadata(\"design:type\", Function)], jqxTreeComponent.prototype, \"attrDragEnd\", void 0);\n\n__decorate([Input('disabled'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrDisabled\", void 0);\n\n__decorate([Input('easing'), __metadata(\"design:type\", String)], jqxTreeComponent.prototype, \"attrEasing\", void 0);\n\n__decorate([Input('enableHover'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrEnableHover\", void 0);\n\n__decorate([Input('hasThreeStates'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrHasThreeStates\", void 0);\n\n__decorate([Input('incrementalSearch'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrIncrementalSearch\", void 0);\n\n__decorate([Input('keyboardNavigation'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrKeyboardNavigation\", void 0);\n\n__decorate([Input('rtl'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"attrRtl\", void 0);\n\n__decorate([Input('source'), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"attrSource\", void 0);\n\n__decorate([Input('toggleIndicatorSize'), __metadata(\"design:type\", Number)], jqxTreeComponent.prototype, \"attrToggleIndicatorSize\", void 0);\n\n__decorate([Input('toggleMode'), __metadata(\"design:type\", String)], jqxTreeComponent.prototype, \"attrToggleMode\", void 0);\n\n__decorate([Input('theme'), __metadata(\"design:type\", String)], jqxTreeComponent.prototype, \"attrTheme\", void 0);\n\n__decorate([Input('width'), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"attrWidth\", void 0);\n\n__decorate([Input('height'), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"attrHeight\", void 0);\n\n__decorate([Input('auto-create'), __metadata(\"design:type\", Boolean)], jqxTreeComponent.prototype, \"autoCreate\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onAdded\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onCheckChange\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onCollapse\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onDragStart\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onDragEnd\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onExpand\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onItemClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onRemoved\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], jqxTreeComponent.prototype, \"onSelect\", void 0);\n\njqxTreeComponent = __decorate([__metadata(\"design:paramtypes\", [ElementRef])], jqxTreeComponent);\nlet jqxTreeModule = class jqxTreeModule {};\n\njqxTreeModule.Éµfac = function jqxTreeModule_Factory(t) {\n  return new (t || jqxTreeModule)();\n};\n\njqxTreeModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n  type: jqxTreeModule\n});\njqxTreeModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(jqxTreeModule, {\n    declarations: [jqxTreeComponent],\n    exports: [jqxTreeComponent]\n  });\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { jqxTreeComponent, jqxTreeModule }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianF3aWRnZXRzLW5nLWpxeHRyZWUuanMiLCJzb3VyY2VzIjpbImpxd2lkZ2V0cy1uZy1qcXh0cmVlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7NkJBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFLRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29MQU9rQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjb3JlJztcbmltcG9ydCAnLi4vanF3aWRnZXRzL2pxeGRhdGEnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4YnV0dG9ucyc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhzY3JvbGxiYXInO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4cGFuZWwnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4ZHJhZ2Ryb3AnO1xuaW1wb3J0ICcuLi9qcXdpZGdldHMvanF4dHJlZSc7XG5pbXBvcnQgJy4uL2pxd2lkZ2V0cy9qcXhjaGVja2JveCc7XG5pbXBvcnQgeyBfX2RlY29yYXRlLCBfX21ldGFkYXRhIH0gZnJvbSAndHNsaWInO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBJbnB1dCwgT3V0cHV0LCBDb21wb25lbnQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi9qcXdpZGdldHMuZC50c1wiIC8+XHJcbmxldCBqcXhUcmVlQ29tcG9uZW50ID0gY2xhc3MganF4VHJlZUNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXJFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5hdXRvQ3JlYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBbJ2FuaW1hdGlvblNob3dEdXJhdGlvbicsICdhbmltYXRpb25IaWRlRHVyYXRpb24nLCAnYWxsb3dEcmFnJywgJ2FsbG93RHJvcCcsICdjaGVja2JveGVzJywgJ2RyYWdTdGFydCcsICdkcmFnRW5kJywgJ2Rpc2FibGVkJywgJ2Vhc2luZycsICdlbmFibGVIb3ZlcicsICdoZWlnaHQnLCAnaGFzVGhyZWVTdGF0ZXMnLCAnaW5jcmVtZW50YWxTZWFyY2gnLCAna2V5Ym9hcmROYXZpZ2F0aW9uJywgJ3J0bCcsICdzb3VyY2UnLCAndG9nZ2xlSW5kaWNhdG9yU2l6ZScsICd0b2dnbGVNb2RlJywgJ3RoZW1lJywgJ3dpZHRoJ107XHJcbiAgICAgICAgLy8ganF4VHJlZUNvbXBvbmVudCBldmVudHNcclxuICAgICAgICB0aGlzLm9uQWRkZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkNoZWNrQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25Db2xsYXBzZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25EcmFnRW5kID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMub25FeHBhbmQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbkl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uUmVtb3ZlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLm9uU2VsZWN0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZiA9IGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hdXRvQ3JlYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xyXG4gICAgICAgIGlmICh0aGlzLmhvc3QpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBhdHRyTmFtZSA9ICdhdHRyJyArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYXJlRXF1YWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzW2F0dHJOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2F0dHJOYW1lXSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbYXR0ck5hbWVdIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZUVxdWFsID0gdGhpcy5hcnJheXNFcXVhbCh0aGlzW2F0dHJOYW1lXSwgdGhpcy5ob3N0LmpxeFRyZWUodGhpcy5wcm9wZXJ0aWVzW2ldKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZUVxdWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUodGhpcy5wcm9wZXJ0aWVzW2ldLCB0aGlzW2F0dHJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1thdHRyTmFtZV0gIT09IHRoaXMuaG9zdC5qcXhUcmVlKHRoaXMucHJvcGVydGllc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUodGhpcy5wcm9wZXJ0aWVzW2ldLCB0aGlzW2F0dHJOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXJyYXlzRXF1YWwoYXR0clZhbHVlLCBob3N0VmFsdWUpIHtcclxuICAgICAgICBpZiAoKGF0dHJWYWx1ZSAmJiAhaG9zdFZhbHVlKSB8fCAoIWF0dHJWYWx1ZSAmJiBob3N0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGF0dHJWYWx1ZS5sZW5ndGggIT0gaG9zdFZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0clZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhdHRyVmFsdWVbaV0gIT09IGhvc3RWYWx1ZVtpXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgbWFuYWdlQXR0cmlidXRlcygpIHtcclxuICAgICAgICBsZXQgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBhdHRyTmFtZSA9ICdhdHRyJyArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHRoaXMucHJvcGVydGllc1tpXS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzW2F0dHJOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zW3RoaXMucHJvcGVydGllc1tpXV0gPSB0aGlzW2F0dHJOYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3B0aW9ucztcclxuICAgIH1cclxuICAgIG1vdmVDbGFzc2VzKHBhcmVudEVsLCBjaGlsZEVsKSB7XHJcbiAgICAgICAgbGV0IGNsYXNzZXMgPSBwYXJlbnRFbC5jbGFzc0xpc3Q7XHJcbiAgICAgICAgaWYgKGNsYXNzZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjaGlsZEVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmVudEVsLmNsYXNzTmFtZSA9ICcnO1xyXG4gICAgfVxyXG4gICAgbW92ZVN0eWxlcyhwYXJlbnRFbCwgY2hpbGRFbCkge1xyXG4gICAgICAgIGxldCBzdHlsZSA9IHBhcmVudEVsLnN0eWxlLmNzc1RleHQ7XHJcbiAgICAgICAgY2hpbGRFbC5zdHlsZS5jc3NUZXh0ID0gc3R5bGU7XHJcbiAgICAgICAgcGFyZW50RWwuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQ29tcG9uZW50KG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGhpcy5ob3N0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgSlFYTGl0ZS5leHRlbmQob3B0aW9ucywgdGhpcy5tYW5hZ2VBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IHRoaXMubWFuYWdlQXR0cmlidXRlcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhvc3QgPSBKUVhMaXRlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIHRoaXMubW92ZUNsYXNzZXModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsIHRoaXMuaG9zdFswXSk7XHJcbiAgICAgICAgdGhpcy5tb3ZlU3R5bGVzKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmhvc3RbMF0pO1xyXG4gICAgICAgIHRoaXMuX193aXJlRXZlbnRzX18oKTtcclxuICAgICAgICB0aGlzLndpZGdldE9iamVjdCA9IGpxd2lkZ2V0cy5jcmVhdGVJbnN0YW5jZSh0aGlzLmhvc3QsICdqcXhUcmVlJywgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVXaWRnZXQob3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgX191cGRhdGVSZWN0X18oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9zdClcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmNzcyh7IHdpZHRoOiB0aGlzLmF0dHJXaWR0aCwgaGVpZ2h0OiB0aGlzLmF0dHJIZWlnaHQgfSk7XHJcbiAgICB9XHJcbiAgICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnc2V0T3B0aW9ucycsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgLy8ganF4VHJlZUNvbXBvbmVudCBwcm9wZXJ0aWVzXHJcbiAgICBhbmltYXRpb25TaG93RHVyYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdhbmltYXRpb25TaG93RHVyYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdhbmltYXRpb25TaG93RHVyYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhbmltYXRpb25IaWRlRHVyYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdhbmltYXRpb25IaWRlRHVyYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdhbmltYXRpb25IaWRlRHVyYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhbGxvd0RyYWcoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdhbGxvd0RyYWcnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdhbGxvd0RyYWcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhbGxvd0Ryb3AoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdhbGxvd0Ryb3AnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdhbGxvd0Ryb3AnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjaGVja2JveGVzKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnY2hlY2tib3hlcycsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ2NoZWNrYm94ZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmFnU3RhcnQoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdkcmFnU3RhcnQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdkcmFnU3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmFnRW5kKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnZHJhZ0VuZCcsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ2RyYWdFbmQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNhYmxlZChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2Rpc2FibGVkJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgnZGlzYWJsZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlYXNpbmcoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdlYXNpbmcnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdlYXNpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbmFibGVIb3ZlcihhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2VuYWJsZUhvdmVyJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgnZW5hYmxlSG92ZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoZWlnaHQoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdoZWlnaHQnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdoZWlnaHQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYXNUaHJlZVN0YXRlcyhhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2hhc1RocmVlU3RhdGVzJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgnaGFzVGhyZWVTdGF0ZXMnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbmNyZW1lbnRhbFNlYXJjaChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2luY3JlbWVudGFsU2VhcmNoJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgnaW5jcmVtZW50YWxTZWFyY2gnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBrZXlib2FyZE5hdmlnYXRpb24oYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdrZXlib2FyZE5hdmlnYXRpb24nLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdrZXlib2FyZE5hdmlnYXRpb24nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBydGwoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdydGwnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdydGwnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzb3VyY2UoYXJnKSB7XHJcbiAgICAgICAgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdzb3VyY2UnLCBhcmcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdzb3VyY2UnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0b2dnbGVJbmRpY2F0b3JTaXplKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgndG9nZ2xlSW5kaWNhdG9yU2l6ZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ3RvZ2dsZUluZGljYXRvclNpemUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0b2dnbGVNb2RlKGFyZykge1xyXG4gICAgICAgIGlmIChhcmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgndG9nZ2xlTW9kZScsIGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ3RvZ2dsZU1vZGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGVtZShhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ3RoZW1lJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgndGhlbWUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB3aWR0aChhcmcpIHtcclxuICAgICAgICBpZiAoYXJnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ3dpZHRoJywgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgnd2lkdGgnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBqcXhUcmVlQ29tcG9uZW50IGZ1bmN0aW9uc1xyXG4gICAgYWRkQmVmb3JlKGl0ZW0sIGlkKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2FkZEJlZm9yZScsIGl0ZW0sIGlkKTtcclxuICAgIH1cclxuICAgIGFkZEFmdGVyKGl0ZW0sIGlkKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2FkZEFmdGVyJywgaXRlbSwgaWQpO1xyXG4gICAgfVxyXG4gICAgYWRkVG8oaXRlbSwgaWQpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnYWRkVG8nLCBpdGVtLCBpZCk7XHJcbiAgICB9XHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnY2xlYXInKTtcclxuICAgIH1cclxuICAgIGNoZWNrQWxsKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdjaGVja0FsbCcpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tJdGVtKGl0ZW0sIGNoZWNrZWQpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnY2hlY2tJdGVtJywgaXRlbSwgY2hlY2tlZCk7XHJcbiAgICB9XHJcbiAgICBjb2xsYXBzZUFsbCgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnY29sbGFwc2VBbGwnKTtcclxuICAgIH1cclxuICAgIGNvbGxhcHNlSXRlbShpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2NvbGxhcHNlSXRlbScsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnZGVzdHJveScpO1xyXG4gICAgfVxyXG4gICAgZGlzYWJsZUl0ZW0oaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdkaXNhYmxlSXRlbScsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgZW5zdXJlVmlzaWJsZShpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2Vuc3VyZVZpc2libGUnLCBpdGVtKTtcclxuICAgIH1cclxuICAgIGVuYWJsZUl0ZW0oaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdlbmFibGVJdGVtJywgaXRlbSk7XHJcbiAgICB9XHJcbiAgICBlbmFibGVBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ2VuYWJsZUFsbCcpO1xyXG4gICAgfVxyXG4gICAgZXhwYW5kQWxsKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdleHBhbmRBbGwnKTtcclxuICAgIH1cclxuICAgIGV4cGFuZEl0ZW0oaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdleHBhbmRJdGVtJywgaXRlbSk7XHJcbiAgICB9XHJcbiAgICBmb2N1cygpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnZm9jdXMnKTtcclxuICAgIH1cclxuICAgIGdldENoZWNrZWRJdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ2dldENoZWNrZWRJdGVtcycpO1xyXG4gICAgfVxyXG4gICAgZ2V0VW5jaGVja2VkSXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdnZXRVbmNoZWNrZWRJdGVtcycpO1xyXG4gICAgfVxyXG4gICAgZ2V0SXRlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdnZXRJdGVtcycpO1xyXG4gICAgfVxyXG4gICAgZ2V0SXRlbShlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdnZXRJdGVtJywgZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgICBnZXRTZWxlY3RlZEl0ZW0oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdnZXRTZWxlY3RlZEl0ZW0nKTtcclxuICAgIH1cclxuICAgIGdldFByZXZJdGVtKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ2dldFByZXZJdGVtJywgaXRlbSk7XHJcbiAgICB9XHJcbiAgICBnZXROZXh0SXRlbShpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCdnZXROZXh0SXRlbScsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgaGl0VGVzdChsZWZ0LCB0b3ApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmpxeFRyZWUoJ2hpdFRlc3QnLCBsZWZ0LCB0b3ApO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlSXRlbShpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ3JlbW92ZUl0ZW0nLCBpdGVtKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgncmVuZGVyJyk7XHJcbiAgICB9XHJcbiAgICByZWZyZXNoKCkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCdyZWZyZXNoJyk7XHJcbiAgICB9XHJcbiAgICBzZWxlY3RJdGVtKGl0ZW0pIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgnc2VsZWN0SXRlbScsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgdW5jaGVja0FsbCgpIHtcclxuICAgICAgICB0aGlzLmhvc3QuanF4VHJlZSgndW5jaGVja0FsbCcpO1xyXG4gICAgfVxyXG4gICAgdW5jaGVja0l0ZW0oaXRlbSkge1xyXG4gICAgICAgIHRoaXMuaG9zdC5qcXhUcmVlKCd1bmNoZWNrSXRlbScsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlSXRlbShpdGVtLCBuZXdJdGVtKSB7XHJcbiAgICAgICAgdGhpcy5ob3N0LmpxeFRyZWUoJ3VwZGF0ZUl0ZW0nLCBpdGVtLCBuZXdJdGVtKTtcclxuICAgIH1cclxuICAgIHZhbCh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhvc3QuanF4VHJlZSgndmFsJywgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5qcXhUcmVlKCd2YWwnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBfX3dpcmVFdmVudHNfXygpIHtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2FkZGVkJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQWRkZWQuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NoZWNrQ2hhbmdlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ2hlY2tDaGFuZ2UuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2NvbGxhcHNlJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uQ29sbGFwc2UuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2RyYWdTdGFydCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkRyYWdTdGFydC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignZHJhZ0VuZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkRyYWdFbmQuZW1pdChldmVudERhdGEpOyB9KTtcclxuICAgICAgICB0aGlzLmhvc3Qub24oJ2V4cGFuZCcsIChldmVudERhdGEpID0+IHsgdGhpcy5vbkV4cGFuZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignaXRlbUNsaWNrJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uSXRlbUNsaWNrLmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICAgICAgdGhpcy5ob3N0Lm9uKCdyZW1vdmVkJywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uUmVtb3ZlZC5lbWl0KGV2ZW50RGF0YSk7IH0pO1xyXG4gICAgICAgIHRoaXMuaG9zdC5vbignc2VsZWN0JywgKGV2ZW50RGF0YSkgPT4geyB0aGlzLm9uU2VsZWN0LmVtaXQoZXZlbnREYXRhKTsgfSk7XHJcbiAgICB9XHJcbn07IC8vanF4VHJlZUNvbXBvbmVudFxyXG5qcXhUcmVlQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xyXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cclxuXTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnYW5pbWF0aW9uU2hvd0R1cmF0aW9uJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyQW5pbWF0aW9uU2hvd0R1cmF0aW9uXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2FuaW1hdGlvbkhpZGVEdXJhdGlvbicpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE51bWJlcilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckFuaW1hdGlvbkhpZGVEdXJhdGlvblwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdhbGxvd0RyYWcnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyQWxsb3dEcmFnXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2FsbG93RHJvcCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJBbGxvd0Ryb3BcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnY2hlY2tib3hlcycpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJDaGVja2JveGVzXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2RyYWdTdGFydCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEZ1bmN0aW9uKVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyRHJhZ1N0YXJ0XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2RyYWdFbmQnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBGdW5jdGlvbilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckRyYWdFbmRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnZGlzYWJsZWQnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBCb29sZWFuKVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyRGlzYWJsZWRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgnZWFzaW5nJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJhdHRyRWFzaW5nXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2VuYWJsZUhvdmVyJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckVuYWJsZUhvdmVyXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2hhc1RocmVlU3RhdGVzJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckhhc1RocmVlU3RhdGVzXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2luY3JlbWVudGFsU2VhcmNoJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckluY3JlbWVudGFsU2VhcmNoXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2tleWJvYXJkTmF2aWdhdGlvbicpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJLZXlib2FyZE5hdmlnYXRpb25cIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgncnRsJyksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0clJ0bFwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdzb3VyY2UnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJTb3VyY2VcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgndG9nZ2xlSW5kaWNhdG9yU2l6ZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE51bWJlcilcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0clRvZ2dsZUluZGljYXRvclNpemVcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgndG9nZ2xlTW9kZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0clRvZ2dsZU1vZGVcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBJbnB1dCgndGhlbWUnKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF0dHJUaGVtZVwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCd3aWR0aCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0cldpZHRoXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgSW5wdXQoJ2hlaWdodCcpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwiYXR0ckhlaWdodFwiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCdhdXRvLWNyZWF0ZScpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcImF1dG9DcmVhdGVcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcIm9uQWRkZWRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcIm9uQ2hlY2tDaGFuZ2VcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcIm9uQ29sbGFwc2VcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcIm9uRHJhZ1N0YXJ0XCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkRyYWdFbmRcIiwgdm9pZCAwKTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBPdXRwdXQoKSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIGpxeFRyZWVDb21wb25lbnQucHJvdG90eXBlLCBcIm9uRXhwYW5kXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvbkl0ZW1DbGlja1wiLCB2b2lkIDApO1xyXG5fX2RlY29yYXRlKFtcclxuICAgIE91dHB1dCgpLFxyXG4gICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE9iamVjdClcclxuXSwganF4VHJlZUNvbXBvbmVudC5wcm90b3R5cGUsIFwib25SZW1vdmVkXCIsIHZvaWQgMCk7XHJcbl9fZGVjb3JhdGUoW1xyXG4gICAgT3V0cHV0KCksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgT2JqZWN0KVxyXG5dLCBqcXhUcmVlQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvblNlbGVjdFwiLCB2b2lkIDApO1xyXG5qcXhUcmVlQ29tcG9uZW50ID0gX19kZWNvcmF0ZShbXHJcbiAgICBDb21wb25lbnQoe1xyXG4gICAgICAgIHNlbGVjdG9yOiAnanF4VHJlZScsXHJcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2PjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj4nXHJcbiAgICB9KSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbRWxlbWVudFJlZl0pXHJcbl0sIGpxeFRyZWVDb21wb25lbnQpO1xuXG5sZXQganF4VHJlZU1vZHVsZSA9IGNsYXNzIGpxeFRyZWVNb2R1bGUge1xyXG59O1xyXG5qcXhUcmVlTW9kdWxlID0gX19kZWNvcmF0ZShbXHJcbiAgICBOZ01vZHVsZSh7XHJcbiAgICAgICAgaW1wb3J0czogW10sXHJcbiAgICAgICAgZGVjbGFyYXRpb25zOiBbanF4VHJlZUNvbXBvbmVudF0sXHJcbiAgICAgICAgZXhwb3J0czogW2pxeFRyZWVDb21wb25lbnRdXHJcbiAgICB9KVxyXG5dLCBqcXhUcmVlTW9kdWxlKTtcblxuLyoqXHJcbiAqIEdlbmVyYXRlZCBidW5kbGUgaW5kZXguIERvIG5vdCBlZGl0LlxyXG4gKi9cblxuZXhwb3J0IHsganF4VHJlZUNvbXBvbmVudCwganF4VHJlZU1vZHVsZSB9O1xuIl19","map":null,"metadata":{},"sourceType":"module"}