{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let FlowStructureService = /*#__PURE__*/(() => {\n  class FlowStructureService {\n    constructor() {\n      this.structure = {};\n      this.structureObservable = new Subject();\n      this.positionsUpdate = false;\n      this.initializeWorker();\n    }\n\n    initializeWorker() {\n      if (Worker) {\n        this.flowGenerator = new Worker(new URL('../../shared/workers/flow-generator.worker', import.meta.url), {\n          name: 'flow-generator',\n          type: 'module'\n        });\n\n        this.flowGenerator.onmessage = ({\n          data\n        }) => {\n          if (data) {\n            this.structure = data;\n            this.structureObservable.next(data);\n          }\n        };\n      }\n    }\n\n    updateStructure() {\n      var _a, _b;\n\n      (_a = this.flowGenerator) === null || _a === void 0 ? void 0 : _a.postMessage((_b = this.monacoEditorComponent) === null || _b === void 0 ? void 0 : _b.codeEditorInstance.getValue());\n    }\n\n    setStructure(structure) {\n      this.structureObservable.next(structure);\n      this.structure = structure;\n    }\n\n    getStructure() {\n      return this.structure;\n    }\n\n    refreshStructure() {\n      var _a, _b;\n\n      (_a = this.flowGenerator) === null || _a === void 0 ? void 0 : _a.postMessage((_b = this.monacoEditorComponent) === null || _b === void 0 ? void 0 : _b.codeEditorInstance.getValue());\n    }\n\n    setEditorComponent(monacoEditorComponent) {\n      this.monacoEditorComponent = monacoEditorComponent;\n    }\n\n    addConnection(sourceName, targetName) {\n      var _a, _b;\n\n      this.positionsUpdate = true;\n      const pipes = this.structure.pipes;\n      const newForward = '\\n\\t\\t\\t\\t<Forward name=\"success\" path=\"' + targetName + '\" />';\n      let lastForward;\n      const currentPipe = pipes.find(pipe => pipe.attributes['name'].value === sourceName);\n      const forwards = currentPipe.forwards;\n\n      if (forwards) {\n        lastForward = forwards[forwards.length - 1];\n      }\n\n      if (currentPipe) {\n        if (lastForward) {\n          (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n            startLineNumber: lastForward.line,\n            startColumn: lastForward.column,\n            endColumn: lastForward.column,\n            endLineNumber: lastForward.line\n          }, newForward, false);\n        } else {\n          (_b = this.monacoEditorComponent) === null || _b === void 0 ? void 0 : _b.applyEdit({\n            startLineNumber: currentPipe.line,\n            startColumn: currentPipe.column,\n            endColumn: currentPipe.column,\n            endLineNumber: currentPipe.line\n          }, newForward, false);\n        }\n      }\n    }\n\n    deleteConnection(sourceName, targetName) {\n      var _a;\n\n      const sourcePipe = this.structure.pipes.find(pipe => pipe.name === sourceName);\n      const targetForward = sourcePipe.forwards.find(forward => forward.attributes['path'].value === targetName);\n\n      if (targetForward) {\n        (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n          startLineNumber: targetForward.line,\n          startColumn: 0,\n          endColumn: targetForward.column,\n          endLineNumber: targetForward.line\n        }, '', false);\n      }\n    }\n\n    addPipe(pipeData) {\n      var _a;\n\n      const pipes = this.structure.pipes;\n      console.log('structure', this.structure);\n      const newPipe = `\\n\\t\\t\\t<${pipeData.type} name=\"${pipeData.name}\" x=\"${pipeData.left}\" y=\"${pipeData.top}\">\\n\\t\\t\\t</${pipeData.type}>\\n`;\n      let lastPipe = pipes[pipes.length - 1];\n      let line;\n\n      if (!lastPipe) {\n        lastPipe = this.structure.pipeline;\n        line = lastPipe.line + 1;\n      } else {\n        line = lastPipe.endLine + 1;\n      }\n\n      if (lastPipe) {\n        (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n          startLineNumber: line,\n          startColumn: lastPipe.startColumn,\n          endColumn: lastPipe.endColumn,\n          endLineNumber: line\n        }, newPipe, false);\n      }\n    }\n\n    addListener(pipeData) {\n      var _a;\n\n      const listeners = this.structure.listeners;\n      const lastListener = listeners[listeners.length - 1];\n      console.log(lastListener);\n      const newListener = `\\t  <${pipeData.type} name=\"${pipeData.name}\" x=\"${pipeData.left}\" y=\"${pipeData.top}\" />\\n`;\n      (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n        startLineNumber: lastListener.line + 1,\n        startColumn: lastListener.startColumn,\n        endColumn: lastListener.endColumn,\n        endLineNumber: lastListener.line + 1\n      }, newListener, false);\n    }\n\n    addExit(exitData) {\n      var _a;\n\n      const exits = this.structure.exits;\n      let lastExit = exits[exits.length - 1];\n\n      if (!lastExit) {\n        lastExit = this.structure.pipes[this.structure.pipes.length - 1];\n        lastExit.line = lastExit.endLine;\n      }\n\n      const newExit = `\\t\\t\\t<${exitData.getType()} path=\"${exitData.getName()}\" x=\"${exitData.getLeft()}\" y=\"${exitData.getTop()}\" />\\n`;\n      (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n        startLineNumber: lastExit.line + 1,\n        startColumn: lastExit.startColumn,\n        endColumn: lastExit.endColumn,\n        endLineNumber: lastExit.line + 1\n      }, newExit, false);\n    }\n\n    editListenerPositions(nodeId, xPos, yPos) {\n      this.editNodePositions('listeners', nodeId, xPos, yPos);\n    }\n\n    editExitPositions(nodeId, xPos, yPos) {\n      this.editNodePositions('exits', nodeId, xPos, yPos);\n    }\n\n    editPipePositions(nodeId, xPos, yPos) {\n      this.editNodePositions('pipes', nodeId, xPos, yPos);\n    }\n\n    editNodePositions(structureNodes, nodeId, xPos, yPos) {\n      var _a;\n\n      (_a = this.structureSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n      this.structureSubscription = this.structureObservable.asObservable().subscribe({\n        next: data => this.editNodePosition(data[structureNodes], nodeId, 'y', yPos, false)\n      });\n      this.editNodePosition(this.structure[structureNodes], nodeId, 'x', xPos, true);\n      this.updateStructure();\n    }\n\n    editNodePosition(structureNodes, nodeId, positionType, position, flowUpdate) {\n      const node = structureNodes.find(node => node.name === nodeId);\n      this.editAttribute(positionType, position, node.attributes, flowUpdate);\n    }\n\n    editAttribute(key, value, attributeList, flowUpdate = false) {\n      let hasAttribute = false;\n      Object.entries(attributeList).forEach(([attributeKey, attribute]) => {\n        var _a;\n\n        if (attributeKey === key) {\n          const newValue = `${key}=\"${value}\"`;\n          hasAttribute = true;\n          (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n            startLineNumber: attribute.line,\n            startColumn: attribute.startColumn,\n            endColumn: attribute.endColumn,\n            endLineNumber: attribute.line\n          }, newValue, flowUpdate);\n        }\n      });\n\n      if (!hasAttribute) {\n        this.createAttribute(key, value, attributeList, flowUpdate);\n      }\n    }\n\n    createAttribute(key, value, attributeList, flowUpdate) {\n      var _a;\n\n      if (Object.entries(attributeList).length === 0) {\n        return;\n      }\n\n      const newValue = ` ${key}=\"${value}\"`;\n      let endColumn = 0;\n      let startColumn = 0;\n      let line = 0;\n      Object.entries(attributeList).forEach(([attributeKey, attribute]) => {\n        if (attribute.line > line) {\n          line = attribute.line;\n        }\n\n        if (attribute.endColumn > startColumn) {\n          startColumn = attribute.endColumn;\n          endColumn = startColumn;\n        }\n      });\n      (_a = this.monacoEditorComponent) === null || _a === void 0 ? void 0 : _a.applyEdit({\n        startLineNumber: line,\n        startColumn: startColumn,\n        endColumn,\n        endLineNumber: line\n      }, newValue, flowUpdate);\n    }\n\n  }\n\n  FlowStructureService.ɵfac = function FlowStructureService_Factory(t) {\n    return new (t || FlowStructureService)();\n  };\n\n  FlowStructureService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlowStructureService,\n    factory: FlowStructureService.ɵfac,\n    providedIn: 'root'\n  });\n  return FlowStructureService;\n})();","map":null,"metadata":{},"sourceType":"module"}