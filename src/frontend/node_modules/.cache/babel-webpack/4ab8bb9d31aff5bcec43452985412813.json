{"ast":null,"code":"import { SwitchWithoutSavingOption } from '../../../header/settings/options/switch-without-saving-option';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/file.service\";\nimport * as i2 from \"../../services/code.service\";\nimport * as i3 from \"ngx-smart-modal\";\nimport * as i4 from \"../../../header/settings/settings.service\";\nimport * as i5 from \"ngx-toastr\";\nimport * as i6 from \"jqwidgets-ng/jqxtree\";\nconst _c0 = [\"treeReference\"];\nexport let FileTreeComponent = /*#__PURE__*/(() => {\n  class FileTreeComponent {\n    constructor(fileService, codeService, ngxSmartModalService, settingsService, toastr) {\n      this.fileService = fileService;\n      this.codeService = codeService;\n      this.ngxSmartModalService = ngxSmartModalService;\n      this.settingsService = settingsService;\n      this.toastr = toastr;\n      this.width = '100%';\n      this.height = '100%';\n    }\n\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.getFiles();\n        this.getCurrentFile();\n        this.getSettings();\n      });\n    }\n\n    ngOnDestroy() {\n      this.currentFileSubscription.unsubscribe();\n      this.fileSubscription.unsubscribe();\n      this.settingsSubscription.unsubscribe();\n    }\n\n    getFiles() {\n      this.fileSubscription = this.fileService.getFiles().subscribe({\n        next: configurationFiles => this.addFilesToTree(configurationFiles)\n      });\n    }\n\n    addFilesToTree(configurationFiles) {\n      this.treeSource = configurationFiles.map(configuration => ({\n        label: configuration.name,\n        expanded: true,\n        items: this.parseFiles(configuration.name, configuration.content)\n      }));\n      setTimeout(() => {\n        if (this.tree && this.tree.refresh) {\n          this.tree.refresh();\n        }\n      });\n    }\n\n    parseFiles(configuration, content, path = '') {\n      const items = [];\n      Object.keys(content).map(key => {\n        if (key === '_files') {\n          content._files.forEach(file => {\n            if (!this.fileMatch || file.match(this.fileMatch)) {\n              items.push({\n                label: file,\n                value: JSON.stringify({\n                  configuration,\n                  path: path + file\n                })\n              });\n            }\n          });\n        } else {\n          items.push({\n            label: key,\n            items: this.parseFiles(configuration, content[key], key + '/')\n          });\n        }\n      });\n      return items;\n    }\n\n    getCurrentFile() {\n      const initialCurrentFile = this.codeService.getCurrentFile();\n\n      if (initialCurrentFile) {\n        this.currentFile = initialCurrentFile;\n      }\n\n      this.currentFileSubscription = this.codeService.curFileObservable.subscribe(currentFile => this.currentFile = currentFile);\n    }\n\n    getSettings() {\n      this.settingsSubscription = this.settingsService.getSettings().subscribe(settings => this.settings = settings);\n    }\n\n    onItemClick(event) {\n      var _a, _b;\n\n      const itemValue = this.tree.getItem((_a = event === null || event === void 0 ? void 0 : event.args) === null || _a === void 0 ? void 0 : _a.element).value;\n\n      if (itemValue) {\n        const item = JSON.parse(itemValue);\n\n        if (!((_b = this.currentFile) === null || _b === void 0 ? void 0 : _b.saved)) {\n          this.switchWithoutSavingDecision(item);\n        } else {\n          this.codeService.switchCurrentFile(item);\n        }\n      }\n    }\n\n    switchWithoutSavingDecision(item) {\n      switch (+this.settings.switchWithoutSaving) {\n        case SwitchWithoutSavingOption.ask:\n          this.ngxSmartModalService.getModal('saveDialog').setData(item, true).open();\n          break;\n\n        case SwitchWithoutSavingOption.save:\n          this.codeService.save();\n          break;\n\n        case SwitchWithoutSavingOption.discard:\n          this.codeService.switchCurrentFile(item);\n          break;\n      }\n    }\n\n  }\n\n  FileTreeComponent.ɵfac = function FileTreeComponent_Factory(t) {\n    return new (t || FileTreeComponent)(i0.ɵɵdirectiveInject(i1.FileService), i0.ɵɵdirectiveInject(i2.CodeService), i0.ɵɵdirectiveInject(i3.NgxSmartModalService), i0.ɵɵdirectiveInject(i4.SettingsService), i0.ɵɵdirectiveInject(i5.ToastrService));\n  };\n\n  FileTreeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FileTreeComponent,\n    selectors: [[\"app-file-tree\"]],\n    viewQuery: function FileTreeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tree = _t.first);\n      }\n    },\n    inputs: {\n      width: \"width\",\n      height: \"height\",\n      fileMatch: \"fileMatch\"\n    },\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"allowDrag\", \"allowDrop\", \"height\", \"source\", \"width\", \"onItemClick\"], [\"treeReference\", \"\"]],\n    template: function FileTreeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"jqxTree\", 0, 1);\n        i0.ɵɵlistener(\"onItemClick\", function FileTreeComponent_Template_jqxTree_onItemClick_0_listener($event) {\n          return ctx.onItemClick($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"allowDrag\", false)(\"allowDrop\", false)(\"height\", ctx.height)(\"source\", ctx.treeSource)(\"width\", ctx.width);\n      }\n    },\n    directives: [i6.jqxTreeComponent],\n    styles: [\"\"]\n  });\n  return FileTreeComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}