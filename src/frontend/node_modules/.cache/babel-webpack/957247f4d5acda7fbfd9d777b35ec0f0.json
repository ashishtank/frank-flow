{"ast":null,"code":"import * as cytoscape from 'cytoscape';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../flow/node/node.service\";\nimport * as i2 from \"./flow-structure.service\";\nexport let GraphService = /*#__PURE__*/(() => {\n  class GraphService {\n    constructor(nodeService, flowStructureService) {\n      this.nodeService = nodeService;\n      this.flowStructureService = flowStructureService;\n      this.graph = cytoscape({\n        layout: {\n          name: 'grid',\n          rows: 10\n        }\n      });\n    }\n\n    makeGraph(nodeMap, forwards) {\n      this.initializeGraph();\n      this.addNodesToGraph(nodeMap);\n\n      try {\n        this.connectAllNodes(forwards);\n      } catch (e) {\n        console.log('cant connect nodes, check if connection exists');\n      }\n\n      this.generateGraphedNodes(nodeMap);\n    }\n\n    initializeGraph() {\n      this.graph = cytoscape({\n        layout: {\n          name: 'grid',\n          rows: 10\n        }\n      });\n    }\n\n    addNodesToGraph(nodeMap) {\n      nodeMap.forEach((node, key) => {\n        var _a, _b;\n\n        const x = (_a = node.getLeft()) !== null && _a !== void 0 ? _a : 0;\n        const y = (_b = node.getTop()) !== null && _b !== void 0 ? _b : 0;\n        this.graph.add({\n          group: 'nodes',\n          data: {\n            id: node.getName(),\n            weight: 70\n          },\n          position: {\n            x,\n            y\n          },\n          style: {\n            height: 200,\n            width: 200\n          }\n        });\n      });\n    }\n\n    generateGraphedNodes(nodeMap) {\n      this.graph.layout({\n        name: 'breadthfirst',\n        directed: true,\n        fit: true,\n        avoidOverlap: true,\n        spacingFactor: 5\n      }).run();\n      const graphNodes = this.graph.nodes().jsons();\n      let listenerTopMargin = 100;\n      let exitLeftMargin = 800;\n      let exitTopPosition = 0;\n      graphNodes.forEach((graphNode, index) => {\n        var _a, _b;\n\n        const node = nodeMap.get(graphNode.data.id);\n        const xMultiplier = 300;\n        const yMultiplier = 100;\n\n        if ((node === null || node === void 0 ? void 0 : node.getTop()) === 0 && node.getLeft() === 0) {\n          if ((_a = node.getType()) === null || _a === void 0 ? void 0 : _a.match(/Listener/g)) {\n            const left = 100;\n            node === null || node === void 0 ? void 0 : node.setLeft(left);\n            node === null || node === void 0 ? void 0 : node.setTop(listenerTopMargin);\n            listenerTopMargin += 100;\n          } else if ((_b = node.getType()) === null || _b === void 0 ? void 0 : _b.match(/Exit/g)) {\n            node === null || node === void 0 ? void 0 : node.setLeft(exitLeftMargin);\n            node === null || node === void 0 ? void 0 : node.setTop(exitTopPosition + 200);\n            exitLeftMargin += 100;\n          } else {\n            const nodeLeftPosition = Math.abs(graphNode.position.x) * xMultiplier;\n            const nodeTopPosition = Math.abs(graphNode.position.y) * yMultiplier;\n\n            if (nodeTopPosition > exitTopPosition) {\n              exitTopPosition = nodeTopPosition;\n            }\n\n            node === null || node === void 0 ? void 0 : node.setLeft(nodeLeftPosition);\n            node === null || node === void 0 ? void 0 : node.setTop(nodeTopPosition);\n          }\n        }\n\n        if (node) {\n          this.nodeService.addDynamicNode(node);\n        }\n      });\n    }\n\n    connectAllNodes(forwards) {\n      forwards.forEach((forward, index) => {\n        const source = forward.getSource();\n        const target = forward.getDestination();\n\n        if (source && target) {\n          this.graph.add({\n            group: 'edges',\n            data: {\n              id: '' + index,\n              source,\n              target\n            }\n          });\n        }\n      });\n    }\n\n  }\n\n  GraphService.ɵfac = function GraphService_Factory(t) {\n    return new (t || GraphService)(i0.ɵɵinject(i1.NodeService), i0.ɵɵinject(i2.FlowStructureService));\n  };\n\n  GraphService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GraphService,\n    factory: GraphService.ɵfac,\n    providedIn: 'root'\n  });\n  return GraphService;\n})();","map":null,"metadata":{},"sourceType":"module"}