{"ast":null,"code":"import Pipe from '../../flow/node/nodes/pipe.model';\nimport Listener from '../../flow/node/nodes/listener.model';\nimport Exit from '../../flow/node/nodes/exit.model';\nimport { Forward } from '../models/forward.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/flow/node/node.service\";\nexport let NodeGeneratorService = /*#__PURE__*/(() => {\n  class NodeGeneratorService {\n    constructor(nodeService) {\n      this.nodeService = nodeService;\n      this.nodeMap = new Map();\n      this.forwards = [];\n      this.offsetY = 0;\n      this.offsetX = 0;\n    }\n\n    set offY(value) {\n      this.offsetY = value;\n    }\n\n    get offY() {\n      return this.offsetY;\n    }\n\n    set offX(value) {\n      this.offsetX = value;\n    }\n\n    get offX() {\n      return this.offsetX;\n    }\n\n    resetNodes() {\n      this.nodeMap = new Map();\n      this.forwards = [];\n    }\n\n    generateNodes(firstPipe, listeners, pipes, exits) {\n      this.generateListeners(listeners, firstPipe);\n      this.generatePipeline(pipes);\n      this.generateExits(exits);\n    }\n\n    generateListeners(listeners, firstPipe) {\n      listeners.forEach(listener => {\n        const [x, y] = listener.positions;\n        const attributes = listener.attributes;\n        const listenerNode = new Listener(listener.name, listener.name, listener.type, y + this.offsetY, x + this.offsetX, attributes);\n        this.forwards.push(new Forward(listener.name, firstPipe));\n        this.nodeMap.set(listener.name, listenerNode);\n      });\n    }\n\n    generatePipeline(pipes) {\n      pipes.forEach(pipe => {\n        const [x, y] = pipe.positions;\n        const attributes = pipe.attributes;\n        const node = new Pipe(pipe.name, pipe.name, pipe.type, y + this.offsetY, x + this.offsetX, attributes);\n\n        if (pipe.forwards) {\n          pipe.forwards.forEach(forward => {\n            Object.entries(forward.attributes).forEach(([key, attribute]) => {\n              if (key === 'path') {\n                this.forwards.push(new Forward(pipe.name, attribute.value));\n              }\n            });\n          });\n        }\n\n        this.nodeMap.set(pipe.name, node);\n      });\n    }\n\n    generateExits(exits) {\n      exits.forEach(exit => {\n        const [x, y] = exit.positions;\n        const attributes = exit.attributes;\n        const node = new Exit(exit.name, exit.name, exit.type, y + this.offsetY, x + this.offsetX, attributes);\n        this.nodeMap.set(exit.name, node);\n      });\n    }\n\n    generateForwards() {\n      setTimeout(() => this.forwards.forEach(forward => this.nodeService.addConnection({\n        uuids: [forward.getSource() + '_bottom', forward.getDestination() + '_top']\n      })));\n    }\n\n  }\n\n  NodeGeneratorService.ɵfac = function NodeGeneratorService_Factory(t) {\n    return new (t || NodeGeneratorService)(i0.ɵɵinject(i1.NodeService));\n  };\n\n  NodeGeneratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NodeGeneratorService,\n    factory: NodeGeneratorService.ɵfac,\n    providedIn: 'root'\n  });\n  return NodeGeneratorService;\n})();","map":null,"metadata":{},"sourceType":"module"}