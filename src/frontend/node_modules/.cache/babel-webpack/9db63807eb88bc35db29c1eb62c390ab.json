{"ast":null,"code":"import { ViewContainerRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../node/node.service\";\nimport * as i2 from \"../../shared/services/code.service\";\nimport * as i3 from \"../../shared/services/flow-structure.service\";\nimport * as i4 from \"../../shared/services/graph.service\";\nimport * as i5 from \"../../shared/services/node-generator.service\";\nconst _c0 = [\"canvas\"];\n\nfunction CanvasComponent_ng_template_2_Template(rf, ctx) {}\n\nexport let CanvasComponent = /*#__PURE__*/(() => {\n  class CanvasComponent {\n    constructor(nodeService, codeService, flowStructureService, graphService, nodeGeneratorService) {\n      this.nodeService = nodeService;\n      this.codeService = codeService;\n      this.flowStructureService = flowStructureService;\n      this.graphService = graphService;\n      this.nodeGeneratorService = nodeGeneratorService;\n      this.nodes = [];\n      this.connections = [];\n      this.flowUpdate = false;\n      this.tabindex = 1;\n      this.jsPlumbInstance = this.nodeService.getInstance();\n      this.setConnectionEventListeners();\n    }\n\n    onKeyUp(kbdEvent) {\n      this.handleKeyboardUpEvent(kbdEvent);\n    }\n\n    ngAfterViewInit() {\n      this.nodeService.setRootViewContainerRef(this.viewContainerRef);\n      this.createGeneratorWorker();\n      this.setCurrentFileListener();\n      this.setGeneratorWorkerListener();\n    }\n\n    ngOnDestroy() {\n      this.currentFileSubscription.unsubscribe();\n      this.jsPlumbInstance.reset(true);\n      this.viewContainerRef.clear();\n    }\n\n    createGeneratorWorker() {\n      if (Worker) {\n        this.flowGenerator = new Worker(new URL('../../shared/workers/flow-generator.worker', import.meta.url), {\n          name: 'flow-generator',\n          type: 'module'\n        });\n      }\n    } // TODO: Save\n\n\n    handleKeyboardUpEvent(kbdEvent) {\n      if (kbdEvent.ctrlKey && kbdEvent.key === 'z') {\n        this.codeService.undo();\n      } else if (kbdEvent.ctrlKey && kbdEvent.key === 'y') {\n        this.codeService.redo();\n      }\n    }\n\n    setGeneratorWorkerListener() {\n      this.flowGenerator.onmessage = ({\n        data\n      }) => {\n        if (data) {\n          this.flowStructureService.setStructure(data);\n          this.generateFlow(data);\n        }\n      };\n    }\n\n    setCurrentFileListener() {\n      this.currentFileSubscription = this.codeService.curFileObservable.subscribe({\n        next: data => {\n          this.flowGenerator.postMessage(data.data);\n        }\n      });\n    }\n\n    setConnectionEventListeners() {\n      this.jsPlumbInstance.bind('connection', (info, originalEvent) => {\n        if (originalEvent) {\n          const sourceName = info.sourceEndpoint.anchor.elementId;\n          const targetName = info.targetEndpoint.anchor.elementId;\n          this.flowStructureService.addConnection(sourceName, targetName);\n        }\n      });\n      this.jsPlumbInstance.bind('connectionDetached', (info, originalEvent) => {\n        if (originalEvent) {\n          const sourceName = info.sourceEndpoint.anchor.elementId;\n          const targetName = info.targetEndpoint.anchor.elementId;\n          this.flowStructureService.deleteConnection(sourceName, targetName);\n        }\n      });\n      this.jsPlumbInstance.bind('dblclick', (info, originalEvent) => {\n        if (originalEvent) {\n          const sourceName = info.source.children[0].children[2].innerHTML.trim();\n          const targetName = info.target.children[0].children[2].innerHTML.trim();\n\n          if (sourceName && targetName) {\n            this.flowStructureService.deleteConnection(sourceName, targetName);\n          }\n        }\n      });\n    }\n\n    generateFlow(structure) {\n      this.jsPlumbInstance.ready(() => {\n        this.jsPlumbInstance.reset(true);\n        this.viewContainerRef.clear();\n        this.nodeGeneratorService.resetNodes();\n        setTimeout(() => {\n          if (structure && structure.firstPipe) {\n            this.nodeGeneratorService.generateNodes(structure.firstPipe, structure.listeners, structure.pipes, structure.exits);\n          }\n\n          this.graphService.makeGraph(this.nodeGeneratorService.nodeMap, this.nodeGeneratorService.forwards);\n          this.nodeGeneratorService.generateForwards();\n        });\n      });\n    }\n\n  }\n\n  CanvasComponent.ɵfac = function CanvasComponent_Factory(t) {\n    return new (t || CanvasComponent)(i0.ɵɵdirectiveInject(i1.NodeService), i0.ɵɵdirectiveInject(i2.CodeService), i0.ɵɵdirectiveInject(i3.FlowStructureService), i0.ɵɵdirectiveInject(i4.GraphService), i0.ɵɵdirectiveInject(i5.NodeGeneratorService));\n  };\n\n  CanvasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CanvasComponent,\n    selectors: [[\"app-canvas\"]],\n    viewQuery: function CanvasComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewContainerRef = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function CanvasComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function CanvasComponent_keyup_HostBindingHandler($event) {\n          return ctx.onKeyUp($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"tabindex\", ctx.tabindex);\n      }\n    },\n    inputs: {\n      nodes: \"nodes\",\n      connections: \"connections\"\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[\"id\", \"canvas\", 1, \"canvas\"], [\"container\", \"\"], [\"canvas\", \"\"]],\n    template: function CanvasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, CanvasComponent_ng_template_2_Template, 0, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"#canvas[_ngcontent-%COMP%]{background-color:var(--bg-color);background-size:100px 100px,100px 100px,20px 20px,20px 20px;background-position:-1px -1px,-1px -1px,-1px -1px,-1px -1px;background-image:-webkit-linear-gradient(var(--shade-1) 1px,#0000 1px),-webkit-linear-gradient(0,var(--shade-1) 1px,#0000 1px),-webkit-linear-gradient(var(--shade-1-shadow) 1px,#0000 1px),-webkit-linear-gradient(0,var(--shade-1-shadow) 1px,#0000 1px);display:inline-block;position:relative;width:4000px;height:4000px}\"]\n  });\n  return CanvasComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}