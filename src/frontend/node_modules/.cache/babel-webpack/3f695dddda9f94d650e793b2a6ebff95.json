{"ast":null,"code":"/*\r\njQWidgets v12.0.0 (2021-Feb)\r\nCopyright (c) 2011-2021 jQWidgets.\r\nLicense: https://jqwidgets.com/license/\r\n*/\n\n/* eslint-disable */\n(function (a) {\n  a.jqx.jqxWidget(\"jqxDragDrop\", \"\", {});\n  a.extend(a.jqx._jqxDragDrop.prototype, {\n    defineInstance: function () {\n      var b = {\n        restricter: \"document\",\n        handle: false,\n        feedback: \"clone\",\n        opacity: 0.6,\n        revert: false,\n        revertDuration: 400,\n        distance: 5,\n        disabled: false,\n        tolerance: \"intersect\",\n        data: null,\n        dropAction: \"default\",\n        dragZIndex: 999999,\n        appendTo: \"parent\",\n        cursor: \"move\",\n        onDragEnd: null,\n        onDrag: null,\n        onDragStart: null,\n        onTargetDrop: null,\n        onDropTargetEnter: null,\n        onDropTargetLeave: null,\n        initFeedback: null,\n        dropTarget: null,\n        isDestroyed: false,\n        triggerEvents: true,\n        _touchEvents: {\n          mousedown: a.jqx.mobile.getTouchEventName(\"touchstart\"),\n          click: a.jqx.mobile.getTouchEventName(\"touchstart\"),\n          mouseup: a.jqx.mobile.getTouchEventName(\"touchend\"),\n          mousemove: a.jqx.mobile.getTouchEventName(\"touchmove\"),\n          mouseenter: \"mouseenter\",\n          mouseleave: \"mouseleave\"\n        },\n        _restricter: null,\n        _zIndexBackup: 0,\n        _targetEnterFired: false,\n        _oldOpacity: 1,\n        _feedbackType: undefined,\n        _isTouchDevice: false,\n        _events: [\"dragStart\", \"dragEnd\", \"dragging\", \"dropTargetEnter\", \"dropTargetLeave\"]\n      };\n\n      if (this === a.jqx._jqxDragDrop.prototype) {\n        return b;\n      }\n\n      a.extend(true, this, b);\n      return b;\n    },\n    createInstance: function () {\n      this._createDragDrop();\n    },\n    _createDragDrop: function () {\n      var c = a.data(document.body, \"jqx-draggables\") || 1;\n      this.appendTo = this._getParent();\n      this._isTouchDevice = a.jqx.mobile.isTouchDevice();\n\n      if (/(static|relative)/.test(this.host.css(\"position\"))) {\n        if (!this.feedback || this.feedback === \"original\") {\n          var d = this._getRelativeOffset(this.host);\n\n          var b = this.appendTo.offset();\n\n          if (this.appendTo.css(\"position\") != \"static\") {\n            b = {\n              left: 0,\n              top: 0\n            };\n          }\n\n          this.element.style.position = \"absolute\";\n          this.element.style.left = b.left + d.left + \"px\";\n          this.element.style.top = b.top + d.top + \"px\";\n        }\n      }\n\n      this._validateProperties();\n\n      this._idHandler(c);\n\n      if (this.disabled) {\n        this.disable();\n      }\n\n      if (typeof this.dropTarget === \"string\") {\n        this.dropTarget = a(this.dropTarget);\n      }\n\n      this._refresh();\n\n      c += 1;\n      a.data(document.body, \"jqx-draggables\", c);\n      this.host.addClass(\"jqx-draggable\");\n\n      if (!this.disabled) {\n        this.host.css(\"cursor\", this.cursor);\n      }\n    },\n    _getParent: function () {\n      var b = this.appendTo;\n\n      if (typeof this.appendTo === \"string\") {\n        switch (this.appendTo) {\n          case \"parent\":\n            b = this.host.parent();\n            break;\n\n          case \"document\":\n            b = a(document);\n            break;\n\n          case \"body\":\n            b = a(document.body);\n            break;\n\n          default:\n            b = a(this.appendTo);\n            break;\n        }\n      }\n\n      return b;\n    },\n    _idHandler: function (b) {\n      if (!this.element.id) {\n        var c = \"jqx-draggable-\" + b;\n        this.element.id = c;\n      }\n    },\n    _refresh: function () {\n      this._removeEventHandlers();\n\n      this._addEventHandlers();\n    },\n    _getEvent: function (b) {\n      if (this._isTouchDevice) {\n        return this._touchEvents[b];\n      } else {\n        return b;\n      }\n    },\n    _validateProperties: function () {\n      if (this.feedback === \"clone\") {\n        this._feedbackType = \"clone\";\n      } else {\n        this._feedbackType = \"original\";\n      }\n\n      if (this.dropAction !== \"default\") {\n        this.dropAction = \"nothing\";\n      }\n    },\n    _removeEventHandlers: function () {\n      this.removeHandler(this.host, \"dragstart\");\n      this.removeHandler(this.host, this._getEvent(\"mousedown\") + \".draggable.\" + this.element.id, this._mouseDown);\n      this.removeHandler(a(document), this._getEvent(\"mousemove\") + \".draggable.\" + this.element.id, this._mouseMove);\n      this.removeHandler(a(document), this._getEvent(\"mouseup\") + \".draggable.\" + this.element.id, this._mouseUp);\n    },\n    _addEventHandlers: function () {\n      var b = this;\n      this.addHandler(this.host, \"dragstart\", function (f) {\n        if (b.disabled) {\n          return true;\n        }\n\n        var e = a.jqx.mobile.isTouchDevice();\n\n        if (!e) {\n          f.preventDefault();\n          return false;\n        }\n      });\n      this.addHandler(this.host, this._getEvent(\"mousedown\") + \".draggable.\" + this.element.id, this._mouseDown, {\n        self: this\n      });\n      this.addHandler(a(document), this._getEvent(\"mousemove\") + \".draggable.\" + this.element.id, this._mouseMove, {\n        self: this\n      });\n      this.addHandler(a(document), this._getEvent(\"mouseup\") + \".draggable.\" + this.element.id, function (e) {\n        b._mouseUp(e);\n      }, {\n        self: this\n      });\n\n      try {\n        if (document.referrer != \"\" || window.frameElement) {\n          if (window.top != null && window.top != window.self) {\n            var d = \"\";\n\n            if (window.parent && document.referrer) {\n              d = document.referrer;\n            }\n\n            if (d.indexOf(document.location.host) != -1) {\n              if (window.top.document.addEventListener) {\n                window.top.document.addEventListener(\"mouseup\", function () {\n                  b._mouseUp(b);\n                }, false);\n              } else {\n                if (window.top.document.attachEvent) {\n                  window.top.document.attachEvent(\"onmouseup\", function () {\n                    b._mouseUp(b);\n                  });\n                }\n              }\n            }\n          }\n        }\n      } catch (c) {}\n    },\n    _mouseDown: function (f) {\n      var b = f.data.self;\n\n      var d = b._getMouseCoordinates(f);\n\n      var c = b._mouseCapture(f);\n\n      b._originalPageX = d.left;\n      b._originalPageY = d.top;\n\n      if (b.disabled) {\n        return true;\n      }\n\n      var e = false;\n\n      if (!b._mouseStarted) {\n        b._clear(f);\n\n        e = true;\n      }\n\n      if (c) {\n        b._mouseDownEvent = f;\n      }\n\n      if (b._isTouchDevice) {\n        return true;\n      }\n\n      if (f.which !== 1 || !c) {\n        return true;\n      }\n\n      f.preventDefault();\n    },\n    _mouseMove: function (c) {\n      var b = c.data.self;\n\n      if (b.disabled) {\n        return true;\n      }\n\n      if (b._mouseStarted) {\n        b._mouseDrag(c);\n\n        if (c.preventDefault) {\n          c.preventDefault();\n        }\n\n        return false;\n      }\n\n      if (b._mouseDownEvent && b._isMovedDistance(c)) {\n        if (b._mouseStart(b._mouseDownEvent, c)) {\n          b._mouseStarted = true;\n        } else {\n          b._mouseStarted = false;\n        }\n\n        if (b._mouseStarted) {\n          b._mouseDrag(c);\n        } else {\n          b._mouseUp(c);\n        }\n      }\n\n      return !b._mouseStarted;\n    },\n    _mouseUp: function (b) {\n      this._clear(b);\n    },\n    _clear: function (c) {\n      var b;\n\n      if (c.data && c.data.self) {\n        b = c.data.self;\n      } else {\n        b = this;\n      }\n\n      if (b.disabled) {\n        return true;\n      }\n\n      b._mouseDownEvent = false;\n      b._movedDistance = false;\n\n      if (b._mouseStarted) {\n        b._mouseStarted = false;\n\n        b._mouseStop(c);\n      }\n\n      if (b.feedback && b.feedback[0] && b._feedbackType !== \"original\" && typeof b.feedback.remove === \"function\" && !b.revert) {\n        b.feedback.remove();\n      }\n\n      if (!b._isTouchDevice) {\n        return false;\n      }\n    },\n    cancelDrag: function () {\n      var b = this.revertDuration;\n      this.revertDuration = 0;\n      this._mouseDownEvent = false;\n      this._movedDistance = false;\n      this._mouseStarted = false;\n\n      this._mouseStop();\n\n      this.feedback.remove();\n      this.revertDuration = b;\n    },\n    _isMovedDistance: function (b) {\n      var c = this._getMouseCoordinates(b);\n\n      if (this._movedDistance) {\n        return true;\n      }\n\n      if (c.left >= this._originalPageX + this.distance || c.left <= this._originalPageX - this.distance || c.top >= this._originalPageY + this.distance || c.top <= this._originalPageY - this.distance) {\n        this._movedDistance = true;\n        return true;\n      }\n\n      return false;\n    },\n    _getMouseCoordinates: function (b) {\n      if (this._isTouchDevice) {\n        var c = a.jqx.position(b);\n        return {\n          left: c.left,\n          top: c.top\n        };\n      } else {\n        return {\n          left: b.pageX,\n          top: b.pageY\n        };\n      }\n    },\n    destroy: function () {\n      this._enableSelection(this.host);\n\n      this.host.removeData(\"draggable\").off(\".draggable\").removeClass(\"jqx-draggable jqx-draggable-dragging jqx-draggable-disabled\");\n\n      this._removeEventHandlers();\n\n      this.isDestroyed = true;\n      return this;\n    },\n    _disableSelection: function (b) {\n      b.each(function () {\n        a(this).attr(\"unselectable\", \"on\").css({\n          \"-ms-user-select\": \"none\",\n          \"-moz-user-select\": \"none\",\n          \"-webkit-user-select\": \"none\",\n          \"user-select\": \"none\"\n        }).each(function () {\n          this.onselectstart = function () {\n            return false;\n          };\n        });\n      });\n    },\n    _enableSelection: function (b) {\n      b.each(function () {\n        a(this).attr(\"unselectable\", \"off\").css({\n          \"-ms-user-select\": \"text\",\n          \"-moz-user-select\": \"text\",\n          \"-webkit-user-select\": \"text\",\n          \"user-select\": \"text\"\n        }).each(function () {\n          this.onselectstart = null;\n        });\n      });\n    },\n    _mouseCapture: function (b) {\n      if (this.disabled) {\n        return false;\n      }\n\n      if (!this._getHandle(b)) {\n        return false;\n      }\n\n      this._disableSelection(this.host);\n\n      return true;\n    },\n    _getScrollParent: function (b) {\n      var c;\n\n      if (a.jqx.browser.msie && /(static|relative)/.test(b.css(\"position\")) || /absolute/.test(b.css(\"position\"))) {\n        c = b.parents().filter(function () {\n          return /(relative|absolute|fixed)/.test(a.css(this, \"position\", 1)) && /(auto|scroll)/.test(a.css(this, \"overflow\", 1) + a.css(this, \"overflow-y\", 1) + a.css(this, \"overflow-x\", 1));\n        }).eq(0);\n      } else {\n        c = b.parents().filter(function () {\n          return /(auto|scroll)/.test(a.css(this, \"overflow\", 1) + a.css(this, \"overflow-y\", 1) + a.css(this, \"overflow-x\", 1));\n        }).eq(0);\n      }\n\n      return /fixed/.test(b.css(\"position\")) || !c.length ? a(document) : c;\n    },\n    _mouseStart: function (e) {\n      var d = this._getMouseCoordinates(e),\n          c = this._getParentOffset(this.host);\n\n      this.feedback = this._createFeedback(e);\n      this._zIndexBackup = this.feedback.css(\"z-index\");\n      this.feedback[0].style.zIndex = this.dragZIndex;\n\n      this._backupFeedbackProportions();\n\n      this._backupeMargins();\n\n      this._positionType = this.feedback.css(\"position\");\n      this._scrollParent = this._getScrollParent(this.feedback);\n      this._offset = this.positionAbs = this.host.offset();\n      this._offset = {\n        top: this._offset.top - this.margins.top,\n        left: this._offset.left - this.margins.left\n      };\n      a.extend(this._offset, {\n        click: {\n          left: d.left - this._offset.left,\n          top: d.top - this._offset.top\n        },\n        parent: this._getParentOffset(),\n        relative: this._getRelativeOffset(),\n        hostRelative: this._getRelativeOffset(this.host)\n      });\n      this.position = this._generatePosition(e);\n      this.originalPosition = this._fixPosition();\n\n      if (this.restricter) {\n        this._setRestricter();\n      }\n\n      this.feedback.addClass(this.toThemeProperty(\"jqx-draggable-dragging\"));\n\n      var b = this._raiseEvent(0, e);\n\n      if (this.onDragStart && typeof this.onDragStart === \"function\") {\n        this.onDragStart(this.position);\n      }\n\n      this._mouseDrag(e, true);\n\n      return true;\n    },\n    _fixPosition: function () {\n      var c = this._getRelativeOffset(this.host),\n          b = this.position;\n\n      b = {\n        left: this.position.left + c.left,\n        top: this.position.top + c.top\n      };\n      return b;\n    },\n    _mouseDrag: function (b, c) {\n      this.position = this._generatePosition(b);\n      this.positionAbs = this._convertPositionTo(\"absolute\");\n      this.feedback[0].style.left = this.position.left + \"px\";\n      this.feedback[0].style.top = this.position.top + \"px\";\n\n      this._raiseEvent(2, b);\n\n      if (this.onDrag && typeof this.onDrag === \"function\") {\n        this.onDrag(this.data, this.position);\n      }\n\n      this._handleTarget();\n\n      return false;\n    },\n    _over: function (b, d, e) {\n      if (this.dropTarget) {\n        var f = false,\n            c = this;\n        a.each(this.dropTarget, function (g, h) {\n          f = c._overItem(h, b, d, e);\n\n          if (f.over) {\n            return false;\n          }\n        });\n      }\n\n      return f;\n    },\n    _overItem: function (i, c, e, g) {\n      i = a(i);\n      var b = i.offset(),\n          f = i.outerHeight(),\n          d = i.outerWidth(),\n          h;\n\n      if (!i || i[0] === this.element) {\n        return;\n      }\n\n      var h = false;\n\n      switch (this.tolerance) {\n        case \"intersect\":\n          if (c.left + e > b.left && c.left < b.left + d && c.top + g > b.top && c.top < b.top + f) {\n            h = true;\n          }\n\n          break;\n\n        case \"fit\":\n          if (e + c.left <= b.left + d && c.left >= b.left && g + c.top <= b.top + f && c.top >= b.top) {\n            h = true;\n          }\n\n          break;\n      }\n\n      return {\n        over: h,\n        target: i\n      };\n    },\n    _handleTarget: function () {\n      if (this.dropTarget) {\n        var b = this.feedback.offset(),\n            c = this.feedback.outerWidth(),\n            d = this.feedback.outerHeight(),\n            e = this._over(b, c, d);\n\n        if (e.over) {\n          if (this._targetEnterFired && e.target.length > 0 && this._oldtarget && this._oldtarget.length > 0 && e.target[0] != this._oldtarget[0]) {\n            this._raiseEvent(4, {\n              target: this._oldtarget\n            });\n\n            if (this.onDropTargetLeave && typeof this.onDropTargetLeave === \"function\") {\n              this.onDropTargetLeave(this._oldtarget);\n            }\n          }\n\n          if (!this._targetEnterFired || e.target.length > 0 && this._oldtarget && this._oldtarget.length > 0 && e.target[0] != this._oldtarget[0]) {\n            this._targetEnterFired = true;\n\n            this._raiseEvent(3, {\n              target: e.target\n            });\n\n            if (this.onDropTargetEnter && typeof this.onDropTargetEnter === \"function\") {\n              this.onDropTargetEnter(e.target);\n            }\n          }\n\n          this._oldtarget = e.target;\n        } else {\n          if (this._targetEnterFired) {\n            this._targetEnterFired = false;\n\n            this._raiseEvent(4, {\n              target: this._oldtarget || e.target\n            });\n\n            if (this.onDropTargetLeave && typeof this.onDropTargetLeave === \"function\") {\n              this.onDropTargetLeave(this._oldtarget || e.target);\n            }\n          }\n        }\n      }\n    },\n    _mouseStop: function (d) {\n      var e = false,\n          b = this._fixPosition(),\n          c = {\n        width: this.host.outerWidth(),\n        height: this.host.outerHeight()\n      };\n\n      this.feedback[0].style.opacity = this._oldOpacity;\n\n      if (!this.revert) {\n        this.feedback[0].style.zIndex = this._zIndexBackup;\n      }\n\n      this._enableSelection(this.host);\n\n      if (this.dropped) {\n        e = this.dropped;\n        this.dropped = false;\n      }\n\n      if ((!this.element || !this.element.parentNode) && this.feedback === \"original\") {\n        return false;\n      }\n\n      this._dropElement(b);\n\n      this.feedback.removeClass(this.toThemeProperty(\"jqx-draggable-dragging\"));\n\n      this._raiseEvent(1, d);\n\n      if (this.onDragEnd && typeof this.onDragEnd === \"function\") {\n        this.onDragEnd(this.data);\n      }\n\n      if (this.onTargetDrop && typeof this.onTargetDrop === \"function\" && this._over(b, c.width, c.height).over) {\n        this.onTargetDrop(this._over(b, c.width, c.height).target);\n      }\n\n      this._revertHandler();\n\n      return false;\n    },\n    _dropElement: function (b) {\n      if (this.dropAction === \"default\" && this.feedback && this.feedback[0] !== this.element && this.feedback !== \"original\") {\n        if (!this.revert) {\n          if (!/(fixed|absolute)/.test(this.host.css(\"position\"))) {\n            this.host.css(\"position\", \"relative\");\n\n            var c = this._getRelativeOffset(this.host);\n\n            b = this.position;\n            b.left -= c.left;\n            b.top -= c.top;\n            this.element.style.left = b.left + \"px\";\n            this.element.style.top = b.top + \"px\";\n          }\n        }\n      }\n    },\n    _revertHandler: function () {\n      if (this.revert || a.isFunction(this.revert) && this.revert()) {\n        var b = this;\n\n        if (this._feedbackType != \"original\") {\n          if (this.feedback != null) {\n            if (this.dropAction != \"none\") {\n              a(this.feedback).animate({\n                left: b.originalPosition.left - b._offset.hostRelative.left,\n                top: b.originalPosition.top - b._offset.hostRelative.top\n              }, parseInt(this.revertDuration, 10), function () {\n                if (b.feedback && b.feedback[0] && b._feedbackType !== \"original\" && typeof b.feedback.remove === \"function\") {\n                  b.feedback.remove();\n                }\n              });\n            } else {\n              if (b.feedback && b.feedback[0] && b._feedbackType !== \"original\" && typeof b.feedback.remove === \"function\") {\n                b.feedback.remove();\n              }\n            }\n          }\n        } else {\n          this.element.style.zIndex = this.dragZIndex;\n          a(this.host).animate({\n            left: b.originalPosition.left - b._offset.hostRelative.left,\n            top: b.originalPosition.top - b._offset.hostRelative.top\n          }, parseInt(this.revertDuration, 10), function () {\n            b.element.style.zIndex = b._zIndexBackup;\n          });\n        }\n      }\n    },\n    _getHandle: function (b) {\n      var c;\n\n      if (!this.handle) {\n        c = true;\n      } else {\n        a(this.handle, this.host).find(\"*\").andSelf().each(function () {\n          if (this == b.target) {\n            c = true;\n          }\n        });\n      }\n\n      return c;\n    },\n    _createFeedback: function (c) {\n      var b;\n\n      if (typeof this._feedbackType === \"function\") {\n        b = this._feedbackType();\n      } else {\n        if (this._feedbackType === \"clone\") {\n          b = this.host.clone().removeAttr(\"id\");\n        } else {\n          b = this.host;\n        }\n      }\n\n      if (!/(absolute|fixed)/.test(b.css(\"position\"))) {\n        b.css(\"position\", \"absolute\");\n      }\n\n      if (this.appendTo[0] !== this.host.parent()[0] || b[0] !== this.element) {\n        var d = {};\n        b.css({\n          left: this.host.offset().left - this._getParentOffset(this.host).left + this._getParentOffset(b).left,\n          top: this.host.offset().top - this._getParentOffset(this.host).top + this._getParentOffset(b).top\n        });\n        b.appendTo(this.appendTo);\n      }\n\n      if (typeof this.initFeedback === \"function\") {\n        this.initFeedback(b);\n      }\n\n      return b;\n    },\n    _getParentOffset: function (c) {\n      var c = c || this.feedback;\n      this._offsetParent = c.offsetParent();\n\n      var b = this._offsetParent.offset();\n\n      if (this._positionType == \"absolute\" && this._scrollParent[0] !== document && a.contains(this._scrollParent[0], this._offsetParent[0])) {\n        b.left += this._scrollParent.scrollLeft();\n        b.top += this._scrollParent.scrollTop();\n      }\n\n      if (this._offsetParent[0] == document.body || this._offsetParent[0].tagName && this._offsetParent[0].tagName.toLowerCase() == \"html\" && a.jqx.browser.msie) {\n        b = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      return {\n        top: b.top + (parseInt(this._offsetParent.css(\"border-top-width\"), 10) || 0),\n        left: b.left + (parseInt(this._offsetParent.css(\"border-left-width\"), 10) || 0)\n      };\n    },\n    _getRelativeOffset: function (c) {\n      var d = this._scrollParent || c.parent();\n      c = c || this.feedback;\n\n      if (c.css(\"position\") === \"relative\") {\n        var b = this.host.position();\n        return {\n          top: b.top - (parseInt(c.css(\"top\"), 10) || 0),\n          left: b.left - (parseInt(c.css(\"left\"), 10) || 0)\n        };\n      } else {\n        return {\n          top: 0,\n          left: 0\n        };\n      }\n    },\n    _backupeMargins: function () {\n      this.margins = {\n        left: parseInt(this.host.css(\"margin-left\"), 10) || 0,\n        top: parseInt(this.host.css(\"margin-top\"), 10) || 0,\n        right: parseInt(this.host.css(\"margin-right\"), 10) || 0,\n        bottom: parseInt(this.host.css(\"margin-bottom\"), 10) || 0\n      };\n    },\n    _backupFeedbackProportions: function () {\n      this.feedback[0].style.opacity = this.opacity;\n      this._feedbackProportions = {\n        width: this.feedback.outerWidth(),\n        height: this.feedback.outerHeight()\n      };\n    },\n    _setRestricter: function () {\n      if (this.restricter == \"parent\") {\n        this.restricter = this.feedback[0].parentNode;\n      }\n\n      if (this.restricter == \"document\" || this.restricter == \"window\") {\n        this._handleNativeRestricter();\n      }\n\n      if (typeof this.restricter.left !== \"undefined\" && typeof this.restricter.top !== \"undefined\" && typeof this.restricter.height !== \"undefined\" && typeof this.restricter.width !== \"undefined\") {\n        this._restricter = [this.restricter.left, this.restricter.top, this.restricter.width, this.restricter.height];\n      } else {\n        if (!/^(document|window|parent)$/.test(this.restricter) && this.restricter.constructor != Array) {\n          this._handleDOMParentRestricter();\n        } else {\n          if (this.restricter.constructor == Array) {\n            this._restricter = this.restricter;\n          }\n        }\n      }\n    },\n    _handleNativeRestricter: function () {\n      this._restricter = [this.restricter === \"document\" ? 0 : a(window).scrollLeft() - this._offset.relative.left - this._offset.parent.left, this.restricter === \"document\" ? 0 : a(window).scrollTop() - this._offset.relative.top - this._offset.parent.top, (this.restricter === \"document\" ? 0 : a(window).scrollLeft()) + a(this.restricter === \"document\" ? document : window).width() - this._feedbackProportions.width - this.margins.left, (this.restricter === \"document\" ? 0 : a(window).scrollTop()) + (a(this.restricter === \"document\" ? document : window).height() || document.body.parentNode.scrollHeight) - this._feedbackProportions.height - this.margins.top];\n    },\n    _handleDOMParentRestricter: function () {\n      var d = a(this.restricter),\n          b = d[0];\n\n      if (!b) {\n        return;\n      }\n\n      var c = a(b).css(\"overflow\") !== \"hidden\";\n      this._restricter = [(parseInt(a(b).css(\"borderLeftWidth\"), 10) || 0) + (parseInt(a(b).css(\"paddingLeft\"), 10) || 0), (parseInt(a(b).css(\"borderTopWidth\"), 10) || 0) + (parseInt(a(b).css(\"paddingTop\"), 10) || 0), (c ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(a(b).css(\"borderLeftWidth\"), 10) || 0) - (parseInt(a(b).css(\"paddingRight\"), 10) || 0) - this._feedbackProportions.width - this.margins.left - this.margins.right, (c ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(a(b).css(\"borderTopWidth\"), 10) || 0) - (parseInt(a(b).css(\"paddingBottom\"), 10) || 0) - this._feedbackProportions.height - this.margins.top - this.margins.bottom];\n      this._restrictiveContainer = d;\n    },\n    _convertPositionTo: function (f, c) {\n      if (!c) {\n        c = this.position;\n      }\n\n      var e, b, g;\n\n      if (f === \"absolute\") {\n        e = 1;\n      } else {\n        e = -1;\n      }\n\n      if (this._positionType === \"absolute\" && !(this._scrollParent[0] != document && a.contains(this._scrollParent[0], this._offsetParent[0]))) {\n        b = this._offsetParent;\n      } else {\n        b = this._scrollParent;\n      }\n\n      g = /(html|body)/i.test(b[0].tagName);\n      return this._getPosition(c, e, g, b);\n    },\n    _getPosition: function (c, d, e, b) {\n      return {\n        top: c.top + this._offset.relative.top * d + this._offset.parent.top * d - (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == \"fixed\" ? 0 : (this._positionType == \"fixed\" ? -this._scrollParent.scrollTop() : e ? 0 : b.scrollTop()) * d),\n        left: c.left + this._offset.relative.left * d + this._offset.parent.left * d - (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == \"fixed\" ? 0 : (this._positionType == \"fixed\" ? -this._scrollParent.scrollLeft() : e ? 0 : b.scrollLeft()) * d)\n      };\n    },\n    _generatePosition: function (f) {\n      var b = this._positionType == \"absolute\" && !(this._scrollParent[0] != document && a.contains(this._scrollParent[0], this._offsetParent[0])) ? this._offsetParent : this._scrollParent,\n          i = /(html|body)/i.test(b[0].tagName);\n\n      var e = this._getMouseCoordinates(f),\n          d = e.left,\n          c = e.top;\n\n      if (this.originalPosition) {\n        var h;\n\n        if (this.restricter) {\n          if (this._restrictiveContainer) {\n            var g = this._restrictiveContainer.offset();\n\n            h = [this._restricter[0] + g.left, this._restricter[1] + g.top, this._restricter[2] + g.left, this._restricter[3] + g.top];\n          } else {\n            h = this._restricter;\n          }\n\n          if (e.left - this._offset.click.left < h[0]) {\n            d = h[0] + this._offset.click.left;\n          }\n\n          if (e.top - this._offset.click.top < h[1]) {\n            c = h[1] + this._offset.click.top;\n          }\n\n          if (e.left - this._offset.click.left > h[2]) {\n            d = h[2] + this._offset.click.left;\n          }\n\n          if (e.top - this._offset.click.top > h[3]) {\n            c = h[3] + this._offset.click.top;\n          }\n        }\n      }\n\n      return {\n        top: c - this._offset.click.top - this._offset.relative.top - this._offset.parent.top + (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == \"fixed\" ? 0 : this._positionType == \"fixed\" ? -this._scrollParent.scrollTop() : i ? 0 : b.scrollTop()),\n        left: d - this._offset.click.left - this._offset.relative.left - this._offset.parent.left + (a.jqx.browser.safari && a.jqx.browser.version < 526 && this._positionType == \"fixed\" ? 0 : this._positionType == \"fixed\" ? -this._scrollParent.scrollLeft() : i ? 0 : b.scrollLeft())\n      };\n    },\n    _raiseEvent: function (c, e) {\n      if (this.triggerEvents != undefined && this.triggerEvents == false) {\n        return;\n      }\n\n      var b = this._events[c],\n          d = a.Event(b),\n          e = e || {};\n      e.position = this.position;\n      e.element = this.element;\n      a.extend(e, this.data);\n      e.feedback = this.feedback;\n      d.args = e;\n      return this.host.trigger(d);\n    },\n    disable: function () {\n      this.disabled = true;\n      this.host.addClass(this.toThemeProperty(\"jqx-draggable-disabled\"));\n\n      this._enableSelection(this.host);\n    },\n    enable: function () {\n      this.disabled = false;\n      this.host.removeClass(this.toThemeProperty(\"jqx-draggable-disabled\"));\n    },\n    propertyChangedHandler: function (b, c, e, d) {\n      if (c === \"dropTarget\") {\n        if (typeof d === \"string\") {\n          b.dropTarget = a(d);\n        }\n      } else {\n        if (c == \"disabled\") {\n          if (d) {\n            b._enableSelection(b.host);\n          }\n        } else {\n          if (c == \"cursor\") {\n            b.host.css(\"cursor\", b.cursor);\n          }\n        }\n      }\n    }\n  });\n})(jqxBaseFramework);\n\n(function (a) {\n  window.jqxListBoxDragDrop = function () {\n    a.extend(a.jqx._jqxListBox.prototype, {\n      _hitTestBounds: function (b, c, e) {\n        var f = b.host.offset();\n        var g = e - parseInt(f.top);\n        var i = c - parseInt(f.left);\n\n        var k = b._hitTest(i, g);\n\n        if (g < 0) {\n          return null;\n        }\n\n        if (k != null) {\n          var d = parseInt(f.left);\n          var j = d + b.host.width();\n\n          if (d <= c + k.width / 2 && c <= j) {\n            return k;\n          }\n\n          return null;\n        }\n\n        if (b.items && b.items.length > 0) {\n          var h = b.items[b.items.length - 1];\n\n          if (b.groups.length < 2) {\n            if (h.top + h.height + 15 >= g) {\n              return h;\n            }\n          }\n        }\n\n        return null;\n      },\n      _handleDragStart: function (d, c) {\n        var b = a.jqx.mobile.isTouchDevice();\n\n        if (b) {\n          if (c.allowDrag) {\n            d.on(a.jqx.mobile.getTouchEventName(\"touchstart\"), function () {\n              a.jqx.mobile.setTouchScroll(false, c.element.id);\n            });\n          }\n        }\n\n        d.off(\"dragStart\");\n        d.on(\"dragStart\", function (h) {\n          if (c.allowDrag && !c.disabled) {\n            c.feedbackElement = a(\"<div style='z-index: 99999; position: absolute;'></div>\");\n            c.feedbackElement.addClass(c.toThemeProperty(\"jqx-listbox-feedback\"));\n            c.feedbackElement.appendTo(a(document.body));\n            c.feedbackElement.hide();\n            c.isDragging = true;\n            c._dragCancel = false;\n\n            var j = c._getMouseCoordinates(h);\n\n            var g = c._hitTestBounds(c, j.left, j.top);\n\n            var i = a.find(\".jqx-listbox\");\n            c._listBoxes = i;\n            a.each(c._listBoxes, function () {\n              if (a.jqx.isHidden(a(this))) {\n                return;\n              }\n\n              var k = a.data(this, \"jqxListBox\").instance;\n              k._enableHover = k.enableHover;\n              k.enableHover = false;\n              a.jqx.mobile.setTouchScroll(false, c.element.id);\n            });\n\n            var f = function () {\n              c._dragCancel = true;\n              a(h.args.element).jqxDragDrop({\n                triggerEvents: false\n              });\n              a(h.args.element).jqxDragDrop(\"cancelDrag\");\n              clearInterval(c._autoScrollTimer);\n              a(h.args.element).jqxDragDrop({\n                triggerEvents: true\n              });\n              a.each(c._listBoxes, function () {\n                if (a.jqx.isHidden(a(this))) {\n                  return;\n                }\n\n                var k = a.data(this, \"jqxListBox\").instance;\n\n                if (k._enableHover != undefined) {\n                  k.enableHover = k._enableHover;\n                  a.jqx.mobile.setTouchScroll(true, c.element.id);\n                }\n              });\n            };\n\n            if (g != null && !g.isGroup) {\n              c._dragItem = g;\n\n              if (c.dragStart) {\n                var e = c.dragStart(g);\n\n                if (e == false) {\n                  f();\n                  return false;\n                }\n              }\n\n              if (g.disabled) {\n                f();\n              }\n\n              c._raiseEvent(4, {\n                label: g.label,\n                value: g.value,\n                dragSourceElement: c.element,\n                originalEvent: h.args\n              });\n            } else {\n              if (g == null) {\n                f();\n              }\n            }\n          }\n\n          return false;\n        });\n      },\n      _handleDragging: function (d, c) {\n        var b = this;\n        d.off(\"dragging\");\n        d.on(\"dragging\", function (g) {\n          var e = g.args;\n\n          if (c._dragCancel) {\n            return;\n          }\n\n          var h = c._getMouseCoordinates(g);\n\n          c._lastDraggingPosition = h;\n          c._dragOverItem = null;\n          c.feedbackElement.hide();\n\n          var f = b._getBestMatchItem(c, h);\n\n          a.each(c._listBoxes, function () {\n            if (a.jqx.isHidden(a(this))) {\n              return true;\n            }\n\n            var m = a(this).offset();\n            var o = m.top + 20;\n            var i = a(this).height() + o - 40;\n            var k = m.left;\n            var j = a(this).width();\n            var p = k + j;\n            var n = a.data(this, \"jqxListBox\").instance;\n\n            var q = n._hitTestBounds(n, h.left, h.top);\n\n            var l = n.vScrollInstance;\n\n            if (!q) {\n              return;\n            }\n\n            if (!n.allowDrop || n.disabled || !q.element) {\n              return;\n            }\n\n            if (!f || !f.item || a(this)[0] != f.item[0]) {\n              return;\n            }\n\n            c._dragOverItem = q;\n            c.feedbackElement.show();\n            var r = a(q.element).offset().top + 1;\n\n            if (h.top > r + q.height / 2) {\n              r = r + q.height;\n            }\n\n            c.feedbackElement.css(\"top\", r);\n            c.feedbackElement.css(\"left\", k);\n\n            if (n.vScrollBar.css(\"visibility\") != \"visible\") {\n              c.feedbackElement.width(a(this).width());\n            } else {\n              c.feedbackElement.width(a(this).width() - 20);\n            }\n\n            if (h.left >= k && h.left < p) {\n              if (e.position.top < o && e.position.top >= o - 30) {\n                clearInterval(n._autoScrollTimer);\n\n                if (l.value != 0) {\n                  c.feedbackElement.hide();\n                }\n\n                n._autoScrollTimer = setInterval(function () {\n                  var s = n.scrollUp();\n\n                  if (!s) {\n                    clearInterval(n._autoScrollTimer);\n                  }\n                }, 100);\n              } else {\n                if (e.position.top > i && e.position.top < i + 30) {\n                  clearInterval(n._autoScrollTimer);\n\n                  if (n.vScrollBar.css(\"visibility\") != \"hidden\" && l.value != l.max) {\n                    c.feedbackElement.hide();\n                  }\n\n                  n._autoScrollTimer = setInterval(function () {\n                    var s = n.scrollDown();\n\n                    if (!s) {\n                      clearInterval(n._autoScrollTimer);\n                    }\n                  }, 100);\n                } else {\n                  clearInterval(n._autoScrollTimer);\n                }\n              }\n            } else {\n              if (c._dragOverItem == null) {\n                c.feedbackElement.hide();\n              }\n\n              clearInterval(n._autoScrollTimer);\n            }\n          });\n        });\n      },\n      _getBestMatchItem: function (n, l) {\n        var k = {};\n        var d = a.find(\".jqx-listbox\");\n\n        for (var j = 0; j < d.length; j++) {\n          var f = a(d[j]);\n\n          if (a.jqx.isHidden(f)) {\n            continue;\n          }\n\n          var h = parseInt(f.offset().left);\n          var q = h + f.width();\n          var p = f.jqxListBox(\"getInstance\");\n          clearInterval(p._autoScrollTimer);\n\n          if (p._enableHover != undefined) {\n            p.enableHover = p._enableHover;\n            a.jqx.mobile.setTouchScroll(true, n.element.id);\n          }\n\n          if (n._dragItem != null) {\n            var e = l.left >= h && l.left <= q;\n            var g = l.left - n._dragItem.width / 2 >= h && l.left - n._dragItem.width / 2 <= q;\n            var m = l.left - n._dragItem.width / 2 >= h && l.left - n._dragItem.width / 2 <= q;\n\n            if (e || g || m) {\n              var o = parseInt(f.offset().top);\n              var b = o + f.height();\n\n              if (l.top >= o && l.top <= b) {\n                var c = l.left + n._dragItem.width / 2 - (h + q) / 2;\n\n                if (isNaN(k.distance) || k.distance > c) {\n                  k = {\n                    distance: c,\n                    item: f\n                  };\n                }\n              }\n            }\n          }\n        }\n\n        return k;\n      },\n      _handleDragEnd: function (d, c) {\n        var b = this;\n        var e = a.find(\".jqx-listbox\");\n        d.off(\"dragEnd\");\n        d.on(\"dragEnd\", function (g) {\n          clearInterval(c._autoScrollTimer);\n          var r = a.jqx.mobile.isTouchDevice();\n          var m = r ? c._lastDraggingPosition : c._getMouseCoordinates(g);\n          var h = a.find(\".jqx-listbox\");\n          c.feedbackElement.remove();\n\n          if (c._dragCancel) {\n            g.stopPropagation();\n            return;\n          }\n\n          var l = b._getBestMatchItem(c, m);\n\n          var i = l.item;\n          var v = c._dragItem;\n          var q = null;\n\n          if (i != null && i.length > 0) {\n            var p = a.data(i[0], \"jqxListBox\").instance;\n            var n = p.allowDrop;\n            q = p.element;\n\n            if (n && !p.disabled) {\n              var p = a.data(i[0], \"jqxListBox\").instance;\n\n              var s = p._hitTestBounds(p, m.left, m.top);\n\n              s = c._dragOverItem;\n\n              if (s != null && !s.isGroup) {\n                var u = true;\n\n                if (c.dragEnd) {\n                  u = c.dragEnd(v, s, g.args);\n\n                  if (u == false) {\n                    a(g.args.element).jqxDragDrop({\n                      triggerEvents: false\n                    });\n                    a(g.args.element).jqxDragDrop(\"cancelDrag\");\n                    clearInterval(c._autoScrollTimer);\n                    a(g.args.element).jqxDragDrop({\n                      triggerEvents: true\n                    });\n\n                    if (g.preventDefault) {\n                      g.preventDefault();\n                    }\n\n                    if (g.stopPropagation) {\n                      g.stopPropagation();\n                    }\n\n                    return false;\n                  }\n\n                  if (u == undefined) {\n                    u = true;\n                  }\n                }\n\n                if (u) {\n                  var f = s.visibleIndex;\n\n                  var k = function () {\n                    var x = s.visibleIndex;\n\n                    for (var w = x - 2; w <= x + 2; w++) {\n                      if (p.items && p.items.length > w) {\n                        var y = p.items[w];\n\n                        if (y != null) {\n                          if (y.value == v.value) {\n                            return y.visibleIndex;\n                          }\n                        }\n                      }\n                    }\n\n                    return x;\n                  };\n\n                  if (p.dropAction != \"none\") {\n                    if (s.element) {\n                      var t = a(s.element).offset().top + 1;\n                    } else {\n                      var t = a(p.element).offset().top + 1;\n                    }\n\n                    if (p.content.find(\".draggable\").length > 0) {\n                      p.content.find(\".draggable\").jqxDragDrop(\"destroy\");\n                    }\n\n                    if (m.top > t + s.height / 2) {\n                      p.insertAt(c._dragItem, s.index + 1);\n                    } else {\n                      p.insertAt(c._dragItem, s.index);\n                    }\n\n                    if (c.dropAction == \"default\") {\n                      if (v.visibleIndex > 0) {\n                        c.clearSelection();\n                        c.selectIndex(v.visibleIndex - 1);\n                      }\n\n                      c.removeItem(v, true);\n                    }\n\n                    var o = k();\n                    p.clearSelection();\n                    p.selectIndex(o);\n                  }\n                }\n              } else {\n                if (p.dropAction != \"none\") {\n                  if (p.content.find(\".draggable\").length > 0) {\n                    p.content.find(\".draggable\").jqxDragDrop(\"destroy\");\n                  }\n\n                  if (c.dragEnd) {\n                    var u = c.dragEnd(c._dragItem, null, g.args);\n\n                    if (u == false) {\n                      a(g.args.element).jqxDragDrop({\n                        triggerEvents: false\n                      });\n                      a(g.args.element).jqxDragDrop(\"cancelDrag\");\n                      clearInterval(c._autoScrollTimer);\n                      a(g.args.element).jqxDragDrop({\n                        triggerEvents: true\n                      });\n\n                      if (g.preventDefault) {\n                        g.preventDefault();\n                      }\n\n                      if (g.stopPropagation) {\n                        g.stopPropagation();\n                      }\n\n                      return false;\n                    }\n\n                    if (u == undefined) {\n                      u = true;\n                    }\n                  }\n\n                  p.addItem(c._dragItem);\n\n                  if (p.dropAction == \"default\") {\n                    if (v.visibleIndex > 0) {\n                      c.selectIndex(v.visibleIndex - 1);\n                    }\n\n                    c.removeItem(v, true);\n                  }\n\n                  p.clearSelection();\n                  p.selectIndex(p.items.length - 1);\n                }\n              }\n            }\n          } else {\n            if (c.dragEnd) {\n              var j = c.dragEnd(v, g.args);\n\n              if (false == j) {\n                if (g.preventDefault) {\n                  g.preventDefault();\n                }\n\n                if (g.stopPropagation) {\n                  g.stopPropagation();\n                }\n\n                return false;\n              }\n            }\n          }\n\n          if (v != null) {\n            c._raiseEvent(5, {\n              label: v.label,\n              value: v.value,\n              index: v.index,\n              dropTargetElement: q,\n              originalEvent: g.args\n            });\n          }\n\n          return false;\n        });\n      },\n      _enableDragDrop: function () {\n        if (this.allowDrag && this.host.jqxDragDrop) {\n          var c = this.content.find(\".draggable\");\n\n          if (c.length > 0) {\n            var b = this;\n            c.jqxDragDrop({\n              cursor: \"arrow\",\n              revertDuration: 0,\n              appendTo: \"body\",\n              dragZIndex: 99999,\n              revert: true,\n              initFeedback: function (d) {\n                var f = a('<span style=\"white-space: nowrap;\" class=\"' + b.toThemeProperty(\"jqx-fill-state-normal\") + '\">' + d.text() + \"</span>\");\n                a(document.body).append(f);\n                var e = f.width();\n                f.remove();\n                d.width(e + 5);\n                d.addClass(b.toThemeProperty(\"jqx-fill-state-pressed\"));\n              }\n            });\n            this._autoScrollTimer = null;\n            b._dragItem = null;\n\n            b._handleDragStart(c, b);\n\n            b._handleDragging(c, b);\n\n            b._handleDragEnd(c, b);\n          }\n        }\n      },\n      _getMouseCoordinates: function (b) {\n        this._isTouchDevice = a.jqx.mobile.isTouchDevice();\n\n        if (this._isTouchDevice) {\n          var c = a.jqx.position(b.args);\n          return {\n            left: c.left,\n            top: c.top\n          };\n        } else {\n          return {\n            left: b.args.pageX,\n            top: b.args.pageY\n          };\n        }\n      }\n    });\n  };\n\n  window.jqxTreeDragDrop = function () {\n    a.extend(a.jqx._jqxTree.prototype, {\n      _hitTestBounds: function (b, g, f) {\n        var d = this;\n        var e = null;\n\n        if (b._visibleItems) {\n          var c = parseInt(b.host.offset().left);\n          var h = b.host.outerWidth();\n          a.each(b._visibleItems, function (j) {\n            if (g >= c && g < c + h) {\n              if (this.top + 5 < f && f < this.top + this.height) {\n                var i = a(this.element).parents(\"li:first\");\n\n                if (i.length > 0) {\n                  e = b.getItem(i[0]);\n\n                  if (e != null) {\n                    e.height = this.height;\n                    e.top = this.top;\n                    return false;\n                  }\n                }\n              }\n            }\n          });\n        }\n\n        return e;\n      },\n      _handleDragStart: function (d, c) {\n        if (c._dragOverItem) {\n          c._dragOverItem.titleElement.removeClass(c.toThemeProperty(\"jqx-fill-state-hover\"));\n        }\n\n        var b = a.jqx.mobile.isTouchDevice();\n\n        if (b) {\n          if (c.allowDrag) {\n            d.on(a.jqx.mobile.getTouchEventName(\"touchstart\"), function () {\n              a.jqx.mobile.setTouchScroll(false, \"panel\" + c.element.id);\n            });\n          }\n        }\n\n        d.off(\"dragStart\");\n        d.on(\"dragStart\", function (g) {\n          c.feedbackElement = a(\"<div style='z-index: 99999; position: absolute;'></div>\");\n          c.feedbackElement.addClass(c.toThemeProperty(\"jqx-listbox-feedback\"));\n          c.feedbackElement.appendTo(a(document.body));\n          c.feedbackElement.hide();\n          c._dragCancel = false;\n          var e = g.args.position;\n          var f = a.find(\".jqx-tree\");\n          c._trees = f;\n          a.each(f, function () {\n            var j = a.data(this, \"jqxTree\").instance;\n            var l = j.host.find(\".draggable\");\n\n            j._syncItems(l);\n\n            if (j.allowDrag && !j.disabled) {\n              var i = a(g.target).parents(\"li:first\");\n\n              if (i.length > 0) {\n                var k = j.getItem(i[0]);\n\n                if (k) {\n                  c._dragItem = k;\n\n                  if (j.dragStart) {\n                    var h = j.dragStart(k);\n\n                    if (h == false) {\n                      c._dragCancel = true;\n                      a(g.args.element).jqxDragDrop({\n                        triggerEvents: false\n                      });\n                      a(g.args.element).jqxDragDrop(\"cancelDrag\");\n                      clearInterval(c._autoScrollTimer);\n                      a(g.args.element).jqxDragDrop({\n                        triggerEvents: j\n                      });\n                      return false;\n                    }\n                  }\n\n                  j._raiseEvent(8, {\n                    label: k.label,\n                    value: k.value,\n                    originalEvent: g.args\n                  });\n                }\n              }\n            }\n          });\n          return false;\n        });\n      },\n      _getMouseCoordinates: function (b) {\n        this._isTouchDevice = a.jqx.mobile.isTouchDevice();\n\n        if (this._isTouchDevice) {\n          var c = a.jqx.position(b.args);\n          return {\n            left: c.left,\n            top: c.top\n          };\n        } else {\n          return {\n            left: b.args.pageX,\n            top: b.args.pageY\n          };\n        }\n      },\n      _handleDragging: function (c, b) {\n        var c = this.host.find(\".draggable\");\n        c.off(\"dragging\");\n        c.on(\"dragging\", function (h) {\n          var f = h.args;\n          var d = f.position;\n          var e = b._trees;\n\n          if (b._dragCancel) {\n            return;\n          }\n\n          if (b._dragOverItem) {\n            b._dragOverItem.titleElement.removeClass(b.toThemeProperty(\"jqx-fill-state-hover\"));\n          }\n\n          var i = true;\n\n          var g = b._getMouseCoordinates(h);\n\n          b._lastDraggingPosition = g;\n          a.each(e, function () {\n            if (a.jqx.isHidden(a(this))) {\n              return true;\n            }\n\n            var m = a(this).offset();\n            var q = m.top + 20;\n            var j = a(this).height() + q - 40;\n            var l = m.left;\n            var k = a(this).width();\n            var r = l + k;\n            var p = a.data(this, \"jqxTree\").instance;\n\n            if (p.disabled || !p.allowDrop) {\n              return;\n            }\n\n            var n = p.vScrollInstance;\n\n            var s = p._hitTestBounds(p, g.left, g.top);\n\n            if (s != null) {\n              if (b._dragOverItem) {\n                b._dragOverItem.titleElement.removeClass(p.toThemeProperty(\"jqx-fill-state-hover\"));\n              }\n\n              b._dragOverItem = s;\n\n              if (s.element) {\n                b.feedbackElement.show();\n                var t = s.top;\n                var o = g.top;\n                b._dropPosition = \"before\";\n\n                if (o > t + s.height / 3) {\n                  t = s.top + s.height / 2;\n\n                  b._dragOverItem.titleElement.addClass(b.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                  b.feedbackElement.hide();\n                  b._dropPosition = \"inside\";\n                }\n\n                if (o > s.top + s.height - s.height / 3) {\n                  t = s.top + s.height;\n\n                  b._dragOverItem.titleElement.removeClass(b.toThemeProperty(\"jqx-fill-state-hover\"));\n\n                  b.feedbackElement.show();\n                  b._dropPosition = \"after\";\n                }\n\n                b.feedbackElement.css(\"top\", t);\n                var l = -2 + parseInt(s.titleElement.offset().left);\n                b.feedbackElement.css(\"left\", l);\n                b.feedbackElement.width(a(s.titleElement).width() + 12);\n              }\n            }\n\n            if (g.left >= l && g.left < r) {\n              if (g.top + 20 >= q && g.top <= q + p.host.height()) {\n                i = false;\n              }\n\n              if (g.top < q && g.top >= q - 30) {\n                clearInterval(p._autoScrollTimer);\n\n                if (n.value != 0) {\n                  b.feedbackElement.hide();\n                }\n\n                p._autoScrollTimer = setInterval(function () {\n                  var v = p.panelInstance.scrollUp();\n                  var u = p.host.find(\".draggable\");\n\n                  p._syncItems(u);\n\n                  if (!v) {\n                    clearInterval(p._autoScrollTimer);\n                  }\n                }, 100);\n              } else {\n                if (g.top > j && g.top < j + 30) {\n                  clearInterval(p._autoScrollTimer);\n\n                  if (n.value != n.max) {\n                    b.feedbackElement.hide();\n                  }\n\n                  p._autoScrollTimer = setInterval(function () {\n                    var v = p.panelInstance.scrollDown();\n                    var u = p.host.find(\".draggable\");\n\n                    p._syncItems(u);\n\n                    if (!v) {\n                      clearInterval(p._autoScrollTimer);\n                    }\n                  }, 100);\n                } else {\n                  clearInterval(p._autoScrollTimer);\n                }\n              }\n            } else {\n              clearInterval(p._autoScrollTimer);\n            }\n          });\n\n          if (i) {\n            if (b.feedbackElement) {\n              b.feedbackElement.hide();\n            }\n          }\n        });\n      },\n      _handleDragEnd: function (c, b) {\n        c.off(\"dragEnd\");\n        c.on(\"dragEnd\", function (f) {\n          var d = b.host.find(\".draggable\");\n          clearInterval(b._autoScrollTimer);\n          var k = f.args.position;\n          var s = b._trees;\n          var t = null;\n          var n = a.jqx.mobile.isTouchDevice();\n          var g = n ? b._lastDraggingPosition : b._getMouseCoordinates(f);\n          b.feedbackElement.remove();\n\n          if (b._dragCancel) {\n            return false;\n          }\n\n          if (b._dragOverItem) {\n            b._dragOverItem.titleElement.removeClass(b.toThemeProperty(\"jqx-fill-state-hover\"));\n          }\n\n          a.each(s, function () {\n            if (a.jqx.isHidden(a(this))) {\n              return true;\n            }\n\n            var y = parseInt(a(this).offset().left);\n            var w = y + a(this).width();\n            var v = a.data(this, \"jqxTree\").instance;\n            clearInterval(v._autoScrollTimer);\n\n            if (b._dragItem != null) {\n              if (g.left >= y && g.left < w) {\n                var x = parseInt(a(this).offset().top);\n                var u = x + a(this).height();\n\n                if (g.top >= x && g.top <= u) {\n                  t = a(this);\n                }\n              }\n            }\n          });\n          var r = b._dragItem;\n\n          if (t != null && t.length > 0) {\n            var l = t.jqxTree(\"allowDrop\");\n\n            if (l) {\n              var m = a.data(t[0], \"jqxTree\").instance;\n              var o = b._dragOverItem;\n\n              if (o != null && b._dragOverItem.treeInstance.element.id == m.element.id) {\n                var q = true;\n\n                if (b.dragEnd) {\n                  q = b.dragEnd(r, o, f.args, b._dropPosition, t);\n\n                  if (q == false) {\n                    a(f.args.element).jqxDragDrop({\n                      triggerEvents: false\n                    });\n                    a(f.args.element).jqxDragDrop(\"cancelDrag\");\n                    clearInterval(b._autoScrollTimer);\n                    a(f.args.element).jqxDragDrop({\n                      triggerEvents: true\n                    });\n                  }\n\n                  if (undefined == q) {\n                    q = true;\n                  }\n                }\n\n                if (q) {\n                  var e = function () {\n                    var u = b._dragItem.treeInstance;\n\n                    u._refreshMapping();\n\n                    u._updateItemsNavigation();\n\n                    u._render(true, false);\n\n                    if (u.checkboxes) {\n                      u._updateCheckStates();\n                    }\n\n                    b._dragItem.treeInstance = m;\n\n                    b._syncItems(b._dragItem.treeInstance.host.find(\".draggable\"));\n                  };\n\n                  if (m.dropAction != \"none\") {\n                    if (b._dragItem.id != b._dragOverItem.id) {\n                      if (b._dropPosition == \"inside\") {\n                        m._drop(b._dragItem.element, b._dragOverItem.element, -1, m);\n\n                        e();\n                      } else {\n                        var i = 0;\n\n                        if (b._dropPosition == \"after\") {\n                          i++;\n                        }\n\n                        m._drop(b._dragItem.element, b._dragOverItem.parentElement, i + a(b._dragOverItem.element).index(), m);\n\n                        e();\n                      }\n                    }\n                  }\n\n                  m._render(true, false);\n\n                  var p = m.host.find(\".draggable\");\n\n                  b._syncItems(p);\n\n                  b._dragOverItem = null;\n                  b._dragItem = null;\n\n                  m._refreshMapping();\n\n                  m._updateItemsNavigation();\n\n                  m.selectedItem = null;\n                  m.selectItem(r.element);\n\n                  if (m.checkboxes) {\n                    m._updateCheckStates();\n                  }\n\n                  m._render(true, false);\n                }\n              } else {\n                if (m.dropAction != \"none\") {\n                  if (m.allowDrop) {\n                    var q = true;\n\n                    if (b.dragEnd) {\n                      q = b.dragEnd(r, o, f.args, b._dropPosition, t);\n\n                      if (q == false) {\n                        a(f.args.element).jqxDragDrop({\n                          triggerEvents: false\n                        });\n                        a(f.args.element).jqxDragDrop(\"cancelDrag\");\n                        clearInterval(b._autoScrollTimer);\n                        a(f.args.element).jqxDragDrop({\n                          triggerEvents: true\n                        });\n                      }\n\n                      if (undefined == q) {\n                        q = true;\n                      }\n                    }\n\n                    if (q) {\n                      b._dragItem.parentElement = null;\n\n                      m._drop(b._dragItem.element, null, -1, m);\n\n                      var h = b._dragItem.treeInstance;\n\n                      h._refreshMapping();\n\n                      h._updateItemsNavigation();\n\n                      if (h.checkboxes) {\n                        h._updateCheckStates();\n                      }\n\n                      var p = h.host.find(\".draggable\");\n\n                      b._syncItems(p);\n\n                      b._dragItem.treeInstance = m;\n                      m.items[m.items.length] = b._dragItem;\n\n                      m._render(true, false);\n\n                      m._refreshMapping();\n\n                      m.selectItem(r.element);\n\n                      m._updateItemsNavigation();\n\n                      var p = m.host.find(\".draggable\");\n\n                      m._syncItems(p);\n\n                      if (m.checkboxes) {\n                        m._updateCheckStates();\n                      }\n\n                      b._dragOverItem = null;\n                      b._dragItem = null;\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (b.dragEnd) {\n              var j = b.dragEnd(r, f.args);\n\n              if (false == j) {\n                return false;\n              }\n            }\n          }\n\n          if (r != null) {\n            b._raiseEvent(7, {\n              label: r.label,\n              value: r.value,\n              originalEvent: f.args\n            });\n          }\n\n          return false;\n        });\n      },\n      _drop: function (d, i, f, g) {\n        if (a(i).parents(\"#\" + d.id).length > 0) {\n          return;\n        }\n\n        if (i != null) {\n          if (i.id == d.id) {\n            return;\n          }\n        }\n\n        var h = this;\n\n        if (g.element.innerHTML.indexOf(\"UL\")) {\n          var e = g.host.find(\"ul:first\");\n        }\n\n        if (i == undefined && i == null) {\n          if (f == undefined || f == -1) {\n            e.append(d);\n          } else {\n            if (e.children(\"li\").eq(f).length == 0) {\n              e.children(\"li\").eq(f - 1).after(d);\n            } else {\n              if (e.children(\"li\").eq(f)[0].id != d.id) {\n                e.children(\"li\").eq(f).before(d);\n              }\n            }\n          }\n        } else {\n          if (f == undefined || f == -1) {\n            i = a(i);\n            var c = i.find(\"ul:first\");\n\n            if (c.length == 0) {\n              var b = a(\"<ul></ul>\");\n              a(i).append(b);\n              c = i.find(\"ul:first\");\n              var j = g.itemMapping[\"id\" + i[0].id].item;\n              j.subtreeElement = c[0];\n              j.hasItems = true;\n              c.addClass(g.toThemeProperty(\"jqx-tree-dropdown\"));\n              c.append(d);\n              d = c.find(\"li:first\");\n              j.parentElement = d;\n            } else {\n              c.append(d);\n            }\n          } else {\n            i = a(i);\n            var c = i.find(\"ul:first\");\n\n            if (c.length == 0) {\n              var b = a(\"<ul></ul>\");\n              a(i).append(b);\n              c = i.find(\"ul:first\");\n\n              if (i) {\n                var j = g.itemMapping[\"id\" + i[0].id].item;\n                j.subtreeElement = c[0];\n                j.hasItems = true;\n              }\n\n              c.addClass(g.toThemeProperty(\"jqx-tree-dropdown\"));\n              c.append(d);\n              d = c.find(\"li:first\");\n              j.parentElement = d;\n            } else {\n              if (c.children(\"li\").eq(f).length == 0) {\n                c.children(\"li\").eq(f - 1).after(d);\n              } else {\n                if (c.children(\"li\").eq(f)[0].id != d.id) {\n                  c.children(\"li\").eq(f).before(d);\n                }\n              }\n            }\n          }\n        }\n      },\n      _enableDragDrop: function () {\n        if (this.allowDrag && this.host.jqxDragDrop) {\n          var d = this.host.find(\".draggable\");\n          var c = this;\n\n          if (d.length > 0) {\n            d.jqxDragDrop({\n              cursor: \"arrow\",\n              revertDuration: 0,\n              appendTo: \"body\",\n              dragZIndex: 99999,\n              revert: true,\n              initFeedback: function (e) {\n                var g = a('<span style=\"white-space: nowrap;\" class=\"' + c.toThemeProperty(\"jqx-fill-state-normal\") + '\">' + e.text() + \"</span>\");\n                a(document.body).append(g);\n                var f = g.width();\n                g.remove();\n                e.width(f + 5);\n                e.addClass(c.toThemeProperty(\"jqx-fill-state-pressed\"));\n              }\n            });\n            var b = d.jqxDragDrop(\"isDestroyed\");\n\n            if (b === true) {\n              d.jqxDragDrop(\"_createDragDrop\");\n            }\n\n            this._autoScrollTimer = null;\n            c._dragItem = null;\n\n            c._handleDragStart(d, c);\n\n            c._handleDragging(d, c);\n\n            c._handleDragEnd(d, c);\n          }\n        }\n      }\n    });\n  };\n})(jqxBaseFramework);","map":null,"metadata":{},"sourceType":"script"}