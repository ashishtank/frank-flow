!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class i{convertConfiguration(e){let t=e.getValue();t=t.replace(/<[^\/][\S]*?[^"\/]Pipe/g,"<pipe"),t=t.replace(/<[\/][\S]*?[^"\/]Pipe/g,"</pipe").replace(/&/g,""),t=t.replace(/<!--[^]*?-->/g,"");let n=(new DOMParser).parseFromString(t,"text/xml"),i=JSON.parse(this.xml2json(n).replace("undefined",""));return null==i.Configuration.Module&&null!=i.Configuration.Adapter?i.Adapter=i.Configuration.Adapter:i.Configuration.Module.forEach((function(e,t){Array.isArray(e.Adapter)?e.Adapter.forEach((function(e,t){null!=e["@name"]&&e["@name"]==localStorage.getItem("currentAdapter")&&(i.Adapter=e)})):null!=e.Adapter&&null!=e.Adapter["@name"]&&e.Adapter["@name"]==localStorage.getItem("currentAdapter")&&(i=e)})),i}domParse(e){return(new DOMParser).parseFromString(e,"text/xml")}xml2json(e,t){var n={toObj:function(e){var t={};if(1==e.nodeType){if(e.attributes.length)for(var i=0;i<e.attributes.length;i++)t["@"+e.attributes[i].nodeName]=(e.attributes[i].nodeValue||"").toString();if(e.firstChild){for(var a=0,o=0,r=!1,s=e.firstChild;s;s=s.nextSibling)1==s.nodeType?r=!0:3==s.nodeType&&s.nodeValue.match(/[^ \f\n\r\t\v]/)?a++:4==s.nodeType&&o++;if(r)if(a<2&&o<2){n.removeWhite(e);for(s=e.firstChild;s;s=s.nextSibling)3==s.nodeType?t["#text"]=n.escape(s.nodeValue):4==s.nodeType?t["#cdata"]=n.escape(s.nodeValue):t[s.nodeName]?t[s.nodeName]instanceof Array?t[s.nodeName][t[s.nodeName].length]=n.toObj(s):t[s.nodeName]=[t[s.nodeName],n.toObj(s)]:t[s.nodeName]=n.toObj(s)}else e.attributes.length?t["#text"]=n.escape(n.innerXml(e)):t=n.escape(n.innerXml(e));else if(a)e.attributes.length?t["#text"]=n.escape(n.innerXml(e)):t=n.escape(n.innerXml(e));else if(o)if(o>1)t=n.escape(n.innerXml(e));else for(s=e.firstChild;s;s=s.nextSibling)t["#cdata"]=n.escape(s.nodeValue)}e.attributes.length||e.firstChild||(t=null)}else 9==e.nodeType&&(t=n.toObj(e.documentElement));return t},toJson:function(e,t,i){var a=t?'"'+t+'"':"";if(e instanceof Array){for(var o=0,r=e.length;o<r;o++)e[o]=n.toJson(e[o],"",i+"\t");a+=(t?":[":"[")+(e.length>1?"\n"+i+"\t"+e.join(",\n"+i+"\t")+"\n"+i:e.join(""))+"]"}else if(null==e)a+=(t&&":")+"null";else if("object"==typeof e){var s=[];for(var l in e)s[s.length]=n.toJson(e[l],l,i+"\t");a+=(t?":{":"{")+(s.length>1?"\n"+i+"\t"+s.join(",\n"+i+"\t")+"\n"+i:s.join(""))+"}"}else a+="string"==typeof e?(t&&":")+'"'+e.toString()+'"':(t&&":")+e.toString();return a},innerXml:function(e){var t="";if("innerHTML"in e)t=e.innerHTML;else for(var n=function(e){var t="";if(1==e.nodeType){t+="<"+e.nodeName;for(var i=0;i<e.attributes.length;i++)t+=" "+e.attributes[i].nodeName+'="'+(e.attributes[i].nodeValue||"").toString()+'"';if(e.firstChild){t+=">";for(var a=e.firstChild;a;a=a.nextSibling)t+=n(a);t+="</"+e.nodeName+">"}else t+="/>"}else 3==e.nodeType?t+=e.nodeValue:4==e.nodeType&&(t+="<![CDATA["+e.nodeValue+"]]>");return t},i=e.firstChild;i;i=i.nextSibling)t+=n(i);return t},escape:function(e){return e.replace(/[\\]/g,"\\\\").replace(/[\"]/g,'\\"').replace(/[\n]/g,"\\n").replace(/[\r]/g,"\\r")},removeWhite:function(e){e.normalize();for(var t=e.firstChild;t;)if(3==t.nodeType)if(t.nodeValue.match(/[^ \f\n\r\t\v]/))t=t.nextSibling;else{var i=t.nextSibling;e.removeChild(t),t=i}else 1==t.nodeType?(n.removeWhite(t),t=t.nextSibling):t=t.nextSibling;return e}};9==e.nodeType&&(e=e.documentElement);var i=n.toJson(n.toObj(n.removeWhite(e)),e.nodeName,"\t");return"{\n"+t+(t?i.replace(/\t/g,t):i.replace(/\t|\n/g,""))+"\n}"}}class a{constructor(){this.initAdapter()}initAdapter(){this.adapter=["<Adapter",'\txmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"','\txsi:noNamespaceSchemaLocation="https://ibis4example.ibissource.org/rest/ibisdoc/ibisdoc.xsd"','\tname="HelloWorld" ','\tdescription="Voorbeeld adapter">','\t<Receiver name="HelloWorld">','\t\t<ApiListener name="HelloWorld"','\t\t\turiPattern="helloworld/{inputString}"','\t\t\tmethod = "get"',"\t\t/>","\t</Receiver>",'\t<Pipeline firstPipe="SwitchInput">','\t\t<XmlSwitchPipe name="SwitchInput"','\t\t\tgetInputFromFixedValue="&lt;dummy/&gt;"','\t\t\txpathExpression="$input" x="436" y="131">','\t\t\t<Param name="input" sessionKey="inputString"></Param>',"\t\t</XmlSwitchPipe>\n\n","\t\t<FixedResultPipe",'\t\t\tname="NFHelloWorld"','\t\t\treturnString="Hallo Ricardo !"','\t\t \tx="863" y="228">','\t\t\t<Forward name="success" path="Exit"/>',"\t\t</FixedResultPipe>\n",'\t\t<Exit path="ServerError" state="error" code="500"/>','\t\t<Exit path="Exit" state="success" code="201"/>',"\t</Pipeline>","</Adapter>"]}}class o{constructor(e){this.editor=e}validateConfiguration(){return xmllint.validateXML({xml:this.editor.getValue().replace(/\sx=".*?"/g,"").replace(/\sy=".*?"/g,""),schema:localStorage.getItem("ibisdocXsd"),TOTAL_MEMORY:16777217})}decorateLine(e){this.decorations=this.editor.deltaDecorations([],[{range:new monaco.Range(e,1,e,1),options:{glyphMarginClassName:"myGlyphMarginClass"}}])}undoDecorations(){this.decorations=this.editor.deltaDecorations(this.editor.getModel().getAllDecorations(),[{range:new monaco.Range(1,1,1,1),options:{}}]),this.editor.getModel().setValue(this.editor.getModel().getValue())}}class r{constructor(e){this.codeView=e}initProvider(){this.schemaNode=this.stringToXml(localStorage.getItem("ibisdocXsd").replace(/xs\:/g,"")).childNodes[0],console.log(this.schemaNode,"hoi"),monaco.languages.registerCompletionItemProvider("xml",this.getXmlCompletionProvider(monaco))}stringToXml(e){var t;window.DOMParser?t=(new DOMParser).parseFromString(e,"text/xml"):((t=new ActiveXObject("Microsoft.XMLDOM")).async=!1,t.loadXML(e));return t}getLastOpenedTag(e){var t=e.match(/<\/*(?=\S*)([a-zA-Z-]+)/g);if(t)for(var n=[],i=t.length-1;i>=0;i--)if(0===t[i].indexOf("</"))n.push(t[i].substring("</".length));else{var a=e.lastIndexOf(t[i]),o=t[i].substring("<".length);if(-1===e.indexOf("/>",a)){if(!n.length||n[n.length-1]!==o)return{tagName:o,isAttributeSearch:(e=e.substring(a)).indexOf("<")>e.indexOf(">")};n.splice(n.length-1,1)}e=e.substring(0,a)}}getAreaInfo(e){var t=['"',"'","\x3c!--","<![CDATA["],n=!0;e=e.replace(/"([^"\\]*(\\.[^"\\]*)*)"|\'([^\'\\]*(\\.[^\'\\]*)*)\'|<!--([\s\S])*?-->|<!\[CDATA\[(.*?)\]\]>/g,"");for(var i=0;i<t.length;i++){var a=e.indexOf(t[i]);a>-1&&(e=e.substring(0,a),n=!1)}return console.log("completion available: ",n,e),{isCompletionAvailable:n,clearedText:e}}shouldSkipLevel(e){return"complexType"===e||"all"===e||"sequence"===e}findElements(e,t){for(var n=0;n<e.length;n++)if("annotation"!==e[n].tagName&&"attribute"!==e[n].tagName)if(this.shouldSkipLevel(e[n].tagName)){var i=this.findElements(e[n].children,t);if(i)return i}else{if(!t)return e;if(this.getElementAttributes(e[n]).name===t)return e[n]}}findAttributes(e){for(var t=[],n=0;n<e.length;n++)if("complexType"===e[n].tagName){var i=this.findAttributes(e[n].children);if(i)return i}else"attribute"===e[n].tagName&&t.push(e[n]);return t}getElementAttributes(e){for(var t={},n=0;n<e.attributes.length;n++)t[e.attributes[n].name]=e.attributes[n].value;return t}getItemDocumentation(e){for(var t=0;t<e.children.length;t++){if("annotation"===e.children[t].tagName)return this.getItemDocumentation(e.children[0]);if("documentation"===e.children[t].tagName)return e.children[t].textContent}}isItemAvailable(e,t,n){if((t=t||"1")&&"unbounded"===t)return!0;for(var i=0,a=0;a<n.length;a++)n[a]===e&&i++;return 0===i||parseInt(t)>i}getAvailableElements(e,t,n){for(var i,a=[],o=0;o<t.length;o++)"annotation"!==t[o].tagName&&(i=this.findElements([t[o]]));if(!i)return[];for(o=0;o<i.length;o++){let t=this.getElementAttributes(i[o]);this.isItemAvailable(t.name,t.maxOccurs,n)&&a.push({label:t.name,kind:e.languages.CompletionItemKind.Field,detail:t.type,documentation:this.getItemDocumentation(i[o])})}return a}getAvailableAttribute(e,t,n){for(var i,a=[],o=0;o<t.length;o++)"annotation"!==t[o].tagName&&(i=this.findAttributes([t[o]]));if(!i)return[];for(o=0;o<i.length;o++){var r=this.getElementAttributes(i[o]);this.isItemAvailable(r.name,r.maxOccurs,n)&&a.push({label:r.name,kind:e.languages.CompletionItemKind.Property,detail:r.type,documentation:this.getItemDocumentation(i[o])})}return a}getXmlCompletionProvider(e){let t=this;return{triggerCharacters:["<"],provideCompletionItems:function(n,i){var a=n.getValueInRange({startLineNumber:1,startColumn:1,endLineNumber:i.lineNumber,endColumn:i.column}),o=t.getAreaInfo(a);if(console.log("position: ",o),!o.isCompletionAvailable)return[];var r=t.getLastOpenedTag(o.clearedText);console.log("last opened tag: ",r);var s=[],l=[],c=r&&r.isAttributeSearch;if(r){var d=t.stringToXml(n.getValue()),g=d.lastElementChild;for(console.log(d);g;){if(s.push(g.tagName),g.tagName===r.tagName){if(r.isAttributeSearch)for(var p=g.attributes,u=0;u<p.length;u++)l.push(p[u].nodeName);else{var h=g.children;for(u=0;u<h.length;u++)l.push(h[u].tagName)}break}g=g.lastElementChild}}var m=this.schemaNode;for(u=0;u<s.length;u++)m&&(m=t.findElements(m.children,s[u]));return c?m?t.getAvailableAttribute(e,m.children,l):[]:m?t.getAvailableElements(e,m.children,l):[]}}}}class s{constructor(){this.listeners=[],this.ibisdocJson=null,this.decorations=null,this.decorations=null,this.validateConfigurationView,this.CodeCompletionView=new r(this)}addListener(e){this.listeners.push(e)}notifyListeners(e){this.listeners.forEach(t=>t.notify(e))}makeEditor(e){this.editor=monaco.editor.create(document.getElementById("monacoContainer"),{value:e,language:"xml",theme:"vs-dark",glyphMargin:!0,automaticLayout:!0}),this.selectPipe("SwitchInput"),this.validateConfigurationView=new o(this.editor)}edit(e,t){this.editor.executeEdits("monacoContainer",[{range:e,text:t}])}addOptions(e){let t,n,i=$("#adapterSelect");e.forEach((function(e,a){n=e.match(/<Configuration[^]*?name=".*?"/g),null!=n&&(n=n[0].match(/".*?"/g)[0].replace(/"/g,""),t=$("<option></option>").attr("value",a).text(n),$(i).append(t))})),this.editor.setValue(localStorage.getItem("0"))}selectPipe(e){let t=this,n=null;if(this.editor.getModel().findMatches('<[\\S]*?[^"/][pP]ipe[\\s\\t\\n][^]*?>[^]*?<[/][\\S]*?[^"/]Pipe>',!1,!0,!1,!1).forEach((function(i,a){null!==t.editor.getModel().getValueInRange(i.range).match('name="'+e+'"',"g")&&(n=i.range)})),null==n)return n;this.decorations=this.editor.deltaDecorations([],[{range:n,options:{inlineClassName:"myContentClass"}}])}changeName(e,t){this.changeNameCode('<[\\S]*?[^"/][pP]ipe(\\n\\t*)?\\s?name="\\w*"',e,t)&&this.changeNameCode('<forward(\\n\\t*)?(\\s\\w*="(\\s?\\S)*"(\\n\\t*)?)*\\/>',e,t)}changePossition(e,t,n){let i=this;this.editor.getModel().findMatches('<[\\S]*?[^"/][pP]ipe[\\s\\t\\n][^]*?>',!1,!0,!1,!1).forEach((function(a,o){let r=i.editor.getModel().getValueInRange(a.range);if(r.split('"').find(t=>t===e)){if(r.split(/[\s=]/).find(e=>"x"==e))r=r.replace(new RegExp('x="[0-9]*"',"g"),'x="'+t+'"'),r=r.replace(new RegExp('y="[0-9]*"',"g"),'y="'+n+'"');else{let e=' x="'+t+'" y="'+n+'"';r=-1!=r.indexOf("/>")?r.slice(0,r.indexOf("/"))+e+r.slice(r.indexOf("/")):r.slice(0,r.indexOf(">"))+e+r.slice(r.indexOf(">"))}i.edit(a.range,r)}}))}changeExitPossition(e,t,n){let i=this,a=($("#canvas").text().match(/Adapter:\s.*?\s/g)[0].replace(/Adapter:\s/g,"").replace(" ",""),'<Adapter name="'+localStorage.getItem("currentAdapter")+'"[\\s\\S\\n]*?<Exit [^]*?\\/>');this.editor.getModel().findMatches(a,!1,!0,!1,!1).forEach((function(a,o){let r=i.editor.getModel().getValueInRange(a.range);if(r=r.match("<Exit [^]*?\\/>")[0],-1!=r.indexOf('path="'+e+'"')){if(-1!=r.indexOf('x="'))r="\t\t"+r.replace(/x="[0-9]*?"/g,'x="'+t+'"').replace(/y="[0-9]*?"/g,'y="'+n+'"');else{let e=' x="'+t+'" y="'+n+'"';r="\t\t"+r.slice(0,r.indexOf("/"))+e+r.slice(r.indexOf("/"))}a.range.startLineNumber=a.range.endLineNumber,i.edit(a.range,r)}}))}changeNameCode(e,t,n){let i=this,a=this.editor,o=!1,r=e;return a.getModel().findMatches(r,!1,!0,!1,!1).forEach((function(e,r){let s=a.getModel().getValueInRange(e.range);if(s.split('"').find(e=>e===t)){let a=s.replace(new RegExp(t,"g"),n);o=!0,i.edit(e.range,a)}})),o}changeAddForward(e,t){let n=this;this.editor.getModel().findMatches('<[\\S]*?[^"/][pP]ipe[\\s\\t\\n][^]*?>[^]*?<[/][\\S]*?[^"/]Pipe>',!1,!0,!1,!1).forEach((function(i,a){let o=n.editor.getModel().getValueInRange(i.range);if(o.split(/[\s>]/).find(t=>t==='name="'+e+'"')){o=o.slice(0,o.search(/<[/][\S]*?[^"/]Pipe/))+'\t<Forward name="success" path="'+t+'"/>';let e={endColumn:1,endLineNumber:i.range.endLineNumber,startColumn:1,startLineNumber:i.range.endLineNumber};n.edit(e,"\n"),n.edit(i.range,o)}}))}deleteForward(e,t){let n=this;this.editor.getModel().findMatches('<[\\S]*?[^"/][pP]ipe[\\s\\t\\n][^]*?>[^]*?<[/][\\S]*?[^"/]Pipe>',!1,!0,!1,!1).forEach((function(i,a){let o=n.editor.getModel().getValueInRange(i.range);if(o.split(/[\s>]/).find(t=>t==='name="'+e+'"')){t="exit"==t.toLowerCase()?"Exit":t;let e=o.replace(new RegExp('<Forward[^/]*?path="'+t+'"[^]*?/>',"gi"),"");n.edit(i.range,e)}}))}changeAddPipe(e,t,n="customPipe"){let i=this,a=($("#canvas").text().match(/Adapter:\s.*?\s/g)[0].replace(/Adapter:\s/g,"").replace(" ",""),'<Adapter name="'+localStorage.getItem("currentAdapter")+'"[\\s\\S\\n]*?<Exit');this.editor.getModel().getValue().match(a);this.editor.getModel().findMatches(a,!1,!0,!1,!1).some((function(a,o){let r=a.range;r.startColumn=1,r.endColumn=1,r.startLineNumber=r.endLineNumber,i.edit(r,"\n");let s="\t\t\t<"+n+' name="'+e+'" x="'+t.x+'" y="'+t.y+'">\n\n\t\t\t</'+n+">\n";return i.edit(r,s),!0}))}getTypes(){let e,t={},n=this.editor.getValue(),i=n.split(/[<>]/),a=null,o=n.match(/<Receiver[^]*?name=".*?"[^]*?>/g);return o=null!=o?o[0].match(/".*?"/g)[0].replace(/"/g,""):"NO_RECEIVER_FOUND",t['"receiver" '+o]="Receiver",i.forEach((function(n,i){if(n.search(/[^/][\S]*?[^"/]Pipe[^]*?name=".*?"/)>-1&&"/"!=n.charAt(0)){let i=n.slice(n.search(/[^/][\S]*?[^"/]Pipe[^]*?name=".*?"/));null!=i.match(/name=".*?"/)&&(e=i.match(/name=".*?"/)[0].match(/".*?"/)[0].replace(/"/g,"")),null!=i.match(/[^]*?Pipe/)&&(a=i.match(/[^]*?Pipe/)[0]),null!==a&&null!==e&&(t[e]=a)}})),t}}class l{constructor(){}toBeautifulSyntax(e){let t,n=e.match(/<pipe(\n\t*)?(\s\w*="(\s?\S)*"(\n\t*)?)*>[^]*?<\/pipe>/g),i=e;if(null!=n)return n.forEach((function(e,t){let n=e,a="",o=n.match(/className=".*?"/)[0].match(/\.[^.]*?"/)[0].replace(/[".]/g,"");null==o.match(/.*?Pipe/)&&(o+="Pipe"),a=n.replace(/className=".*?"/g,""),a=a.replace(/<pipe/g,"<"+o).replace(/<\/pipe>/,"</"+o+">"),i=i.replace(n,a)})),i=i.replace(/<listener[^]*?className=".*?"[^]*?\/>/g,(function(e){let t=e.match(/className=".*?"/)[0].match(/\.[^.]*?"/)[0].replace(/[".]/g,"");return e="<"+(e=e.replace(/className=".*?"/g,"")).replace(/<.*? /g,t+" ")})).replace(/<[\/]?[a-zA-Z]/g,(function(e){return e.toUpperCase()})),t=i.match(/<Exits>[^]*?<\/Exits>/)[0].replace(/<\/?Exits>/g,"").replace(/\t/,""),i=i.replace(/<Exits>[^]*?<\/Exits>/g,"").replace(/<\/Pipeline>/g,t+"\n \t\t</Pipeline>").replace(/className=".*?"/g,""),i}}class c{constructor(e){this.mainController=e,this.codeModel=new a,this.codeView=new s,this.codeView.addListener(this),this.toBeautiful=new l,this.notify({type:"getData"}),this.notify({type:"setEditor"}),this.editor=this.codeView.editor,this.initListeners()}notify(e){switch(e.type){case"getData":this.getXsd(),this.getCode(),this.getConfigurations();break;case"setEditor":this.codeView.makeEditor()}}initListeners(){let e=this;$("#adapterSelect").on("change",(function(t){let n=$("#adapterSelect").val();e.editor.getModel().setValue(localStorage.getItem(n))})),$("#adapterSelect").on("click",(function(t){let n=$("#adapterSelect").val();localStorage.setItem(n,e.editor.getModel().getValue())})),$("#beautify").click((function(){let t=beautify.xml(e.editor.getValue(),4);e.editor.getModel().setValue(t)})),e.editor.onMouseDown((function(t){t.target.range.startLineNumber=1,t.target.range.startColumn=1;let n=e.editor.getModel().getValueInRange(t.target.range).match(/<Adapter[^]*?name=".*?">/g);if(null!=n){let t=n[n.length-1].match(/name="[^]*?"/g)[0].match(/"[^]*?"/g)[0].replace(/"/g,"");localStorage.setItem("currentAdapter",t),e.mainController.generateFlow()}})),this.editor.getModel().onDidChangeContent((function(t){if(!e.mainController.flowController.flowView.moving&&!e.mainController.flowController.flowView.adding)try{$("#canvas").css("display","block"),$(".customErrorMessage").remove(),e.mainController.generateFlow()}catch(t){console.log("error",t),e.mainController.flowController.flowView.modifyFlow("error",t)}})),$("#runXsd").click((function(){let t=e.validateConfiguration(),n=0;e.undoDecorations(),null!==t.errors&&(console.log(t.errors),t.errors.forEach((function(t,i){n=t.match(/:.*?:/)[0].replace(/:/g,""),e.decorateLine(n)})))}))}selectPipe(e){this.codeView.selectPipe(e)}getTypes(){return this.codeView.getTypes()}validateConfiguration(){return this.codeView.validateConfigurationView.validateConfiguration()}decorateLine(e){this.codeView.validateConfigurationView.decorateLine(e)}undoDecorations(){this.codeView.validateConfigurationView.undoDecorations()}changeName(e,t){this.codeView.changeName(e,t)}changePossition(e,t,n){this.codeView.changePossition(e,t,n)}changeExitPossition(e,t,n){this.codeView.changeExitPossition(e,t,n)}changeAddForward(e,t){this.codeView.changeAddForward(e,t)}deleteForward(e,t){this.codeView.deleteForward(e,t)}changeAddPipe(e,t,n){this.codeView.changeAddPipe(e,t,n)}getPipes(){return this.codeView.ibisdocJson}getCode(){let e=this;fetch("../rest/ibisdoc/ibisdoc.json",{method:"GET"}).then(e=>e.json()).then(t=>{e.codeView.ibisdocJson=t,e.mainController.setPipes(t)}).catch(e=>{console.log(e)})}getXsd(){fetch("../rest/ibisdoc/ibisdoc.xsd",{method:"GET"}).then(e=>e.text()).then(e=>{localStorage.setItem("ibisdocXsd",e),console.log("xsd is loaded!, here")}).catch(e=>{console.log("not loaded xsd",e)})}getConfigurations(){let e=this;fetch("../iaf/api/configurations",{method:"GET"}).then(e=>e.text()).then(e=>{let t=[];return e.match(/<[cC]onfiguration[^]*?>[^]*?<\/[cC]onfiguration>/g).forEach((function(e,n){t.push(e)})),t}).then(t=>(t.forEach((function(n,i){null==n.match(/<Configuration/g)?(t[i]=e.toBeautiful.toBeautifulSyntax(n),localStorage.setItem(i,e.toBeautiful.toBeautifulSyntax(n))):localStorage.setItem(i,n)})),t)).then(t=>{e.codeView.addOptions(t)}).catch(e=>{console.log("couldnt load configurations",e)})}}class d{constructor(){}addDescription(e,t,n){let i=$("#canvas"),a=$("<div></div>").addClass("description").attr("id","description"+n),o=$("<p></p>").text(e);a.append(o),console.log("desc Text:"+e,t),t.x=parseInt(t.x)+300,$(a).css("left",t.x+"px"),$(a).css("top",t.y+"px"),i.append(a)}}class g{constructor(e){this.flowView=e,this.descriptionView=new d}addPipe(e,t,n,i,a){let o=this.flowView,r=o.windows+=1,s=$("#canvas"),l=$("<div></div>").addClass("window sourceWindow").attr("id","sourceWindow"+r),c=$("<strong></strong>").attr("id","strong").text(o.getTypes()[e]),d=$("<div></div>").addClass("typeWindow").append(this.getTypeImage(e),c),g=$("<div></div>").addClass("bottomContainer"),p=$("<strong></strong>").attr("id","strong").text(e),u=$("<hr>"),h=$("<strong></strong>").attr("id","strong").text(n);return i?g.append(p,h):g.append(p,u,h),l.append(d,g),null!=t&&($(l).css("left",t.x+"px"),$(l).css("top",t.y+"px"),a&&this.descriptionView.addDescription(a,t,r)),i&&$(l).addClass("exit"),instance.makeSource(l,{filter:".enableDisableSource",filterExclude:!0,maxConnections:-1,endpoint:["Dot",{radius:7,cssClass:"small-blue"}],anchor:o.sourceAnchors,connector:[o.connectorType,{stub:[40,60],gap:10,cornerRadius:5,alwaysRespectStubs:!0,midpoint:1e-4}]}),instance.makeTarget(l,{dropOptions:{hoverClass:"hover"},anchor:["Left","Top","Right"],endpoint:["Dot",{radius:11,cssClass:"large-green"}]}),s.append(l),a&&instance.connect({source:"sourceWindow"+r,target:"description"+r}),e}getTypeImage(e,t){let n,i,a=this.flowView.getTypes(),o=new Image;if(i=t?"media/"+e+".png":"media/"+a[e]+".png",null!=i)return n=$("<img></img>").attr({src:i,alt:a[e],title:a[e]}).addClass("typeImg"),o.src=i,o.onerror=function(){n.attr("src","media/basicPipe.png")},n}}class p{constructor(e){this.flowView=e,this.pipeView=new g(e)}addPipe(e="pipe"+this.flowView.windows,t,n="",i,a){return this.pipeView.addPipe(e,t,n,i,a)}generateFlow(e,t){this.flowView.resetWindows();let n=null,i=e;if(null!=i&&null!=i.Adapter&&null!=i.Adapter.Pipeline){if(instance.reset(),$("#canvas").empty(),null!=i.Adapter.Pipeline.pipe){$("#canvas").text("Adapter: "+i.Adapter["@name"]+" ");let e=i.Adapter.Pipeline.pipe,t=[];if(Array.isArray(e))for(let i in e){let a=e[i]["@name"],o=e[i]["@x"],r=e[i]["@y"],s="",l=null;if(n=this.checkPossitions(o,r),null!=e[i]["@xpathExpression"]?s=e[i]["@xpathExpression"].slice(0,15)+"...":null!=e[i].FixedQuerySender&&null!=e[i].FixedQuerySender["@query"]&&(s=e[i].FixedQuerySender["@query"].slice(0,15)+"..."),null!=e[i].description&&(console.log(e[i].description),l=e[i].description),this.addPipe(a,n,s,null,l),null!=e[i].Forward){let n=null;Array.isArray(e[i].Forward)?e[i].Forward.forEach((function(e,i){n={sourcePipe:a,targetPipe:e["@path"],name:e["@name"]},t.push(n)})):(n={sourcePipe:a,targetPipe:e[i].Forward["@path"],name:e[i].Forward["@name"]},t.push(n))}else{let n=parseInt(i)+1;if(null!=e[n]){let i={sourcePipe:a,targetPipe:e[n]["@name"],name:"success"};t.push(i)}}}else{let n=e["@name"];if(this.addPipe(n),null!=e.Forward){let i=null;Array.isArray(e.Forward)?e.Forward.forEach((function(e,a){i={sourcePipe:n,targetPipe:e["@path"],name:e["@name"]},t.push(i)})):(i={sourcePipe:n,targetPipe:e.Forward["@path"],name:e.Forward["@name"]},t.push(i))}}if(this.addExits(i.Adapter.Pipeline.Exit),null===n?this.flowView.setOffsets(!1):this.flowView.setOffsets(!0),null!=i.Adapter.Receiver){let e=this.addReceiver(i,t[0].sourcePipe);t.push(e)}this.generateForwards(t)}}else this.flowView.displayError(i)}checkPossitions(e,t){return null==e&&null!=t?e=t:null==t&&null!=e&&(t=e),null!=e&&null!=t?{x:e,y:t}:null}addReceiver(e,t){return this.addPipe("(receiver): "+e.Adapter.Receiver["@name"],{x:"600",y:"400"}),{sourcePipe:"(receiver): "+e.Adapter.Receiver["@name"],targetPipe:t,name:"request"}}addExits(e){let t,n,i,a,o=e;if(null!=o)if(Array.isArray(o)){let e=this;o.forEach((function(r,s){n=o[s]["@path"],a=o[s]["@x"],i=o[s]["@y"],null!=a&&null!=i&&(t={x:a,y:i}),e.addPipe(n,t,"",!0)}))}else n=o["@path"],a=o["@x"],i=o["@y"],null!=a&&null!=i&&(t={x:a,y:i}),this.addPipe(n,t,"",!0)}generateForwards(e){let t=!0,n=this;instance.bind("connection",(function(e,i){let a=0;instance.getAllConnections().forEach((function(t){t.sourceId==e.connection.sourceId&&t.targetId==e.connection.targetId&&a<2&&a++}));let o=e.sourceEndpoint.element.lastChild.firstElementChild.textContent,r=e.targetEndpoint.element.lastChild.firstElementChild.textContent;e.connection.bind("dblclick",(function(e){instance.deleteConnection(e),n.flowView.modifyFlow("delete",{name:o,target:r})})),a>1?instance.getAllConnections().some((function(t){if(t.sourceId==e.connection.sourceId&&t.targetId==e.connection.targetId)return instance.deleteConnection(t),!0})):t||n.flowView.modifyFlow("connection",{source:o,target:r})}));let i="",a="";t=!0,$(e).each((function(e,t){i="",a="",null==t.targetPipe&&(t.targetPipe=t.name),$(".sourceWindow").each((function(e,n){var o=$(n)[0];let r=o.lastChild.firstChild.innerHTML;r==t.sourcePipe?i=$(o).attr("id"):r==t.targetPipe&&(a=$(o).attr("id"))}));let n={stroke:"#000000",strokeWidth:3};"failure"==t.name||"exception"==t.name?n.stroke="#FF0000":"success"==t.name?n.stroke="#22bb33":"request"!=t.name&&"response"!=t.name||(n.dashstyle="2 4"),""!=i&&""!=a&&instance.connect({source:i,target:a,paintStyle:n,overlays:[["Label",{label:t.name,id:"label",location:.1,padding:100}]],connector:[this.connectorType,{stub:[40,60],gap:10,cornerRadius:5,alwaysRespectStubs:!0,midpoint:1e-4}]})})),t=!1}}class u{constructor(){this.transformedXml=null,this.types=[],this.listeners=[],this.windows=0,this.moving=!1,this.adding=!1,this.connectorType="Flowchart",this.horizontalBuild=!1,this.flowGenerator=new p(this),this.getInstance()}addListener(e){this.listeners.push(e)}notifyListeners(e){this.listeners.forEach(t=>t.notify(e))}getImage(){var e=document.getElementById("canvas");domtoimage.toSvg(e).then((function(e){var t=document.createElement("a");t.download="lol.svg",t.href=e,t.click()})).catch((function(e){console.error("oops, something went wrong!",e)}))}resetWindows(){this.windows=0}getInstance(){this.sourceAnchors=["Top","Right","Left",[.25,1,0,1],[.5,1,0,1],[.75,1,0,1],[1,1,0,1]],this.instance=window.instance=jsPlumb.getInstance({DragOptions:{cursor:"pointer",zIndex:2e3},PaintStyle:{stroke:"#000000",strokeWidth:3},ConnectionOverlays:[["Arrow",{location:1,visible:!0,id:"ARROW",zIndex:1e3}]],Container:"canvas"});this.instance.registerConnectionType("basic",{connector:["StateMachine",{stub:[40,60],gap:10,cornerRadius:5,alwaysRespectStubs:!0}]})}modifyFlow(e,t){switch(e){case"generate":this.generateFlow();break;case"add":this.notifyListeners(this.addCustomPipe(t.name,t.className));break;case"edit":this.notifyListeners(this.editTitle(t));break;case"connection":this.adding=!0,t.type="changeAddForward",this.notifyListeners(t),this.adding=!1;break;case"drag":(t=this.cleanPossitions(t)).type="drag",this.notifyListeners(t);break;case"dragExit":(t=this.cleanPossitions(t)).type="dragExit",this.notifyListeners(t);break;case"delete":t.type="delete",this.notifyListeners(t);break;case"error":this.displayError(t)}}cleanPossitions(e){return e.x=e.x.replace(/px/,""),e.y=e.y.replace(/px/,""),e}editTitle(e){let t=e.innerHTML,n=prompt("What is the new Title?",t);return null!=n?(e.innerHTML=n,{oldTitle:t,newTitle:n}):null}addCustomPipe(e,t){return{type:"changeAddPipe",name:this.addPipe(e,{x:100,y:100}),possitions:{x:100,y:100},className:t}}toggleConnectorType(e){"Flowchart"===e.connectorType?e.connectorType="StateMachine":e.connectorType="Flowchart",e.generateFlow()}addPipe(e,t,n,i){return this.flowGenerator.addPipe(e,t,n,i)}getTypes(){return this.notifyListeners({type:"getTypes"}),this.types}setOffsets(e){let t=0;this.moving=!0;for(let n=1;n<=this.windows;n++){if(t+=250,!e){let e=$("#sourceWindow"+n);this.horizontalBuild?(e.css("top","100px"),e.css("left",t+"px")):e.css("top",t+"px"),this.modifyFlow("drag",{name:e[0].lastChild.firstElementChild.textContent,x:e.css("left"),y:e.css("top")})}let i,a;this.horizontalBuild?(i=t+(64*n-1e3),a=parseInt($("#canvas").css("width").replace("px","")),i>a&&$("#canvas").css("width",i)):(i=t+(64*n-1450),a=parseInt($("#canvas").css("height").replace("px","")),i>a&&$("#canvas").css("height",i))}this.moving=!1}generateFlow(){this.notifyListeners({type:"convertConfiguration"}),this.flowGenerator.generateFlow(this.transformedXml,this.windows)}displayError(e){instance.reset(),$("#canvas").empty(),$("#canvas").css("display","none"),$(".customErrorMessage").remove(),$("#flowContainer").append($("<h1></h1>").text("Error"+e).addClass("customErrorMessage"))}}class h{constructor(e){this.listeners=[],this.pipes=null,this.flowView=e.flowView}addListener(e){this.listeners.push(e)}notifyListeners(e){this.listeners.forEach(t=>t.notify(e))}generatePalettePipes(e){let t=new g(this.flowView),n=$("#palette");e.forEach((function(e,i){$("<strong></strong>").text(e.name);let a,o=$("<button></button>").attr("type","button").addClass("collapsible listItem"),r=$("<div></div>").addClass("content"),s=$("<span></span>").addClass("buttonText").text(e.name);a=t.getTypeImage(e.name,!0).attr("id",e.name),o.append(s),r.append(a),n.append(o,r)})),this.setHandlers()}setHandlers(){let e=this;var t,n=document.getElementsByClassName("collapsible");for(t=0;t<n.length;t++)n[t].addEventListener("click",(function(){this.classList.toggle("active");var e=this.nextElementSibling;"block"===e.style.display?e.style.display="none":e.style.display="block"}));$("#canvas").on("dragover",(function(e){e.preventDefault(),e.stopPropagation()})),$("#canvas").on("drop",(function(t){t.preventDefault(),t.stopPropagation();let n=localStorage.getItem("dropPipe");e.flowView.modifyFlow("add",{name:"new"+n,className:n})})),$(".typeImg").on("dragstart",(function(e){console.log("drag"),localStorage.setItem("dropPipe",e.target.id)}))}}class m{constructor(e){this.mainController=e,this.flowView=new u,this.flowView.addListener(this),this.paletteView=new h(this),this.paletteView.addListener(this),this.notify({type:"getPipes"}),this.hoverSourceWindow=!1,this.initHandlers()}notify(e){if(null!=e)switch(e.type){case"convertConfiguration":this.flowView.transformedXml=this.mainController.convertConfiguration();break;case"getTypes":this.flowView.types=this.mainController.modifyCode("getTypes");break;case"changeName":this.mainController.modifyCode("changeName",e);break;case"changeAddPipe":this.mainController.modifyCode("changeAddPipe",e);break;case"changeAddForward":this.mainController.modifyCode("changeAddForward",e);break;case"drag":this.mainController.modifyCode("changePossition",e);break;case"dragExit":this.mainController.modifyCode("changeExitPossition",e);break;case"delete":this.mainController.modifyCode("deleteForward",e)}}initHandlers(){let e=this;$("#addPipe").click((function(){e.flowView.modifyFlow("add",{name:"newPipe",className:"customPipe"})})),$("#downloadLink").click((function(){e.flowView.getImage()})),$("#setData").click((function(){e.flowView.generateFlow(e.flowView)})),$("#lineChanges").click((function(){e.flowView.toggleConnectorType(e.flowView)})),$("#toggleH").click((function(){e.flowView.horizontalBuild?(e.flowView.horizontalBuild=!1,$("#toggleH").removeClass("selectedItem")):(e.flowView.horizontalBuild=!0,$("#toggleH").addClass("selectedItem")),e.flowView.generateFlow(e.flowView)})),$("#canvas").on("dblclick","#strong",(function(t){t.stopPropagation(),console.log("dblclick!"),"EXIT"!==this.innerHTML&&e.flowView.modifyFlow("edit",this)})),jsPlumb.on($("#canvas"),"mouseover",".sourceWindow",(function(){t.panzoom("disable")})),jsPlumb.on($("#canvas"),"mouseout",".sourceWindow",(function(){t.panzoom("enable"),$("#flowContainer").attr("style","")})),$("#canvas").on("click",".sourceWindow",(function(t){t.preventDefault(),e.mainController.modifyCode("undoDecorations"),e.mainController.modifyCode("selectPipe",{name:this.lastElementChild.firstElementChild.innerHTML})})),jsPlumb.on($("#canvas"),"mouseover",".bottomContainer",(function(){let t=this.parentElement,n={disabled:!1,containment:"#canvas",drag:function(){e.flowView.moving=!0;let n={x:$(t).css("left"),y:$(t).css("top"),name:t.lastElementChild.firstElementChild.innerHTML};$(t).hasClass("exit")?e.flowView.modifyFlow("dragExit",n):e.flowView.modifyFlow("drag",n)},stop:function(t,n){e.flowView.moving=!1}};instance.draggable(t,n),instance.isSourceEnabled(t)&&instance.toggleSourceEnabled(t),$(this).addClass("element-disabled")})),jsPlumb.on($("#canvas"),"mouseout",".bottomContainer",(function(){let e=this.parentElement;instance.draggable(e,{disabled:!0}),instance.isSourceEnabled(e)||instance.toggleSourceEnabled(e),$(this).removeClass("element-disabled")}));$("#flowContainer").innerWidth(),$("#flowContainer").innerHeight();let t=$("#canvas").panzoom({minScale:.5,increment:.2});t.on("panzoomend",(function(e){var n=parseInt($("#canvas").css("transform").split(",")[5]),i=parseInt($("#canvas").css("transform").split(",")[4]);i>=0&&t.panzoom("pan",0,n),n<=1e3-Math.abs($("#canvas").css("height").replace("px",""))&&t.panzoom("pan",i,1e3-Math.abs($("#canvas").css("height").replace("px",""))),i<=-1540&&t.panzoom("pan",-1540,n),n>=0&&t.panzoom("pan",i,0),$("#flowContainer").attr("style","")})),t.parent().on("mousewheel.focal",(function(e){if(e.shiftKey){e.preventDefault();var n=e.delta||e.originalEvent.wheelDelta,i=n?n<0:e.originalEvent.deltaY>0;t.panzoom("zoom",i,{increment:.1,focal:e})}}))}}new class{constructor(){this.configurationConverter=new i,this.codeController=new c(this),this.flowController=new m(this)}convertConfiguration(){return this.configurationConverter.convertConfiguration(this.codeController.codeView.editor)}generateFlow(){this.flowController.flowView.modifyFlow("generate")}setPipes(e){this.flowController.paletteView.generatePalettePipes(e[2].classes)}modifyCode(e,t){let n=this.codeController;switch(e){case"getTypes":return n.getTypes();case"validateConfiguration":return n.validateConfiguration();case"decorateLine":n.decorateLine(t.line);break;case"undoDecorations":n.undoDecorations();break;case"changeName":n.changeName(t.oldTitle,t.newTitle);break;case"changePossition":n.changePossition(t.name,t.x,t.y);break;case"changeExitPossition":n.changeExitPossition(t.name,t.x,t.y);break;case"changeAddForward":n.changeAddForward(t.source,t.target);break;case"deleteForward":n.deleteForward(t.name,t.target);break;case"changeAddPipe":n.changeAddPipe(t.name,t.possitions,t.className);break;case"selectPipe":n.selectPipe(t.name)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,